# Defines data structures (defaults) for OpenDSS objects
""
function _create_options(; kwargs...)
    Dict{String,Any}(
        "%growth" => get(kwargs, Symbol("%growth"), 2.5),
        "%mean" => get(kwargs, Symbol("%mean"), 65.0),
        "%normal" => get(kwargs, Symbol("%normal"), 100.0),
        "%stddev" => get(kwargs, Symbol("%stddev"), 9.0),
        "addtype" => get(kwargs, :addtype, "generator"),
        "algorithm" => get(kwargs, :algorithm, "newton"),
        "allocationfactors" => get(kwargs, :allocationfactors, ""),
        "allowduplicates" => get(kwargs, :allowduplicates, false),
        "autobuslist" => get(kwargs, :autobuslist, String[]),
        "basefrequency" => get(kwargs, :basefrequency, 60.0),
        "bus" => get(kwargs, :bus, ""),
        "capkvar" => get(kwargs, :capkvar, 600.0),
        "casename" => get(kwargs, :casename, ""),
        "capmarkercode" => get(kwargs, :capmarkercode, 37),
        "capmarkersize" => get(kwargs, :capmarkersize, 3),
        "cfactors" => get(kwargs, :cfactors, 4.0),
        "circuit" => get(kwargs, :circuit, ""),
        "cktmodel" => get(kwargs, :cktmodel, "multiphase"),
        "class" => get(kwargs, :class, ""),
        "controlmode" => get(kwargs, :controlmode, "static"),
        "datapath" => get(kwargs, :datapath, ""),
        "defaultbasefrequency" => get(kwargs, :defaultbasefrequency, 60.0),
        "defaultbasefreq" => get(kwargs, :defaultbasefreq, 60.0), # Alias to defaultbasefrequency
        "defaultdaily" => get(kwargs, :defaultdaily, "default"),
        "defaultyearly" => get(kwargs, :defaultyearly, "default"),
        "demandinterval" => get(kwargs, :demandinterval, false),
        "diverbose" => get(kwargs, :diverbose, false),
        "dssvisualizationtool" => get(kwargs, :dssvisualizationtool, ""),
        "earthmodel" => get(kwargs, :earthmodel, "deri"),
        "editor" => get(kwargs, :editor, "notepad"),
        "element" => get(kwargs, :element, ""),
        "emergvmaxpu" => get(kwargs, :emergvmaxpu, 1.08),
        "emergvminpu" => get(kwargs, :emergvminpu, 0.90),
        "frequency" => get(kwargs, :frequency, 60.0),
        "genkw" => get(kwargs, :genkw, 1000.0),
        "genmult" => get(kwargs, :genmult, 1.0),
        "h" => get(kwargs, :h, ""),
        "harmonics" => get(kwargs, :harmonics, "all"),
        "hour" => get(kwargs, :hour, 1.0),
        "keeplist" => get(kwargs, :keeplist, String[]),
        "ldcurve" => get(kwargs, :ldcurve, "nil"),
        "loadmodel" => get(kwargs, :loadmodel, "admittance"),
        "loadmult" => get(kwargs, :loadmult, 1.0),
        "log" => get(kwargs, :log, false),
        "lossregs" => get(kwargs, :lossregs, 13),
        "lossweight" => get(kwargs, :lossweight, 1.0),
        "markercode" => get(kwargs, :markercode, 0),
        "markswitches" => get(kwargs, :markswitches, false),
        "markcapacitors" => get(kwargs, :markcapacitors, false),
        "markpvsystems" => get(kwargs, :markpvsystems, false),
        "markregulators" => get(kwargs, :markregulators, false),
        "markstorage" => get(kwargs, :markstorage, false),
        "marktransformers" => get(kwargs, :marktransformers, false),
        "maxcontroliter" => get(kwargs, :maxcontroliter, 10),
        "maxiter" => get(kwargs, :maxiter, 15),
        "miniterations" => get(kwargs, :miniterations, 2),
        "mode" => get(kwargs, :mode, "Snap"),
        "name" => get(kwargs, :name, ""),
        "nodewidth" => get(kwargs, :nodewidth, 1),
        "normvmaxpu" => get(kwargs, :normvmaxpu, 1.05),
        "normvminpu" => get(kwargs, :normvminpu, 0.95),
        "numallociterations" => get(kwargs, :numallociterations, 2),
        "number" => get(kwargs, :number, 0),
        "object" => get(kwargs, :object, ""),
        "overloadreport" => get(kwargs, :overloadreport, false),
        "neglectloady" => get(kwargs, :neglectloady, false),
        "pricecurve" => get(kwargs, :pricecurve, ""),
        "pricesignal" => get(kwargs, :pricesignal, 25),
        "pvmarkercode" => get(kwargs, :pvmarkercode, 15),
        "pvmarkersize" => get(kwargs, :pvmarkersize, 1),
        "random" => get(kwargs, :random, "uniform"),
        "recorder" => get(kwargs, :recorder, false),
        "reduceoption" => get(kwargs, :reduceoption, "default"),
        "registryupdate" => get(kwargs, :registryupdate, true),
        "regmarkercode" => get(kwargs, :regmarkercode, 47),
        "regmarkersize" => get(kwargs, :regmarkersize, 1),
        "sampleenergymeters" => get(kwargs, :sampleenergymeters, false),
        "sec" => get(kwargs, :sec, 0.0),
        "showexport" => get(kwargs, :showexport, false),
        "stepsize" => get(kwargs, :stepsize, "1h"),
        "switchmarkercode" => get(kwargs, :switchmarkercode, 4),
        "terminal" => get(kwargs, :terminal, ""),
        "time" => get(kwargs, :time, Float64[0.0, 0.0]),
        "tolerance" => get(kwargs, :tolerance, 0.0001),
        "totaltime" => get(kwargs, :totaltime, 0.0),
        "tracecontrol" => get(kwargs, :tracecontrol, false),
        "transmarkercode" => get(kwargs, :transmarkercode, 35),
        "transmarkersize" => get(kwargs, :transmarkersize, 1),
        "storemarkercode" => get(kwargs, :storemarkercode, 9),
        "storemarkersize" => get(kwargs, :storemarkersize, 1),
        "trapezoidal" => get(kwargs, :trapezoidal, false),
        "type" => get(kwargs, :type, ""),
        "ueregs" => get(kwargs, :ueregs, 11),
        "ueweight" => get(kwargs, :ueweight, 1.0),
        "voltagebases" => get(kwargs, :voltagebases, Float64[]),
        "voltexceptionreport" => get(kwargs, :voltexceptionreport, false),
        "year" => get(kwargs, :year, 0),
        "zonelock" => get(kwargs, :zonelock, false),
    )
end


"Returns a Dict{String,Type} for the desired component `comp`, giving all of the expected data types"
const _dss_parameter_data_types = Dict{String,Dict{String,Type}}((comp, Dict{String,Type}((k, typeof(v)) for (k,v) in @eval $(Symbol("_create_$comp"))())) for comp in _dss_supported_components)
