var documenterSearchIndex = {"docs":
[{"location":"reference/internal.html#Internal-Functions","page":"Internal Functions","title":"Internal Functions","text":"","category":"section"},{"location":"reference/internal.html","page":"Internal Functions","title":"Internal Functions","text":"Modules = [PowerModelsDistribution]\nPublic = false","category":"page"},{"location":"reference/internal.html#PowerModelsDistribution._1to1_maps","page":"Internal Functions","title":"PowerModelsDistribution._1to1_maps","text":"items that are mapped one-to-one from engineering to math models\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._CPF_COMPONENT_INTERFACES","page":"Internal Functions","title":"PowerModelsDistribution._CPF_COMPONENT_INTERFACES","text":"A mapping of supported component types to their functional interfaces.\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._array_delimiters","page":"Internal Functions","title":"PowerModelsDistribution._array_delimiters","text":"different acceptable delimiters for arrays\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._conductor_matrix","page":"Internal Functions","title":"PowerModelsDistribution._conductor_matrix","text":"field names that should become multi-conductor matrix not arrays\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._conductorless","page":"Internal Functions","title":"PowerModelsDistribution._conductorless","text":"field names that should not be multi-conductor values\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._convert_to_meters","page":"Internal Functions","title":"PowerModelsDistribution._convert_to_meters","text":"conversion factors for units to meters\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._double_operators","page":"Internal Functions","title":"PowerModelsDistribution._double_operators","text":"two number operators for reverse polish notation\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss2pmd_capcontrol_type","page":"Internal Functions","title":"PowerModelsDistribution._dss2pmd_capcontrol_type","text":"dss to pmd capcontrol type\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss2pmd_load_model","page":"Internal Functions","title":"PowerModelsDistribution._dss2pmd_load_model","text":"dss to pmd load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_array_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_array_regex","text":"regex for dss arrays\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_cmd_buscoords_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_cmd_buscoords_regex","text":"regex for dss 'buscoords' command\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_cmd_more_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_cmd_more_regex","text":"regex for dss 'more' command\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_cmd_new_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_cmd_new_regex","text":"regex for dss 'new' command\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_cmd_set_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_cmd_set_regex","text":"regex for dss 'set' command\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_control_objects","page":"Internal Functions","title":"PowerModelsDistribution._dss_control_objects","text":"all objects that define controls\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_data_objects","page":"Internal Functions","title":"PowerModelsDistribution._dss_data_objects","text":"all data holding objects\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_edge_objects","page":"Internal Functions","title":"PowerModelsDistribution._dss_edge_objects","text":"all edge types that can help define buses\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_matrix_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_matrix_regex","text":"regex for dss matrices\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_monitor_objects","page":"Internal Functions","title":"PowerModelsDistribution._dss_monitor_objects","text":"all objects that provide montoring\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_node_objects","page":"Internal Functions","title":"PowerModelsDistribution._dss_node_objects","text":"all node types that can help define buses\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_property_renames","page":"Internal Functions","title":"PowerModelsDistribution._dss_property_renames","text":"collection of dss properties that have been renamed (i.e., deprecated)\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_rpn_array_sep_regex","page":"Internal Functions","title":"PowerModelsDistribution._dss_rpn_array_sep_regex","text":"regex for dss rpn arrays\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_short_prop_names_map","page":"Internal Functions","title":"PowerModelsDistribution._dss_short_prop_names_map","text":"const built at import of short property names\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_supported_commands","page":"Internal Functions","title":"PowerModelsDistribution._dss_supported_commands","text":"supported dss commands\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_supported_components","page":"Internal Functions","title":"PowerModelsDistribution._dss_supported_components","text":"components currently supported for automatic data type parsing\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._dss_unsupported_commands","page":"Internal Functions","title":"PowerModelsDistribution._dss_unsupported_commands","text":"unsupported dss commands\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._eng_edge_elements","page":"Internal Functions","title":"PowerModelsDistribution._eng_edge_elements","text":"list of edge type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._eng_model_checks","page":"Internal Functions","title":"PowerModelsDistribution._eng_model_checks","text":"data check functions for the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._eng_model_dtypes","page":"Internal Functions","title":"PowerModelsDistribution._eng_model_dtypes","text":"Data types of accepted fields in the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._eng_model_req_fields","page":"Internal Functions","title":"PowerModelsDistribution._eng_model_req_fields","text":"required fields in the engineering data model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._eng_node_elements","page":"Internal Functions","title":"PowerModelsDistribution._eng_node_elements","text":"list of nodal type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._like_exclusions","page":"Internal Functions","title":"PowerModelsDistribution._like_exclusions","text":"properties that should be excluded from being overwritten during the application of like\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._loss_model_objects","page":"Internal Functions","title":"PowerModelsDistribution._loss_model_objects","text":"collect of components and their properties that define loss models when transforming to the MATHEMATICAL model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._math_dispatchable_elements","page":"Internal Functions","title":"PowerModelsDistribution._math_dispatchable_elements","text":"list of math asset types that are dispatchable\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._math_edge_elements","page":"Internal Functions","title":"PowerModelsDistribution._math_edge_elements","text":"list of edge type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._math_node_elements","page":"Internal Functions","title":"PowerModelsDistribution._math_node_elements","text":"list of nodal type elements in the engineering model\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._pmd_math_global_keys","page":"Internal Functions","title":"PowerModelsDistribution._pmd_math_global_keys","text":"list of multinetwork keys that belong at the root level\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#PowerModelsDistribution._single_operators","page":"Internal Functions","title":"PowerModelsDistribution._single_operators","text":"single number operators in reverse polish notation\n\n\n\n\n\n","category":"constant"},{"location":"reference/internal.html#Base.delete!-Union{Tuple{T}, Tuple{T, String}} where T<:InfrastructureObject","page":"Internal Functions","title":"Base.delete!","text":"Base.delete! for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.delete!-Union{Tuple{T}, Tuple{T, Symbol}} where T<:InfrastructureObject","page":"Internal Functions","title":"Base.delete!","text":"Base.delete! for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.eltype-Tuple{T} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.eltype","text":"Base.eltype for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.get-Union{Tuple{T}, Tuple{T, String, Any}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.get","text":"Base.get for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.getindex-Union{Tuple{T}, Tuple{T, String}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.getindex","text":"Base.getindex for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.getproperty-Tuple{Any, String}","page":"Internal Functions","title":"Base.getproperty","text":"Base.getproperty for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.haskey-Union{Tuple{T}, Tuple{T, String}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.haskey","text":"Base.haskey for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.isempty-Tuple{T} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.isempty","text":"Base.isempty for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.iterate-Union{Tuple{T}, Tuple{T, Int64}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.iterate","text":"Base.iterate for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.keys-Tuple{T} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.keys","text":"Base.keys for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.keytype-Tuple{InfrastructureModel}","page":"Internal Functions","title":"Base.keytype","text":"Base.keytype for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.length-Tuple{T} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.length","text":"Base.length for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.merge!-Union{Tuple{T}, Tuple{T, T}} where T<:DssObject","page":"Internal Functions","title":"Base.merge!","text":"Base.merge! for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{Type{T}, String}} where T<:CapControlType","page":"Internal Functions","title":"Base.parse","text":"Parses dss capacitor control type into CapControlType enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{Type{T}, String}} where T<:ConnConfig","page":"Internal Functions","title":"Base.parse","text":"Parses dss conn properties into ConnConfig enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{Type{T}, String}} where T<:LoadModel","page":"Internal Functions","title":"Base.parse","text":"Parses dss load model into LoadModel enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{Type{T}, String}} where T<:Status","page":"Internal Functions","title":"Base.parse","text":"Parses dss enabled property into Status enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{Type{T}, String}} where T<:String","page":"Internal Functions","title":"Base.parse","text":"parser to pass through String\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{subtype}, Tuple{Type{T}, String}} where {subtype, T<:Matrix{subtype}}","page":"Internal Functions","title":"Base.parse","text":"parses a dss type matrix into Matrix{T}\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.parse-Union{Tuple{T}, Tuple{subtype}, Tuple{Type{T}, String}} where {subtype, T<:Vector{subtype}}","page":"Internal Functions","title":"Base.parse","text":"parses a dss type vector into Vector{T}\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.setindex!-Union{Tuple{T}, Tuple{U}, Tuple{T, U, String}} where {U, T<:Union{InfrastructureObject, InfrastructureModel}}","page":"Internal Functions","title":"Base.setindex!","text":"Base.setindex! for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.setproperty!-Tuple{Any, String, Any}","page":"Internal Functions","title":"Base.setproperty!","text":"Base.setproperty! for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.setproperty!-Tuple{DssObject, String, String, Type}","page":"Internal Functions","title":"Base.setproperty!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.show-Union{Tuple{T}, Tuple{IO, MIME{Symbol(\"text/plain\")}, T}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.show","text":"Base.show variant for InfrastructureModel,InfrastructureObject to make them Dict-like\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.show-Union{Tuple{T}, Tuple{IO, T}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.show","text":"Base.show variant for InfrastructureModel,InfrastructureObject to make them Dict-like\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.summary-Union{Tuple{T}, Tuple{IO, T}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.summary","text":"Base.summary for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.valtype-Tuple{T} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"Base.valtype","text":"Base.valtype for InfrastructureModel,InfrastructureObject to give them Dict-like behavior\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{Char}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for Char\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{ConnConfig}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for ConnConfig enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{Dispatchable}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for Dispatchable enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{LoadModel}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for LoadModel enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{ShuntModel}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for ShuntModel enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{Status}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for Status enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{String}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for String\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#Base.zero-Tuple{Type{SwitchState}}","page":"Internal Functions","title":"Base.zero","text":"Base.zero for SwitchState enum\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#InfrastructureModels.build_solution_values-Tuple{JuMP.AbstractJuMPScalar}","page":"Internal Functions","title":"InfrastructureModels.build_solution_values","text":"custom build_solution_values for multiconductor (vector) JuMP expressions\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#InfrastructureModels.build_solution_values-Tuple{JuMP.Containers.DenseAxisArray{var\"#s309\", 1, Ax, L} where {var\"#s309\", Ax, L<:Tuple{JuMP.Containers._AxisLookup}}}","page":"Internal Functions","title":"InfrastructureModels.build_solution_values","text":"custom build_solution_values for generic dense axis arrays\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#InfrastructureModels.build_solution_values-Tuple{JuMP.Containers.DenseAxisArray{var\"#s309\", 1, Ax, L} where {var\"#s309\"<:Number, Ax, L<:Tuple{JuMP.Containers._AxisLookup}}}","page":"Internal Functions","title":"InfrastructureModels.build_solution_values","text":"custom build_solution_values for multiconductor (vector) constants\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#InfrastructureModels.build_solution_values-Tuple{LinearAlgebra.Symmetric{JuMP.VariableRef, Matrix{JuMP.VariableRef}}}","page":"Internal Functions","title":"InfrastructureModels.build_solution_values","text":"custom build_solution_values for multiconductor (vector) constants\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#InfrastructureModels.solution_preprocessor-Tuple{AbstractUnbalancedPowerModel, Dict}","page":"Internal Functions","title":"InfrastructureModels.solution_preprocessor","text":"Definition of the default solution preprocessor for PowerModelsDistribution\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._add_eng_obj!-Tuple{Dict{String}, String, Any, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._add_eng_obj!","text":"add engineering data object to engineering data model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._add_gen_cost_model!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._add_gen_cost_model!","text":"convert cost model names\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._add_implicit_absolute_bounds!-Tuple{Any, Vector}","page":"Internal Functions","title":"PowerModelsDistribution._add_implicit_absolute_bounds!","text":"When a terminal is grounded, any pairwise bounds it occurs in imply an absolute bound for the other terminal in the pair. This method converts such pairwise bounds to absolute ones.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._add_unused_kwargs!-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._add_unused_kwargs!","text":"adds kwargs that were specified but unused by the required defaults to the component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._adjust_line_limits!-Tuple{Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._adjust_line_limits!","text":"_adjust_line_limits!(data_eng::Dict{String,<:Any}, mult::Real)\n\nMultiplies limits (sm_ub and/or cm_ub) on line objects (line, linecode, switch) by a multiplier mult\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._adjust_small_line_admittances!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._adjust_small_line_admittances!","text":"_adjust_small_line_admittances!(data_eng::Dict{String,<:Any}; min_admittance_val::Real=1e-2, replace_admittance_val::Real=0.0)\n\nReplaces admittances (gfr, gto, bfr, bto) on lines, linecodes, and switches lower than min_admittance_val with replace_admittance_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._adjust_small_line_impedances!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._adjust_small_line_impedances!","text":"_adjust_small_line_impedances!(data_eng::Dict{String,<:Any}; min_impedance_val::Real=1e-2, replace_impedance_val::Real=0.0)\n\nReplaces impedances (rs, xs) on lines, linecodes, and switches lower than min_impedance_val with replace_impedance_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._adjust_small_line_lengths!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._adjust_small_line_lengths!","text":"_adjust_small_line_lengths!(data_eng::Dict{String,<:Any}; min_length_val::Real=25.0, replace_length_val::Real=0.0)\n\nReplaces length on lines, switches lower than min_length_val with replace_length_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._adjust_transformer_limits!-Tuple{Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._adjust_transformer_limits!","text":"_adjust_transformer_limits!(data_eng::Dict{String,<:Any}, mult::Real)\n\nMultiplies limits (sm_ub and/or cm_ub) on transformer objects by a multiplier mult\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._admittance_conversion-Tuple{Dict{String}, Dict{String}, String}","page":"Internal Functions","title":"PowerModelsDistribution._admittance_conversion","text":"converts admittance by multiplying by 2πωl\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_filter!-Tuple{Dict{String}, Vector{String}, Int64, Union{BitArray, Array}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_filter!","text":"Filters out values of a vector or matrix for certain properties (transformer winding variant)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_filter!-Tuple{Dict{String}, Vector{String}, Union{BitArray, Array}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_filter!","text":"Filters out values of a vector or matrix for certain properties\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_func_vals-Tuple{Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._apply_func_vals","text":"helper to apply function values\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_kron_reduction!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_kron_reduction!","text":"_apply_kron_reduction!(data_eng::Dict{String,<:Any}; kr_phases::Union{Vector{Int},Vector{String}}=[1,2,3], kr_neutral::Union{Int,String}=4)\n\nApplies a Kron Reduction to the network, reducing out the kr_neutral, leaving only the kr_phases\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_linecode!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_linecode!","text":"applies a linecode to a line in preparation for converting to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_phase_projection!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_phase_projection!","text":"_apply_phase_projection!(data_eng::Dict{String,<:Any})\n\npad matrices and vectors to max number of conductors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_phase_projection_delta!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_phase_projection_delta!","text":"_apply_phase_projection_delta!(data_eng::Dict{String,<:Any})\n\nphase projection for components where unprojected states are not yet supported (delta configurations).\n\nSee apply_phase_projection!\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:DssLinegeometry","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:DssObject","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:DssRegcontrol","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:Union{DssGenerator, DssLoad, DssPvsystem, DssStorage}","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:Union{DssGrowthshape, DssLoadshape, DssSpectrum, DssXycurve}","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}, OpenDssDataModel, OpenDssRawDataModel}} where T<:Union{DssTransformer, DssXfmrcode}","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_property_pairs-Union{Tuple{T}, Tuple{T, Vector{Pair{String, String}}}} where T<:DssOptions","page":"Internal Functions","title":"PowerModelsDistribution._apply_property_pairs","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_voltage_angle_difference_bounds!","page":"Internal Functions","title":"PowerModelsDistribution._apply_voltage_angle_difference_bounds!","text":"_apply_voltage_angle_difference_bounds!(eng::Dict{String,<:Any}, vad::Real=5.0)\n\nApplies voltage angle difference bound given by vad::Real in degrees (i.e., the allowed drift of angle from one end of a line to another) to all lines. By default, vad=5.0.\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._apply_voltage_bounds!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_voltage_bounds!","text":"_apply_voltage_bounds!(data_eng::Dict{String,<:Any}; vm_lb::Union{Real,Missing}=0.9, vm_ub::Union{Real,Missing}=1.1)\n\nadd voltage bounds to all buses based on per-unit upper (vm_ub) and lower (vm_lb), scaled by the bus's voltage based\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._apply_xfmrcode!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._apply_xfmrcode!","text":"applies a xfmrcode to a transformer in preparation for converting to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._bank_transformers!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._bank_transformers!","text":"Combines transformers with 'bank' keyword into a single transformer\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._barrel_roll-Union{Tuple{T}, Tuple{Vector{T}, Int64}} where T","page":"Internal Functions","title":"PowerModelsDistribution._barrel_roll","text":"shifts a vector by shift spots to the left\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._biggest_der-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._biggest_der","text":"finds the largest active generation asset (gen, storage) in an island\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._biggest_generator-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._biggest_generator","text":"find the largest active generator in a collection of generators\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._bts_to_start_voltage-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._bts_to_start_voltage","text":"_bts_to_start_voltage(\n    dm::Dict\n)\n\nAssigns the initialisation voltages to appropriate bus terminals.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_bus_shunt_matrices-Tuple{AbstractUnbalancedPowerModel, Int64, Vector{Int64}, Vector{<:Tuple{Int64, Vector{Int64}}}}","page":"Internal Functions","title":"PowerModelsDistribution._build_bus_shunt_matrices","text":"helper function to build bus shunt matrices for power balance constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_loss_model!-Tuple{Dict{String}, String, Vector{String}, Vector{Float64}, Dict{Tuple{Int64, Int64}, ComplexF64}, ComplexF64, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._build_loss_model!","text":"loss model builder for transformer decomposition\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_mn_opb-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_mn_opb","text":"_build_mc_mn_opb(pm::AbstractUnbalancedPowerModel)\n\nConstructor for Optimal Power Balance\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_osw-Tuple{AbstractUBFModels}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_osw","text":"constructor for branch flow osw\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_osw-Tuple{AbstractUnbalancedIVRModel}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_osw","text":"constructor for OSW in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_osw-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_osw","text":"Constructor for Optimal Switching\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_osw_mi-Tuple{AbstractUBFModels}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_osw_mi","text":"_build_mc_osw_mi(pm::AbstractUBFModels)\n\nconstructor for mixed-integer branch flow osw\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_mc_osw_mi-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._build_mc_osw_mi","text":"Constructor for Optimal Switching\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._build_time_series_reference!-Tuple{Dict{String}, Union{DssGenerator, DssLoad, DssPvsystem, DssStorage}, OpenDssDataModel, String, String, String}","page":"Internal Functions","title":"PowerModelsDistribution._build_time_series_reference!","text":"helper function to properly reference time series variables from opendss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_branch_current_max-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_branch_current_max","text":"Returns a total (shunt+series) current magnitude bound for the from and to side of a branch. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_branch_current_max_frto-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_branch_current_max_frto","text":"Returns a total (shunt+series) current magnitude bound for the from and to side of a branch. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_branch_power_max-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_branch_power_max","text":"Returns a total (shunt+series) power magnitude bound for the from and to side of a branch. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_branch_power_max_frto-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_branch_power_max_frto","text":"Returns a total (shunt+series) power magnitude bound for the from and to side of a branch. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_branch_series_current_max-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_branch_series_current_max","text":"Returns a valid series current magnitude bound for a branch.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_bus_vm_ll_bounds-Tuple{Dict}","page":"Internal Functions","title":"PowerModelsDistribution._calc_bus_vm_ll_bounds","text":"Returns bounds in line-to-line bounds on the voltage magnitude. If these are not part of the problem specification, then a valid upper bound is implied by the line-to-neutral bounds, but a lower bound (greater than zero) is not. Therefore, a default lower bound is then used, specified by the keyword argument vdmin_eps. The returned bounds are for the pairs 1->2, 2->3, 3->1\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_comp_lines-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_comp_lines","text":"_calc_comp_lines(component::Dict{String,<:Any})\n\ncompute lines in m and b from from pwl cost models\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_connected_components_eng-Tuple{Any}","page":"Internal Functions","title":"PowerModelsDistribution._calc_connected_components_eng","text":"computes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_connected_components_math-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_connected_components_math","text":"computes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_gen_current_max-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_gen_current_max","text":"Returns a current magnitude bound for the generators.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_ground_shunt_admittance_matrix-Union{Tuple{T}, Tuple{Vector{Int64}, Matrix{T}, Int64}} where T<:Number","page":"Internal Functions","title":"PowerModelsDistribution._calc_ground_shunt_admittance_matrix","text":"Given a set of terminals 'cnds' with associated shunt admittance 'Y', this method will calculate the reduced admittance matrix if terminal 'ground' is grounded.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_load_current_magnitude_bounds-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_load_current_magnitude_bounds","text":"Returns magnitude bounds for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_load_current_max-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_load_current_max","text":"Returns a magnitude bound for the current going through the load.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_load_pq_bounds-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_load_pq_bounds","text":"Calculates lower and upper bounds for the loads themselves (not the power withdrawn at the bus).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_load_vbounds-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_load_vbounds","text":"Returns the voltage magnitude bounds for the individual load elements in a multiphase load. These are inferred from vmin/vmax for wye loads and from calcbusvmll_bounds for delta loads.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_max_cost_index-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_max_cost_index","text":"_calc_max_cost_index(data::Dict{String,<:Any})\n\nComputes maximum cost index of subnetworks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_shunt-Tuple{Vector{Int64}, Vector{Int64}, Vector{<:Union{Real, Vector{<:Real}}}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_shunt","text":"Given a set of addmittances 'y' connected from the conductors 'fcnds' to the conductors 'tcnds', this method will return a list of conductors 'cnd' and a matrix 'Y', which will satisfy I[cnds] = Y*V[cnds].\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_transformer_current_max_frto-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_transformer_current_max_frto","text":"Returns a current magnitude bound for the from and to side of a transformer. The total power rating also implies a current bound through the lower bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_transformer_power_ub_frto-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_transformer_power_ub_frto","text":"Returns a power magnitude bound for the from and to side of a transformer. The total current rating also implies a current bound through the upper bound on the voltage magnitude of the connected buses.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._calc_voltage_bases-Tuple{Dict{String}, Dict{String, <:Real}, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._calc_voltage_bases","text":"_calc_voltage_bases(data_model::Dict{String,<:Any}, vbase_sources::Dict{String,<:Real}, edge_elements::Vector{String})::Tuple{Dict,Dict}\n\nCalculates voltage bases for each voltage zone for buses and branches given a list of edge_elements\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cc_dfs-Union{Tuple{T}, Tuple{T, Dict{T, Vector{T}}, Dict{T, Set{T}}, Set{T}}} where T<:Union{Int64, String}","page":"Internal Functions","title":"PowerModelsDistribution._cc_dfs","text":"DFS on a graph\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_branch_loops-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_branch_loops","text":"checks that all branches connect two distinct buses\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_bus-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_bus","text":"bus data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_bus_and_terminals","page":"Internal Functions","title":"PowerModelsDistribution._check_bus_and_terminals","text":"checks bus_name exists and has terminals\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._check_configuration_infer_dim-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_configuration_infer_dim","text":"checks the connection configuration and infers the dimensions of the connection (number of connected terminals)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_connectivity-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_connectivity","text":"checks connectivity of object\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_connectivity-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_connectivity","text":"checks that all buses are unique and other components link to valid buses\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_eng_component_dtypes-Tuple{Dict{String}, String, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_eng_component_dtypes","text":"checks that an engineering model component has the correct data types\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_equal-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_equal","text":"checks if data structures are equivalent, and if not, will enumerate the differences\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_generator-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_generator","text":"generator data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_has_keys-Tuple{Dict{String}, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_has_keys","text":"checks that a component has fields\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_has_size-Tuple{Dict{String}, Vector{String}, Union{Int64, Tuple}}","page":"Internal Functions","title":"PowerModelsDistribution._check_has_size","text":"check that fields has size data_size\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_line-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_line","text":"line data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_linecode-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_linecode","text":"linecode data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_load-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_load","text":"load data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_load_needs_cone-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_load_needs_cone","text":"Returns a Bool, indicating whether the convex hull of the voltage-dependent relationship needs a cone inclusion constraint.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_same_size-Tuple{Dict{String}, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._check_same_size","text":"check that all data in fields have the same size\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_shunt-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_shunt","text":"shunt data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_shunt_capacitor-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_shunt_capacitor","text":"shunt capacitor data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_transformer-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_transformer","text":"Transformer, n-windings three-phase lossy data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_var_keys-NTuple{4, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_var_keys","text":"checks if a sufficient number of variables exist for the given keys collection\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._check_voltage_source-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._check_voltage_source","text":"voltage source data checks\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._collect_nw_bus_lookups!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._collect_nw_bus_lookups!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._collect_nw_maps!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._collect_nw_maps!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Dyg-Tuple{Vector{<:Real}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Dyg","text":"composeyprimbankedidealtransformersDyg(       ts::Vector,       npairsfr::Tuple,       npairsto::Tuple,       ppm::Float     )\n\nModifies ideal delta-wye_grounded transformers to avoid singularity error, through the ppm value, inspired by OpenDSS.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Ygyg-Tuple{Vector{<:Real}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Ygyg","text":"composeyprimbankedidealtransformersYgyg(       ts::Vector,       npairsfr::Tuple,       npairsto::Tuple,       ppm::Float     )\n\nModifies ideal wyegrounded-wyegrounded transformers to avoid singularity error, through the ppm value, inspired by OpenDSS.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Yy-Tuple{Vector{<:Real}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Vector{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._compose_yprim_banked_ideal_transformers_Yy","text":"_compose_yprim_banked_ideal_transformers_Yy(\n  ts::Vector,\n  npairs_fr::Tuple,\n  npairs_to::Tuple,\n  ppm::Float\n)\n\nModifies ideal wye-wye transformers to avoid singularity error, through the ppm value, inspired by OpenDSS.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compute_Uv-Tuple{PowerFlowData}","page":"Internal Functions","title":"PowerModelsDistribution._compute_Uv","text":"_compute_Uv(\n  pfd::PowerFlowData,\n  max_iter::Int,\n  stat_tol::Float,\n  verbose::Bool\n)\n\nComputes a nonlinear AC power flow in rectangular coordinates based on the admittance matrix of the network data using the fixed-point current injection method (See https://arxiv.org/abs/2305.04405). Returns a solution data structure in PowerModelsDistribution Dict format.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compute_bus_type-Tuple{Int64, Int64, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._compute_bus_type","text":"computes the bus type based on existing bustype, the status of the generation object, and the controlmode\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._compute_mc_pf-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._compute_mc_pf","text":"_compute_mc_pf(\n    data_math::Dict{String,<:Any};\n    v_start::Union{Dict{<:Any,<:Any},Missing}=missing,\n    explicit_neutral::Bool=false,\n    max_iter::Int=100,\n    stat_tol::Real=1E-8,\n    verbose::Bool=false\n)::Dict{String,Any}\n\nComputes native power flow and outputs the result dict (See https://arxiv.org/abs/2305.04405).\n\nAbbreviations:\n\nntype: node type (variable, fixed, grounded, virtual)\nbts: bus-terminals for the component\nns: nodes\nvns: virtual nodes\nnr_vns: number of virtual nodes\ny_prim: primitive admittance matrix for the component\ncnlfunc: nonlinear compensation current function handle for the component\nctotsfunc: total current function handle for the component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._convert_grounding-NTuple{4, Any}","page":"Internal Functions","title":"PowerModelsDistribution._convert_grounding","text":"lossy grounding to perfect grounding and shunts\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._convert_model_to_dict-Tuple{Union{InfrastructureObject, InfrastructureModel}}","page":"Internal Functions","title":"PowerModelsDistribution._convert_model_to_dict","text":"Helper function to convert InfrastructureModel,InfrastructureObject into Dict{String,Any}\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_branch_directions!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._correct_branch_directions!","text":"checks that all parallel branches have the same orientation\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_bus_types!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._correct_bus_types!","text":"checks bus types are suitable for a power flow study, if not, fixes them. the primary checks are that all type 2 buses (i.e., PV) have a connected and active generator and there is a single type 3 bus (i.e., slack bus) with an active connected generator. Assumes that the network is a single connected component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_cost_function!-NTuple{5, Any}","page":"Internal Functions","title":"PowerModelsDistribution._correct_cost_function!","text":"throws warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_cost_functions!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._correct_cost_functions!","text":"throws warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_mc_thermal_limits!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._correct_mc_thermal_limits!","text":"_correct_mc_thermal_limits!(data::Dict{String,<:Any})\n\nchecks that each branch has non-negative thermal ratings and removes zero thermal ratings\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._correct_mc_voltage_angle_differences!","page":"Internal Functions","title":"PowerModelsDistribution._correct_mc_voltage_angle_differences!","text":"_correct_mc_voltage_angle_differences!(data::Dict{String,<:Any}, default_pad::Real=deg2rad(10.0))\n\nchecks that voltage angle differences are within 90 deg., if not tightens to a default of 10deg (adjustable)\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_branch_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_branch_interface","text":"_cpf_branch_interface(\n  branch::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nBranch component interface outputs branch primitive Y matrix (See https://arxiv.org/abs/2305.04405 Section 4.1).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_generator_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_generator_interface","text":"_cpf_generator_interface(\n  gen::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nGenerator component interface outputs generator primitive Y matrix (See https://arxiv.org/abs/2305.04405 Section 4.4 and 4.5).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_load_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_load_interface","text":"_cpf_load_interface(\n  load::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nLoad component interface outputs load primitive Y matrix (See https://arxiv.org/abs/2305.04405 Sections 4.4 and 4.5).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_shunt_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_shunt_interface","text":"_cpf_shunt_interface(\n  shunt::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nShunt component interface outputs shunt primitive Y matrix (See https://arxiv.org/abs/2305.04405 Section 4.2).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_storage_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_storage_interface","text":"_cpf_storage_interface(\n  storage::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nStorage component interface outputs storage primitive Y matrix (See https://arxiv.org/abs/2305.04405 Section 4.4 and 4.5).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_switch_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_switch_interface","text":"_cpf_switch_interface(\n  switch::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nBranch component interface outputs branch primitive Y matrix  (See https://arxiv.org/abs/2305.04405 Section 4.2).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._cpf_transformer_interface-Tuple{Dict{String}, Dict, Bool, Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._cpf_transformer_interface","text":"_cpf_transformer_interface(\n  tr::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool,\n  line_vbase::Dict,\n  sbase::Float\n)\n\nTransformer component interface outputs transformer primitive Y matrix (See https://arxiv.org/abs/2305.04405 Section 4.3).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._discover_buses-Tuple{OpenDssDataModel}","page":"Internal Functions","title":"PowerModelsDistribution._discover_buses","text":"Discovers all of the buses (not separately defined in OpenDSS), from 'lines'\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._discover_terminals!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._discover_terminals!","text":"discovers all terminals in the network\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._discover_voltage_zones-Tuple{Dict{String}, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._discover_voltage_zones","text":"discover_voltage_zones(data_model::Dict{String,<:Any}, edge_elements::Vector{String})::Dict{Int,Set{Any}}\n\nfinds voltage zones by walking through the network and analyzing the transformers\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_bus!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_bus!","text":"Adds nodes as buses to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_buscoords!-Tuple{Dict{String}, OpenDssDataModel}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_buscoords!","text":"Parses buscoords lon,lat (if present) into their respective buses\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_capacitor!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_capacitor!","text":"Adds capacitors to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_capcontrol!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_capcontrol!","text":"Adds capcontrol to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_generator!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_generator!","text":"Adds generators to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_line!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_line!","text":"Adds lines to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_linecode!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_linecode!","text":"Adds lines to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_load!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_load!","text":"Adds loads to data_eng from data_dss\n\nConstant can still be scaled by other settings, fixed cannot Note that in the current feature set, fixed therefore equals constant\n\n1: Constant P and Q, default 2: Constant Z 3: Constant P and quadratic Q 4: Exponential 5: Constant I 6: Constant P and fixed Q\n\n7: Constant P and quadratic Q (i.e., fixed reactance)\n\n8: ZIP\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_loadshape!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_loadshape!","text":"Adds loadshapes to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_pvsystem!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_pvsystem!","text":"Adds pvsystems to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_reactor!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_reactor!","text":"Adds shunt reactors to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_regcontrol!-Tuple{Dict{String}, OpenDssDataModel, Bool}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_regcontrol!","text":"Adds regcontrol to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_storage!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_storage!","text":"Adds storage to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_transformer!-Tuple{Dict{String}, OpenDssDataModel, Bool, String}","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_transformer!","text":"Adds transformers to data_eng from data_dss\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_vsource!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_vsource!","text":"Adds vsources to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._dss2eng_xfmrcode!","page":"Internal Functions","title":"PowerModelsDistribution._dss2eng_xfmrcode!","text":"Adds transformers to data_eng from data_dss\n\n\n\n\n\n","category":"function"},{"location":"reference/internal.html#PowerModelsDistribution._equivalance_center_tap!-Tuple{Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._equivalance_center_tap!","text":"_equivalance_center_tap!(transformer::Dict{String,<:Any}, data_eng::Dict{String,<:Any})\n\nRemoves center tap transformers based on Eq. (1) from Kersting's paper 'Center-Tapped Transformers and 120/240-V Secondary Models' Z0 = 0.5r_t + j0.8x_t\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fill_matrix!-Union{Tuple{T}, Tuple{Matrix{T}, Vector{Vector{String}}}} where T","page":"Internal Functions","title":"PowerModelsDistribution._fill_matrix!","text":"Helper function for Base.parse for dss matrices\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fill_vector!-Union{Tuple{T}, Tuple{Vector{T}, Vector{String}}} where T","page":"Internal Functions","title":"PowerModelsDistribution._fill_vector!","text":"Helper function for Base.parse for dss vectors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fix_arrays!-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._fix_arrays!","text":"helper function to fix matrices (from vector of vectors) and vector dtypes\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fix_dtypes!-Tuple{Dict}","page":"Internal Functions","title":"PowerModelsDistribution._fix_dtypes!","text":"recursive function to fix data types from data imported from json\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fix_enums!-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._fix_enums!","text":"helper function to convert stringified enums\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._fix_nulls!-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._fix_nulls!","text":"helper function to fix null values from json (usually Inf or NaN)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._generate_short_property_names-Tuple{}","page":"Internal Functions","title":"PowerModelsDistribution._generate_short_property_names","text":"Helper function to generate 'short' property names\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._generate_vm_pairs-Tuple{Vector, ConnConfig, Real, Real}","page":"Internal Functions","title":"PowerModelsDistribution._generate_vm_pairs","text":"Generates pairwise bounds for oneport components.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_cncable_data-Tuple{OpenDssDataModel, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._get_cncable_data","text":"gets concentric neutral cable data for line geometry\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_complete_conductor_set-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._get_complete_conductor_set","text":"finds maximal set of ungrounded phases\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_conductor_indicator-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._get_conductor_indicator","text":"returns the conductor indicator for a ENGINEERING component\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_conductors_ordered-Tuple{AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._get_conductors_ordered","text":"Returns an ordered list of defined conductors. If ground=false, will omit any 0\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_delta_transformation_matrix-Tuple{Int64}","page":"Internal Functions","title":"PowerModelsDistribution._get_delta_transformation_matrix","text":"creates a delta transformation matrix\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_geometry_data-Tuple{OpenDssDataModel, String}","page":"Internal Functions","title":"PowerModelsDistribution._get_geometry_data","text":"gets line geometry data for line, including applying line spacing if specified\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_idxs-Tuple{Vector, Vector}","page":"Internal Functions","title":"PowerModelsDistribution._get_idxs","text":"Given a vector and a list of elements to find, this method will return a list of the positions of the elements in that vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_ilocs-Tuple{Vector, Any}","page":"Internal Functions","title":"PowerModelsDistribution._get_ilocs","text":"get locations of terminal in connections list\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssEdgeObject}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssGictransformer}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssLinecode}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssNodeObject}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssTransformer}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{DssXfmrcode}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases!-Tuple{Union{DssControlObject, DssDataObject}}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases-Tuple{AbstractString, AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases","text":"returns number of phases implied by a two-bus (edge) object\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases-Tuple{AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases","text":"returns number of phases implied by a single-bus (node) object\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_implied_nphases-Tuple{Vector{<:AbstractString}}","page":"Internal Functions","title":"PowerModelsDistribution._get_implied_nphases","text":"returns number of phases implied by a transformer object\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_line_impedance_parameters-Tuple{Dict{String, Any}, Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._get_line_impedance_parameters","text":"Obtain impedance parameters, directly or from linecode.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_math_obj-Tuple{Dict{String}, String}","page":"Internal Functions","title":"PowerModelsDistribution._get_math_obj","text":"returns component from the mathematical data model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_raw_fields-Tuple{Vector{Pair{String, String}}}","page":"Internal Functions","title":"PowerModelsDistribution._get_raw_fields","text":"Helper function to pull the specified properties from dss property pairs\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_spacing_data-Tuple{OpenDssDataModel, String}","page":"Internal Functions","title":"PowerModelsDistribution._get_spacing_data","text":"get line spacing data for line or line geometry\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_tight_absolute_voltage_magnitude_bounds-Tuple{Dict}","page":"Internal Functions","title":"PowerModelsDistribution._get_tight_absolute_voltage_magnitude_bounds","text":"Returns the tightest set of absolute voltage magnitude bounds, removing looser bounds which are implied by the tighter ones.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_tight_pairwise_voltage_magnitude_bounds-Tuple{Dict}","page":"Internal Functions","title":"PowerModelsDistribution._get_tight_pairwise_voltage_magnitude_bounds","text":"Returns the tightest set of pairwise voltage magnitude bounds, removing looser bounds which are implied by the tighter ones.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_tscable_data-Tuple{OpenDssDataModel, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._get_tscable_data","text":"gets tape shielded cable data for line geometry\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_v-Tuple{PowerFlowData, Vector{ComplexF64}, Union{Int64, Tuple{Int64, Int64}}}","page":"Internal Functions","title":"PowerModelsDistribution._get_v","text":"_get_v(\n  pfd::struct,\n  Vp::Vector,\n  n::Union{Tuple, Int}\n)\n\nCalculates the voltage from PowerFlowData struct.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._get_wire_data-Tuple{OpenDssDataModel, Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._get_wire_data","text":"gets overhead wire data for line geometry\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._impedance_conversion-Tuple{Dict{String}, Dict{String}, String}","page":"Internal Functions","title":"PowerModelsDistribution._impedance_conversion","text":"converts impendance in Ohm/m by multiplying by length\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._import_all!-Tuple{Dict{String}, DssObject}","page":"Internal Functions","title":"PowerModelsDistribution._import_all!","text":"creates a dss dict inside object that imports all items in prop_order from dss_obj\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._infer_int_dim-Tuple{Vector, ConnConfig, Any}","page":"Internal Functions","title":"PowerModelsDistribution._infer_int_dim","text":"infer the internal dimension of a winding, load or generator based on the connections and the configuration\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._infer_int_dim_transformer-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._infer_int_dim_transformer","text":"infer the internal dimension for a transformer (only in the MATHEMATICAL data model format)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._infer_int_dim_unit-Tuple{Dict{String}, Any}","page":"Internal Functions","title":"PowerModelsDistribution._infer_int_dim_unit","text":"infer the internal dimension for a unit, i.e. any one-port component with connections and configuration properties\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._infer_neutral_terminals-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._infer_neutral_terminals","text":"Return a list of all implicit neutrals as a list of bus-terminal pairs. This is done by starting from a list of all terminals which are either     a.connected to the neutral of wye-connected components;     b. or are grounded. This initial list is then expanded to all terminals which are galvanically connected to terminals in the initial list.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._infer_partial_property_name-Union{Tuple{T}, Tuple{AbstractString, T}} where T<:DssObject","page":"Internal Functions","title":"PowerModelsDistribution._infer_partial_property_name","text":"Helper function to infer a full property name from a partial one\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._init_base_components!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._init_base_components!","text":"initializes the base components that are expected by powermodelsdistribution in the mathematical model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._init_dss_data-Tuple{}","page":"Internal Functions","title":"PowerModelsDistribution._init_dss_data","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._init_math_obj-Tuple{String, Any, Dict{String}, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._init_math_obj","text":"initializes the base math object of any type, and copies any one-to-one mappings\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._init_unmap_eng_obj!-Tuple{Dict{String}, String, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._init_unmap_eng_obj!","text":"initialization actions for unmapping\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_after-Tuple{Vector{Pair{String, String}}, String, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._is_after","text":"helper function to determine if property1 appears after property2 in the property pair list for objects that have windings\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_after-Tuple{Vector{Pair{String, String}}, String, String}","page":"Internal Functions","title":"PowerModelsDistribution._is_after","text":"helper function to determine if property1 appears after property2 in the property pair list\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_loadshape_split-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._is_loadshape_split","text":"checks if loadshape has both pmult and qmult\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_loadshape_split-Tuple{DssLoadshape}","page":"Internal Functions","title":"PowerModelsDistribution._is_loadshape_split","text":"checks if loadshape has both pmult and qmult\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_multiport_component-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._is_multiport_component","text":"Indicates whether the passed component has a multiport structure (e.g. transformers).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_oneport_component-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._is_oneport_component","text":"Indicates whether the passed component has a oneport structure (e.g. loads and generators).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._is_twoport_component-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._is_twoport_component","text":"Indicates whether the passed component has a twoport structure (e.g. lines and switches).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._isa_dss_array-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._isa_dss_array","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._isa_rpn-Tuple{AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._isa_rpn","text":"detects if expr is Reverse Polish Notation expression\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron-Union{Tuple{T}, Tuple{Matrix{T}, Int64}} where T<:Complex","page":"Internal Functions","title":"PowerModelsDistribution._kron","text":"_kron(Z::Matrix{T}, nconds::Int)::Matrix{T} where T <: Complex\n\nKron reduces impedance matrix down to size (nconds, nconds)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron-Union{Tuple{T}, Tuple{Matrix{T}, Matrix{T}, Int64}} where T<:Complex","page":"Internal Functions","title":"PowerModelsDistribution._kron","text":"_kron(Z::Matrix{T}, Y::Matrix{T}, nconds::Int)::Tuple{Matrix{T}, Matrix{T}} where T <: Complex\n\nKron reduces impedance and shunt admittance matrices down to size (nconds, nconds)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_branch!-Tuple{Dict{String}, Vector{String}, Vector{String}, Vector{Int64}, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_branch!","text":"performs kron reduction on branch\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_branch-Tuple{Vector{Matrix}, Vector{Matrix}, Vector{Int64}, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_branch","text":"performs kron reduction on branch - helper function\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_implicit_neutrals!-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_implicit_neutrals!","text":"_kron_reduce_implicit_neutrals!(data_eng::Dict{String,Any})::Dict{String,Any}\n\nKron-reduce all (implied) neutral conductors of lines, switches and shunts, and remove any terminals which become unconnected. A line or switch conductor is considered as a neutral conductor if it is connected between two neutral terminals. A terminal is a neutral terminals if it is galvanically connected (i.e. through a line or switch) to a grounded terminal, or the neutral conductor of a wye-connected component.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_linecode!-Tuple{Any, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_linecode!","text":"Kron-reduce specified neutral conductors of a linecode.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_series_impedance-Tuple{Matrix, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_series_impedance","text":"Return the Kron-reduction of the specified neutral conductors of a series impedance matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._kron_reduce_shunt_addmittance-Tuple{Matrix, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._kron_reduce_shunt_addmittance","text":"Return the Kron-reduction of the specified neutral conductors of a shunt addmittance matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._line_reverse!-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._line_reverse!","text":"Reverse the direction of a line.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._load_expmodel_params-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._load_expmodel_params","text":"_load_expmodel_params(load::Dict{String,<:Any}, bus::Dict{String,<:Any})\n\nReturns the exponential load model parameters for a load. For an exponential load it simply returns certain data model properties, whilst for constantpower, constantcurrent and constant_impedance it returns the equivalent exponential model parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._loop_line_to_shunt-Tuple{Dict{String, Any}, AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._loop_line_to_shunt","text":"Create an equivalent shunt for a line which connects to a single bus.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_filtered_logger-Tuple{Any}","page":"Internal Functions","title":"PowerModelsDistribution._make_filtered_logger","text":"_make_filtered_logger(level::Logging.LogLevel)\n\nHelper function to create the filtered logger for PMD\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_full_matrix_variable-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}, Vector{T}}} where T","page":"Internal Functions","title":"PowerModelsDistribution._make_full_matrix_variable","text":"makes a full matrix variable from a diagonal, and lower and upper triangular vectors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_hermitian_matrix_variable-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._make_hermitian_matrix_variable","text":"makes a hermitian matrix variable from diagonal, and lower and upper triangular vectors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_lossless!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._make_lossless!","text":"_make_lossless!(data_eng::Dict{String,<:Any})\n\nRemove parameters from objects with loss models to make them lossless. This includes linecodes, lines, switches, xfmrcodes, transformers, voltage sources, generators, solar, and storage, which all have (or will have in the future), loss model parameters that can be omitted.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_math_per_unit!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._make_math_per_unit!","text":"converts the MATHEMATICAL model to per unit from SI\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_matrix_variable_element-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Int64, Int64}} where T","page":"Internal Functions","title":"PowerModelsDistribution._make_matrix_variable_element","text":"_make_matrix_variable_element(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    n::Int,\n    m::Int;\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    varname::String=\"\"\n) where T\n\nSometimes we want to bound only a subset of the elements of a matrix variable. For example, an unbounded Hermitian variable usually still has a lower bound of zero on the real diagonal elements. When there is a mix of bounded and unbounded elements, the unboundedness is encoded as 'Inf' and '-Inf' in the bound parameters. This cannot be passed directlty to JuMP, because it would lead to an error in Mosek for example. Instead, this method checks whether all bounds for an element (n,m) are Inf, and if so, does not pass a bound to JuMP.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_multiconductor!-Tuple{Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._make_multiconductor!","text":"Hacky helper function to transform single-conductor network data, from, e.g., matpower/psse, into multi-conductor data\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_multinetwork_eng-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._make_multinetwork_eng","text":"Expands an ENGINEERING data structure into a multinetwork, see make_multinetwork\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._make_multinetwork_math-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._make_multinetwork_math","text":"Expands an MATHEMATICAL data structure into a multinetwork, see make_multinetwork\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_conductor_ids!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_conductor_ids!","text":"helper function to map non integer conductor ids into integers\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math","text":"base function for converting engineering model to mathematical model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_bus!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_bus!","text":"converts engineering bus components into mathematical bus components\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_generator!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_generator!","text":"converts engineering generators into mathematical generators\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_line!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_line!","text":"converts engineering lines into mathematical branches\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_load!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_load!","text":"converts engineering load components into mathematical load components\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_nw!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_nw!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_shunt!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_shunt!","text":"converts engineering generic shunt components into mathematical shunt components\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_solar!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_solar!","text":"converts engineering solar components into mathematical generators\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_storage!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_storage!","text":"converts engineering storage into mathematical storage\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_switch!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_switch!","text":"converts engineering switches into mathematical switches and (if neeed) impedance branches to represent loss model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_transformer!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_transformer!","text":"converts engineering n-winding transformers into mathematical ideal 2-winding lossless transformer branches and impedance branches to represent the loss model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_eng2math_voltage_source!-Tuple{Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_eng2math_voltage_source!","text":"converts engineering voltage sources into mathematical generators and (if needed) impedance branches to represent the loss model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_bus!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_bus!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_generator!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_generator!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_line!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_line!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_load!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_load!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_root!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_root!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_shunt!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_shunt!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_solar!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_solar!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_storage!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_storage!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_switch!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_switch!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_transformer!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_transformer!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._map_math2eng_voltage_source!-Tuple{Dict{String}, Dict{String}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._map_math2eng_voltage_source!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._mat2ltrivec!-Union{Tuple{Union{Matrix{T}, LinearAlgebra.Symmetric{T, S} where S<:(AbstractMatrix{<:T})}}, Tuple{T}} where T","page":"Internal Functions","title":"PowerModelsDistribution._mat2ltrivec!","text":"matrix to lower triangular vector\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._mat2utrivec!-Union{Tuple{Union{Matrix{T}, LinearAlgebra.Symmetric{T, S} where S<:(AbstractMatrix{<:T})}}, Tuple{T}} where T","page":"Internal Functions","title":"PowerModelsDistribution._mat2utrivec!","text":"matrix to upper triangular vector\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._mat_mult_rm_nan-Tuple{Matrix, Union{LinearAlgebra.Adjoint, Matrix}}","page":"Internal Functions","title":"PowerModelsDistribution._mat_mult_rm_nan","text":"matrix multiplication removing NaN values\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._merge_bus_flows-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Vector, Vector}","page":"Internal Functions","title":"PowerModelsDistribution._merge_bus_flows","text":"Merges flow variables that enter the same terminals, i.e. multiple neutrals of an underground cable connected to same neutral terminal\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._merge_terminals!-Tuple{Dict{String, Any}, String, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._merge_terminals!","text":"Merge a terminal into another for a specified bus, i.e. as if they are short-ciruited.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._missing2false-Tuple{Union{Missing, Bool}}","page":"Internal Functions","title":"PowerModelsDistribution._missing2false","text":"Helper to convert \n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._nan2zero-Tuple{Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._nan2zero","text":"Replaces NaN values with zeros\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad","text":"gen connections adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch-Tuple{AbstractUnbalancedIVRModel}","page":"Internal Functions","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch","text":"Multiconductor adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_linquad_switch","text":"gen connections adaptation of min fuel cost polynomial linquad objective\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Internal Functions","title":"PowerModelsDistribution._objective_mc_min_fuel_cost_polynomial_nl_switch","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_connections!-Tuple{Dict{String}, String, Int64, Union{Vector{Int64}, Vector{String}}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_connections!","text":"adds conductors to connections during padding process, transformer winding variant\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_connections!-Tuple{Dict{String}, String, Union{Vector{Int64}, Vector{String}}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_connections!","text":"adds conductors to connections during padding process\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_properties!-Tuple{Dict{String}, Vector{String}, Int64, Vector{Int64}, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_properties!","text":"pads properties to have the total number of conductors for the whole system (transformer winding variant)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_properties!-Tuple{Dict{String}, Vector{String}, Vector{Int64}, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_properties!","text":"pads properties to have the total number of conductors for the whole system\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_properties_delta!-Tuple{Dict{String}, Vector{String}, Vector{Int64}, Int64, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_properties_delta!","text":"pads properties to have the total number of conductors for the whole system - delta connection variant\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pad_properties_delta!-Tuple{Dict{String}, Vector{String}, Vector{Int64}, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._pad_properties_delta!","text":"pads properties to have the total number of conductors for the whole system - delta connection variant\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_array-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T","page":"Internal Functions","title":"PowerModelsDistribution._parse_array","text":"helper function to parse reverse polish notation arrays\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_bus_id-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_bus_id","text":"Parses busnames as defined in OpenDSS, e.g. 'primary.1.2.3.0'\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_command_from_line-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_command_from_line","text":"_parse_command_from_line(line::String)::Tuple{String,String}\n\nParses the dss command from the line (if present), optionnally making the command set if implicitly used.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_csvfile-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_csvfile","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dblfile-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dblfile","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_buscoords!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_buscoords!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_buscoords-Tuple{IO}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_buscoords","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_clear!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_clear!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_compile!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_compile!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_disable!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_disable!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_edit!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_edit!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_enable!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_enable!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_latloncoords!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_latloncoords!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_more!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_more!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_new!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_new!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_redirect!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_redirect!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_set!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_set!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_cmd_setbusxy!-Tuple{DssRawModel, String, Int64}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_cmd_setbusxy!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_matrix-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_matrix","text":"Helper function for Base.parse for dss matrices\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_obj_type_name-Tuple{AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_obj_type_name","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_dss_vector-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_dss_vector","text":"Helper function for Base.parse for dss vectors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_file_inside_mult!-Tuple{DssObject, String, String, String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_file_inside_mult!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_file_inside_shape_ref!-Tuple{DssObject, OpenDssDataModel, OpenDssRawDataModel, String, String, String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_file_inside_shape_ref!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_match_element-Tuple{RegexMatch, String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_match_element","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_pqcsvfile-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_pqcsvfile","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_rpn-Tuple{AbstractString}","page":"Internal Functions","title":"PowerModelsDistribution._parse_rpn","text":"helper function to parse reverse polish notation\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_rpn-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T","page":"Internal Functions","title":"PowerModelsDistribution._parse_rpn","text":"parses Reverse Polish Notation expr\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_rpn-Union{Tuple{T}, Tuple{Type{T}, AbstractString}} where T<:(Vector)","page":"Internal Functions","title":"PowerModelsDistribution._parse_rpn","text":"helper function to parse reverse polish notation vectors\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._parse_sngfile-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._parse_sngfile","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._pmd_metafmt-Tuple{Base.CoreLogging.LogLevel, Vararg{Any, 5}}","page":"Internal Functions","title":"PowerModelsDistribution._pmd_metafmt","text":"_pmd_metafmt(level::Logging.LogLevel, _module, group, id, file, line)\n\nMetaFormatter for ConsoleLogger for PMD to adjust log message format\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._propagate_network_topology!-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._propagate_network_topology!","text":"_propagate_network_topology!(data::Dict{String,Any})\n\nhelper function to propagate bus status to any connected components\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_branch!-Tuple{Dict{String}, Vararg{Real, 4}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_branch!","text":"per-unit conversion for branches\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_bus!-Tuple{Dict{String}, Vararg{Real, 4}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_bus!","text":"per-unit conversion for buses\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_generator!-Tuple{Dict{String}, Real, Real, Real, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_generator!","text":"per-unit conversion for generators\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_load!-Tuple{Dict{String}, Vararg{Real, 4}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_load!","text":"per-unit conversion for loads\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_shunt!-Tuple{Dict{String}, Vararg{Real, 4}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_shunt!","text":"per-unit conversion for shunts\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_storage!-Tuple{Dict{String}, Real, Real, Real}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_storage!","text":"per-unit conversion for storage\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_switch!-Tuple{Dict{String}, Vararg{Real, 4}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_switch!","text":"per-unit conversion for switches\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rebase_pu_transformer_2w_ideal!-Tuple{Dict{String}, Vararg{Real, 5}}","page":"Internal Functions","title":"PowerModelsDistribution._rebase_pu_transformer_2w_ideal!","text":"per-unit conversion for ideal 2-winding transformers\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._ref_add_connected_components!-Tuple{Dict{Symbol}, Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._ref_add_connected_components!","text":"adds connected components for opb problem type\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._register_awaiting_ground!-Tuple{Dict{String}, Vector{Int64}}","page":"Internal Functions","title":"PowerModelsDistribution._register_awaiting_ground!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._remove_all_bounds!-Tuple{Any}","page":"Internal Functions","title":"PowerModelsDistribution._remove_all_bounds!","text":"_remove_all_bounds!(data_eng; exclude::Vector{<:String}=String[\"energy_ub\"], exclude_asset_type::Vector{String}=String[])\n\nRemoves all fields ending in 'ub' or 'lb' that aren't required by the math model. Properties can be excluded from this removal with exclude::Vector{String}\n\nWhole asset types (e.g., \"line\") can be excluded using the keyword argument exclude_asset_type::Vector{String}\n\nBy default, \"energy_ub\" is excluded from this removal, since it is a required properly on storage.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._remove_line_limits!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._remove_line_limits!","text":"_remove_line_limits!(data_eng::Dict{String,<:Any})\n\nRemoves fields cm_ub and sm_ub from lines, switches, and linecodes\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._remove_pwl_cost_duplicates!-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._remove_pwl_cost_duplicates!","text":"checks that each point in the a pwl function is unqiue, simplifies the function if duplicates appear\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._remove_transformer_limits!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._remove_transformer_limits!","text":"_remove_transformer_limits!(data_eng::Dict{String,<:Any})\n\nRemoves field sm_ub from transformers, xfmrcodes\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._remove_unconnected_terminals!-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._remove_unconnected_terminals!","text":"_remove_unconnected_terminals!(data_eng::Dict{String,Any})::Dict{String,Any}\n\nRemove all terminals which are unconnected (not considering a grounding as a connection).\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._rescale_cost_model!-Tuple{Dict{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._rescale_cost_model!","text":"rescales the cost model terms\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sanatize_line-Tuple{String}","page":"Internal Functions","title":"PowerModelsDistribution._sanatize_line","text":"_sanatize_line(line::String)::String\n\nSanitizes lines by stripping them clean of extra space and the beginnging and end, making everything lowercase, changing ~ or m to more, and stripping comments\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sanitize_property_name-Tuple{String, String}","page":"Internal Functions","title":"PowerModelsDistribution._sanitize_property_name","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sc2br_impedance-Tuple{Dict{Tuple{Int64, Int64}, ComplexF64}}","page":"Internal Functions","title":"PowerModelsDistribution._sc2br_impedance","text":"Converts a set of short-circuit tests to an equivalent reactance network. Reference: R. C. Dugan, “A perspective on transformer modeling for distribution system analysis,” in 2003 IEEE Power Engineering Society General Meeting (IEEE Cat. No.03CH37491), 2003, vol. 1, pp. 114-119 Vol. 1.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._scale-Tuple{Dict{String}, String, Real}","page":"Internal Functions","title":"PowerModelsDistribution._scale","text":"function for applying a scale to a paramter\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._scale_props!-Tuple{Dict{String}, Vector{String}, Real}","page":"Internal Functions","title":"PowerModelsDistribution._scale_props!","text":"helper function to apply a scale factor to given properties\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._show-Union{Tuple{T}, Tuple{IO, T}} where T<:Union{InfrastructureObject, InfrastructureModel}","page":"Internal Functions","title":"PowerModelsDistribution._show","text":"Helper functions for Base.show for InfrastructureModel,InfrastructureObject\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._simplify_cost_terms!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._simplify_cost_terms!","text":"\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._simplify_pwl_cost!-Tuple{Any, Any, Any}","page":"Internal Functions","title":"PowerModelsDistribution._simplify_pwl_cost!","text":"checks the slope of each segment in a pwl function, simplifies the function if the slope changes is below a tolerance\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._slice_branches!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._slice_branches!","text":"slices branches based on connected terminals\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sol_data_model_acr!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._sol_data_model_acr!","text":"_sol_data_model_acr!(solution::Dict{String,<:Any})\n\nsolutionprocessor, see [`solvemcmodel`](@ref solvemc_model),  to convert ACR variables back into polar representation (default data model voltage form)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sol_data_model_w!-Tuple{Dict{String}}","page":"Internal Functions","title":"PowerModelsDistribution._sol_data_model_w!","text":"converts w models voltages to standard voltage magnitude (sqrt)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._solve_mc_model-Tuple{Dict{String}, Type, Any, Function}","page":"Internal Functions","title":"PowerModelsDistribution._solve_mc_model","text":"_solve_mc_model(\n    data::Dict{String,<:Any},\n    model_type::Type,\n    optimizer,\n    build_method::Function;\n    multinetwork::Bool=false,\n    ref_extensions::Vector{<:Function}=Function[],\n    solution_processors::Vector{<:Function}=Function[],\n    relax_integrality::Bool=false,\n    kwargs...\n)::Dict{String,Any}\n\nInternal solver interface that uses instantiate_mc_model directly and runs optimize_model!, returning a result\n\nSee solve_mc_model\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._solve_mc_osw-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Internal Functions","title":"PowerModelsDistribution._solve_mc_osw","text":"Solve optimal switching problem\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._solve_mc_osw_mi-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Internal Functions","title":"PowerModelsDistribution._solve_mc_osw_mi","text":"Solve mixed-integer optimal switching problem\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._solve_mn_mc_opb-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Internal Functions","title":"PowerModelsDistribution._solve_mn_mc_opb","text":"_solve_mn_mc_opb(data::Union{Dict{String,<:Any},String}, model_type::Type, solver; kwargs...)\n\nsolve test mn mc problem\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._standardize_cost_terms!-Tuple{Dict{String}, Int64, String}","page":"Internal Functions","title":"PowerModelsDistribution._standardize_cost_terms!","text":"ensures all polynomial costs functions have at exactly comp_order terms\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._strip_lines!-Tuple{Vector{String}}","page":"Internal Functions","title":"PowerModelsDistribution._strip_lines!","text":"strips lines that are either commented (block or single) or empty\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._sum_rm_nan-Tuple{Vector}","page":"Internal Functions","title":"PowerModelsDistribution._sum_rm_nan","text":"BOUND manipulation methods (0*Inf->0 is often desired)\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._transform_loops!-Tuple{Dict{String, Any}}","page":"Internal Functions","title":"PowerModelsDistribution._transform_loops!","text":"_transform_loops!(\n    data_eng::Dict{String,Any};\n    zero_series_impedance_threshold::Real=1E-8,\n    shunt_id_prefix::AbstractString=\"line_loop\"\n)::Dict{String,Any}\n\nTransform line loops (connected to a single bus), which are not allowed in the mathematical model. Lossy line loops are converted to equivalent shunts, and lossless ones (i.e. short-circuits) are represented by merging the short-circuited terminals. The argument 'zeroseriesimpedance_threshold' controls the threshold below which the series impedance is considered to be a short-ciruit. This is useful because OpenDSS modelers have to insert tiny impedances to represent short-circuit reactors. The addmittance to ground should be zero to trigger the short-circuit handling.\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._update_bus_terminal_projections!-Tuple{Dict{String}, Dict{String, <:Vector{Int64}}}","page":"Internal Functions","title":"PowerModelsDistribution._update_bus_terminal_projections!","text":"helper function to update the terminals on projected buses\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._vec2ltri!-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Internal Functions","title":"PowerModelsDistribution._vec2ltri!","text":"vector to lower triangular\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._vec2utri!-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Internal Functions","title":"PowerModelsDistribution._vec2utri!","text":"https://stackoverflow.com/questions/39039553/lower-triangular-matrix-in-julia\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._wrap_to_180-Tuple{Any}","page":"Internal Functions","title":"PowerModelsDistribution._wrap_to_180","text":"wraps angles in degrees to 180\n\n\n\n\n\n","category":"method"},{"location":"reference/internal.html#PowerModelsDistribution._wrap_to_pi-Tuple{Any}","page":"Internal Functions","title":"PowerModelsDistribution._wrap_to_pi","text":"wraps angles in radians to pi\n\n\n\n\n\n","category":"method"},{"location":"tutorials/Extension Tutorial.html#Extending-PowerModelsDistribution.jl","page":"Extending PowerModelsDistribution","title":"Extending PowerModelsDistribution.jl","text":"","category":"section"},{"location":"tutorials/Extension Tutorial.html","page":"Extending PowerModelsDistribution","title":"Extending PowerModelsDistribution","text":"Stub for Extension Tutorial.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"manual/math-model.html#The-PowerModelsDistribution-Mathematical-Model","page":"Mathematical Model","title":"The PowerModelsDistribution Mathematical Model","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"As PowerModelsDistribution implements a variety of power network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a complex number based mathematical specification for a prototypical unbalanced AC Optimal Power Flow problem, to provide an overview of the typical mathematical models in PowerModelsDistribution.","category":"page"},{"location":"manual/math-model.html#Unbalanced-AC-Optimal-Power-Flow","page":"Mathematical Model","title":"Unbalanced AC Optimal Power Flow","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"PowerModelsDistribution implements a generalized version of the AC Optimal Power Flow problem, taking into account phase unbalance. [1]  These generalizations make it possible for PowerModelsDistribution to more accurately capture real-world distribution network datasets.  The core generalizations are,","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"Support for multiple load and shunt components on each bus\nLine charging (shunt) that supports a conductance and asymmetrical values","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"In the mathematical description below,","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"Bold typeface indicates a vector (in mathbbC^c) or matrix (in mathbbC^ctimes c)\nOperator diag takes the diagonal (vector) from a square matrix\nThe set of complex numbers is mathbbC and real numbers is mathbbR\nSuperscript H indicates complex conjugate transpose (Hermitian adjoint)\nNote that complex power is defined as mathbfS_ij = mathbfV_i mathbfI_ij^H and is therefore a complex matrix of dimension c times c\nThe line mathbfY^c_ij mathbfY^c_ji and bus mathbfY^s_k shunt matrices do not need to be diagonal","category":"page"},{"location":"manual/math-model.html#Sets","page":"Mathematical Model","title":"Sets","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"The definitions of the sets involved remain unchanged w.r.t. the balanced OPF problem definition, except for the addition of the conductor set:","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n\nmboxsets  nonumber \n N mbox - busesnonumber \n R mbox - references busesnonumber \n E E^R mbox - branches forward and reverse orientation nonumber \n G G_i mbox - generators and generators at bus i nonumber \n L L_i mbox - loads and loads at bus i nonumber \n S S_i mbox - shunts and shunts at bus i nonumber \n C mbox - conductors nonumber \n\nendalign","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"where the set of conductors C typically equals  abc.","category":"page"},{"location":"manual/math-model.html#Data","page":"Mathematical Model","title":"Data","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxdata  nonumber \n S^gl_kc S^gu_kc in mathbbC  forall k in G forall c in C nonumber mathbfS^gl_k= S^gl_kc_c in C mathbfS^gu_k = S^gu_kc_c in C  \n c_2k c_1k c_0k in mathbbR  forall k in G nonumber \n v^l_ic v^u_ic in mathbbR  forall i in N forall c in C nonumber mathbfv^l_i = v^l_ic_c in C mathbfv^u_i = v^u_ic_c in C \n S^d_kcin mathbbC  forall k in L forall c in C nonumber mathbfS^d_k = S^d_kc_c in C \n mathbfY^s_kin mathbbC^ctimes c  forall k in S nonumber \n mathbfY_ij mathbfY^c_ij mathbfY^c_jiin mathbbC^ctimes c  forall (ij) in E nonumber \n s^u_ijc theta^Delta l_ijc theta^Delta u_ijc in mathbbR forall (ij) in E forall c in C nonumber mathbfs^u_ij = s^u_ijc_c in C \n V^textref_ic  in mathbbC  forall r in R  mathbfV^textref_i =  V^textref_ic_c in C \n\nendalign","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"where the notation mathbfv^l_i = v^l_ic_c in C reflects that the vector mathbfv^l_i is constructed by putting the individual phase values v^l_ic in a vector (in order abc).","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"Alternatively, the series impedance of a line can be written in impedance form:","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"mathbfZ_ij in mathbbC^ctimes c  forall (ij) in E nonumber mathbfY_ij = ( mathbfZ_ij)^-1","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"where superscript -1 indicates the matrix inverse. Note that mathbfY_ij or mathbfZ_ij may not be invertible, e.g. in case of single-phase branches in a three-phase grid. In this case the pseudo-inverse can be used.","category":"page"},{"location":"manual/math-model.html#Variables-for-a-Bus-Injection-Model","page":"Mathematical Model","title":"Variables for a Bus Injection Model","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC  forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic  in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"manual/math-model.html#Mathematical-Formulation-of-a-Bus-Injection-Model","page":"Mathematical Model","title":"Mathematical Formulation of a Bus Injection Model","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"\nbeginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij =  mathbfV_i mathbfV_i^H left( mathbfY_ij + mathbfY^c_ijright)^H - mathbfV_i mathbfV^H_j mathbfY^H_ij   forall (ij)in E \n mathbfS_ji = mathbfV_j mathbfV_j^H left( mathbfY_ij + mathbfY^c_ji right)^H - mathbfV^H_i mathbfV_j mathbfY^H_ij  forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"manual/math-model.html#Variables-for-a-Branch-Flow-Model","page":"Mathematical Model","title":"Variables for a Branch Flow Model","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\n S^g_kc  in mathbbC forall kin G forall c in C nonumber mathbfS^g_k = S^g_kc_c in C \n V_ic in mathbbC  forall iin N forall c in C nonumber mathbfV_i = V_ic_c in C \n I^s_ijc  in mathbbC forall e in E forall c in C nonumber mathbfI^s_ij = I^s_ijc_c in C \n mathbfS_ij  in mathbbC^ctimes c  forall (ij) in E cup E^R \n\nendalign","category":"page"},{"location":"manual/math-model.html#Mathematical-Formulation-of-a-Branch-Flow-Model","page":"Mathematical Model","title":"Mathematical Formulation of a Branch Flow Model","text":"","category":"section"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"A complete mathematical model is as follows,","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nmboxminimize   sum_k in G c_2k left( sum_c in C Re(S^g_kc) right)^2 + c_1k  sum_c in C Re(S^g_kc) + c_0k \n\nmboxsubject to   nonumber \n mathbfV_i = mathbfV^textref_i    forall r in R \n S^gl_kc leq S^g_kc leq S^gu_kc  forall k in G forall c in C  \n v^l_ic leq V_ic leq v^u_ic  forall i in N forall c in C \n sum_substackk in G_i mathbfS^g_k - sum_substackk in L_i mathbfS^d_k - sum_substackk in S_i  mathbfV_i mathbfV^H_i (mathbfY^s_k)^H = sum_substack(ij)in E_i cup E_i^R diag(mathbfS_ij)  forall iin N \n mathbfS_ij + mathbfS_ji =  mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H + mathbfZ_ij mathbfI^s_ij(mathbfI^s_ij)^H + mathbfV_j mathbfV_j^H (mathbfY^c_ji)^H   forall (ij)in E \n mathbfS^s_ij = mathbfS_ij + mathbfV_i mathbfV_i^H (mathbfY^c_ij)^H   forall (ij) in E cup E^R \n mathbfS^s_ij = mathbfV_i (mathbfI^s_ij)^H   forall (ij) in E cup E^R\n mathbfV_i = mathbfV_j - mathbfZ_ij mathbfI^s_ij forall (ij)in E \n diag(mathbfS_ij) leq mathbfs^u_ij  forall (ij) in E cup E^R \n theta^Delta l_ijc leq angle (V_ic V^*_jc) leq theta^Delta u_ijc  forall (ij) in E forall c in C\n\nendalign","category":"page"},{"location":"manual/math-model.html","page":"Mathematical Model","title":"Mathematical Model","text":"[1]: Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. https://doi.org/10.1109/PSCC.2014.7038399","category":"page"},{"location":"tutorials/Native Power Flow.html#Native-Power-Flow-Solver","page":"Native Power Flow Solver","title":"Native Power Flow Solver","text":"","category":"section"},{"location":"tutorials/Native Power Flow.html","page":"Native Power Flow Solver","title":"Native Power Flow Solver","text":"Stub for Native Power Flow.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"installation.html#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"From Julia, PowerModelsDistribution is installed using the built-in package manager:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.add(\"PowerModelsDistribution\")","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Or, within the Julia REPL:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"]add PowerModelsDistribution","category":"page"},{"location":"installation.html#Installing-an-Optimizer","page":"Installation Guide","title":"Installing an Optimizer","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"PowerModelsDistribution depends on optimizers to solve Optimization problems, e.g., solve_mc_opf. The table below lists the optimizer packages that have been tested with PowerModelsDistribution, and have been found to work by the team; this list is not exhaustive, there are probably more optimizers that will work.","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Install an optimizer using the Julia Package Manager, e.g.,","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"import Pkg\nPkg.add(\"Ipopt\")","category":"page"},{"location":"installation.html#Known-Working-Optimizers","page":"Installation Guide","title":"Known Working Optimizers","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"The table below contains a truncated list of optimizers from the JuMP documentation that have been used by the development team and are confirmed to work with our package. There may be other Optimizers that work, and the Optimizers listed below are not guaranteed to work with all problems; they must be selected for the appropriate problems.","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Solver Julia Package Installation License Supports\nArtelys Knitro KNITRO.jl Manual Comm. (MI)LP, (MI)SOCP, (MI)NLP\nCbc Cbc.jl  EPL (MI)LP\nCPLEX CPLEX.jl Manual Comm. (MI)LP, (MI)SOCP\nGurobi Gurobi.jl Manual Comm. (MI)LP, (MI)SOCP\nIpopt Ipopt.jl  EPL LP, QP, NLP\nJuniper.jl Juniper.jl  MIT (MI)SOCP, (MI)NLP\nSCS SCS.jl  MIT LP, SOCP, SDP","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Where:","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"LP = Linear programming\nQP = Quadratic programming\nSOCP = Second-order conic programming (including problems with convex quadratic constraints and/or objective)\nNLP = Nonlinear programming\nSDP = Semidefinite programming\n(MI)XXX = Mixed-integer equivalent of problem type XXX","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"For a complete list of JuMP supported optimizers, see JuMP Documentation.","category":"page"},{"location":"installation.html#Unsatisfiable-requirements-detected","page":"Installation Guide","title":"Unsatisfiable requirements detected","text":"","category":"section"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"Did you get an error like Unsatisfiable requirements detected for package D [756980fe]:?","category":"page"},{"location":"installation.html","page":"Installation Guide","title":"Installation Guide","text":"The Pkg documentation has a section on how to understand and manage these conflicts.","category":"page"},{"location":"manual/external-data-formats.html#External-Data-Formats","page":"External Data Formats","title":"External Data Formats","text":"","category":"section"},{"location":"manual/external-data-formats.html#OpenDSS","page":"External Data Formats","title":"OpenDSS","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"PowerModelsDistribution supports parsing OpenDSS format files. In particular, we support a raw parsing of all OpenDSS specified components into a dictionary (serializable) structure, and support converting the data values of a smaller subsection of components into their expected types. Those include","category":"page"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Line\nLoad\nGenerator\nCapactior (shunt capacitors only)\nReactor\nTransformer\nLinecode\nXfmrcode\nLoadshape\nXYCurve\nCircuit\nVSource\nPVSystem\nStorage","category":"page"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Of those, a subset of configurations are converted into a PowerModelsDistribution internal data model, namely:","category":"page"},{"location":"manual/external-data-formats.html#Edge-Elements","page":"External Data Formats","title":"Edge Elements","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"line (from lines and line reactors)\ntransformer (arbitrary winding, all connections except zig-zag)\nswitch (from lines w/ switch=y)","category":"page"},{"location":"manual/external-data-formats.html#Node-Elements","page":"External Data Formats","title":"Node Elements","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"generator\nvoltage_source\nsolar (from PVSystem)\nload (incl. support for constant POWER, constant IMPEDANCE, constant CURRENT, and EXPONENTIAL models)\nshunt (from shunt capacitors and shunt reactors)\nstorage","category":"page"},{"location":"manual/external-data-formats.html#Data-Elements","page":"External Data Formats","title":"Data Elements","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"linecode\nxfmrcode\ntime_series (from loadshapes)","category":"page"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Several notes about the specific design choices w.r.t. OpenDSS are explained below.","category":"page"},{"location":"manual/external-data-formats.html#Circuit","page":"External Data Formats","title":"Circuit","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"The default connection to the transmission system is modeled as an ideal voltage source named \"source\" in OpenDSS, which is connected by default to a node named \"sourcebus\", but this can be changed.","category":"page"},{"location":"manual/external-data-formats.html#Lines","page":"External Data Formats","title":"Lines","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Although Lines and Linecodes are supported, the more generic LineGeometry is not yet supported.","category":"page"},{"location":"manual/external-data-formats.html#Transformers","page":"External Data Formats","title":"Transformers","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Unfortunately, in the OpenDSS format, multi-phase transformers with different taps for each phase are not explicitly supported, so to work around this limitation multiple single phase transformers should be defined, which are then \"banked\" together using the bank property.","category":"page"},{"location":"manual/external-data-formats.html#Capacitors-and-Reactors","page":"External Data Formats","title":"Capacitors and Reactors","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"Capacitors and reactors are supported as shunts, although shunts to ground via delta connections are not yet supported. Furthermore, generic reactors are not supported, only those whose second terminal is connected to ground (default for unspecified second terminal). Reactors are also supported as a resistanceless line if their second terminal is connected, but only for topological continuity of the network.","category":"page"},{"location":"manual/external-data-formats.html#PowerModelsDistribution-JSON","page":"External Data Formats","title":"PowerModelsDistribution JSON","text":"","category":"section"},{"location":"manual/external-data-formats.html","page":"External Data Formats","title":"External Data Formats","text":"You can export a PowerModelsDistribution data structure to a JSON file using the print_file command and parse one in using the parse_file command","category":"page"},{"location":"tutorials/Explicit Neutral Models.html#Explicit-Neutral-Models","page":"Explicit Neutral Models","title":"Explicit Neutral Models","text":"","category":"section"},{"location":"tutorials/Explicit Neutral Models.html","page":"Explicit Neutral Models","title":"Explicit Neutral Models","text":"Stub for Explicit Neutral Models.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"developer/style.html#Style-Conventions","page":"Style Guide","title":"Style Conventions","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"In general, the following conventions should be adhered to when making changes or additions to the code base. These conventions should include any conventions applied across the InfrastructureModels ecosystem specific to power engineering (i.e conventions from InfrastructureModels, PowerModels, PowerModelsRestoration, etc.) with some additions specific to PowerModelsDistribution.","category":"page"},{"location":"developer/style.html#Functions","page":"Style Guide","title":"Functions","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Function additions should meeting the following criteria:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All functions should be clearly named, without abbreviations, and with underscores between words, e.g. parse_file or constraint_bus_voltage_magnitude; in Python this is known as lower_case_with_underscores. The exception to the abbreviate rule is cases where abbreviations would be expected in the modeling of power systems.\nAll functions that are not prepended by an underscore _ will be exported by default (i.e. when a user uses using PowerModelsDistribution). Public functions should have a detailed docstring instructing on usage\nAll functions that modify data in place should end with an exclamation point ! and the function input that is being modified should be the first argument (or first arguments in the case where multiple inputs are being modified in place). The exceptions to this rule are constraint and variable creation functions (i.e. those functions related to JuMP model creation), which do not include the exclamation point\nAll function arguments, including keyword arguments, should have their types specified.\nPrivate functions, i.e. those intended to be for internal use only, should follow the same descriptive naming conventions as functions exported by default, and should always include docstrings to describe their purpose.\nFunctions should be separated by two blank lines","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"\"this function demonstrates how an internal, in-place data altering function should be defined\"\nfunction _concise_descriptive_name!(data::Dict{String,<:Any}, a::Real, b::Vector{<:Real}, c::Matrix{<:Complex}; d::Bool=false, e::Vector{Function}=Function[])\nend","category":"page"},{"location":"developer/style.html#Types-and-Enums","page":"Style Guide","title":"Types & Enums","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"When specifying types, i.e. when specifying the type of a function argument, or creating enums, these guidelines are recommended:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Prefer to use Vector{T} instead of Array{T,1}\nPrefer to use Matrix{T} instead of Array{T,2}\nEnums should only be used in the ENGINEERING data model, never the MATHEMATICAL data model\nEnums must be added to the JSON parser when introduced","category":"page"},{"location":"developer/style.html#Constants","page":"Style Guide","title":"Constants","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Whenever possible, const should be used to eliminate unnecessary re-evaluations of code, and every const should have a docstring, whether internal or public.","category":"page"},{"location":"developer/style.html#JuMP-Variables-and-Constraints","page":"Style Guide","title":"JuMP Variables and Constraints","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"For functions that create JuMP variables and constraints in particular, we follow the following naming convention as originally adopted by PowerModels:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"<jump macro id>(_<phase variant>)_<comp short name>_<quantity name>(_real|_imaginary|_magnitude|_angle|_factor)(_fr|_to)(_sqr)(_on_off)","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"in the interest of intuitive names for users, the following special cases are also acceptable,","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"_power_real -(can be replaced with)-> _active\n_power_imaginary -(can be replaced with)-> _reactive","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"In the case of PowerModelsDistribution, there are additional tags indicating that a function is a multiconductor variant, three-phase specific, etc.:","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"mc multi-conductor, with an explicit neutral (which is the last conductor by convention?)\nmp multi-phase, for constraints that have no (explicit) neutral and multiple phases\n3p three-phase, when a constraint is hard-coded for three phases","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Currently, all phase-aware functions use mc, but this is subject to change in the future as we refactor. If the function is not multiphase specific, these are not needed in the function name.","category":"page"},{"location":"developer/style.html#Formulation-Styles","page":"Style Guide","title":"Formulation Styles","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new formulations should have clear error messages when they do not support existing components. For example, if a formulation addition which is intended to work with OPF does not support delta-wye transformers, the constraint_mc_transformer_power_dy\nFormulation abstract type and mutable struct must be specified in CapitalizedWords, which is a subtype of camelCase with the first word also capitalized.","category":"page"},{"location":"developer/style.html#Problem-Specification-Styles","page":"Style Guide","title":"Problem Specification Styles","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"If a new problem specification is only needed due to the requirements of a new formulation, and is not a new type of problem, e.g. another OPF formulation, a build_ function with the same name as the existing formulation should be created that accepts a specific PowerModel (multiple dispatch)\nIf a new problem specification is a new type of problem that will e.g. accept multiple formulations, new build_ and run_ functions should be created that do not collide with existing problem specification functions","category":"page"},{"location":"developer/style.html#Metaprogramming","page":"Style Guide","title":"Metaprogramming","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"In general, it is better to avoid metaprogramming patterns, like creating functions algorithmically, in order to aid in the debugging of code. Metaprogramming can create significant challenges in interpreting stacktraces upon errors.","category":"page"},{"location":"developer/style.html#Markdown","page":"Style Guide","title":"Markdown","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"Markdown files should be properly formatted, particularly when including tables. Developers are encouraged to use markdownlint and a markdown formatter (such as in VSCode).","category":"page"},{"location":"developer/style.html#File-Structure","page":"Style Guide","title":"File Structure","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"It is important that new functions, variables, constraints, etc. all go into appropriate places in the code base so that future maintenance and debugging is easier. Pay attention to the current file structure and attempt to conform as best as possible to it. In general","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"/src/core contains the core logic of the package, including variable creation and constraint templates, i.e. things that are agnostic to the formulation\n/src/data_model contains all of the logic to transform between the ENGINEERING and MATHEMATICAL data models and model creation helper tools\nsrc/form contains formulation specific variable and constraint functions, organized under separate files for different formulations\nsrc/io contains all of the tools to parse and save files, in particular all of the logic necessary to parse dss files and output json files\nsrc/prob contains all problem specifications\ndocs/src contains all source markdown files for the documentation\nexamples contains Jupyter notebooks with walkthroughs of PowerModelsDistribution for new users","category":"page"},{"location":"developer/style.html#Dependencies-(Project.toml)","page":"Style Guide","title":"Dependencies (Project.toml)","text":"","category":"section"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new dependencies should be carefully considered before being added. It is important to keep the number of external dependencies low to avoid reliance on features that may not be maintained in the future. If possible, Julia Standard Library should be used, particularly in the case where reproducing the desired feature is trivial. There will be cases where it is not simple to duplicate a feature and subsequently maintain it within the package, so adding a dependency would be appropriate in such cases.","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"All new dependencies are are ultimately approved should also include an entry under [compat] indicating the acceptable versions (Julia automerge requirement). This includes test-only dependencies that appear under [extras]","category":"page"},{"location":"developer/style.html","page":"Style Guide","title":"Style Guide","text":"The Manifest.toml should not be included in the repo.","category":"page"},{"location":"tutorials/Beginners Guide.html#Introduction-to-PowerModelsDistribution","page":"Beginners Guide","title":"Introduction to PowerModelsDistribution","text":"","category":"section"},{"location":"tutorials/Beginners Guide.html","page":"Beginners Guide","title":"Beginners Guide","text":"Stub for Beginners Guide.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"tutorials/Engineering Model - Helper Functions.html#tutorial-eng-model-helpers","page":"Engineering Model: Helper Functions","title":"The Engineering Model: Helper Functions","text":"","category":"section"},{"location":"tutorials/Engineering Model - Helper Functions.html","page":"Engineering Model: Helper Functions","title":"Engineering Model: Helper Functions","text":"Stub for Engineering Model - Helper Functions.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"manual/power-flow.html#Power-Flow-Computations","page":"Power Flow Computations","title":"Power Flow Computations","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The typical goal of PowerModelsDistribution is to build a JuMP model that is used to solve distribution power network optimization problems. The JuMP model abstraction enables PowerModelsDistribution to have state-of-the-art performance on a wide range of problem formulations. That said, for the specific case of power flow computations, in some specific applications performance gains can be had by avoiding the JuMP model abstraction and solving the problem more directly. To that end, PowerModelsDistribution includes Julia-native solvers for AC power flow in rectangular voltage coordinates. This section provides an overview of the different power flow options that are available in PowerModelsDistribution and under what circumstances they may be beneficial.","category":"page"},{"location":"manual/power-flow.html#Generic-Power-Flow","page":"Power Flow Computations","title":"Generic Power Flow","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The general purpose power flow solver in PowerModelsDistribution is,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"solve_mc_pf","category":"page"},{"location":"manual/power-flow.html#PowerModelsDistribution.solve_mc_pf","page":"Power Flow Computations","title":"PowerModelsDistribution.solve_mc_pf","text":"Power Flow Problem\n\n\n\n\n\n","category":"function"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"This function builds a JuMP model for a wide variety of unbalanced power flow formulations supported by PowerModelsDistribution. For example it supports,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"ACPUPowerModel - a non-convex nonlinear AC unbalanced power flow using complex voltages in polar coordinates\nACRPowerModel - a non-convex nonlinear AC unbalanced power flow using complex voltages in rectangular coordinates\nACRENPowerModel - a non-convex nonlinear AC unbalanced power flow using complex voltages in rectangular coordinates with explicit neutral conductor\nIVRUPowerModel - a non-convex nonlinear AC power unbalanced flow using current voltage variables in rectangular coordinates\nIVRENPowerModel - a non-convex nonlinear AC unbalanced power flow using current voltage variables in rectangular coordinates with explicit neutral conductor","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The solve_mc_pf solution method is both formulation and solver agnostic and can leverage the wide range of solvers that are available in the JuMP ecosystem. Many of these solvers are commercial-grade, which in turn makes solve_mc_pf the most reliable power flow solution method in PowerModelsDistribution.","category":"page"},{"location":"manual/power-flow.html#Warm-Starting","page":"Power Flow Computations","title":"Warm Starting","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"In some applications an initial guess of the power flow solution may be available. In such a case, this information may be able to decrease a solver's time to convergence, especially when solving systems of nonlinear equations. The _start postfix can be used in the network data to initialize the solver's variables and provide a suitable solution guess. The most common values are as follows,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"For each generator,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"pg_start - active power injection starting point\nqg_start - reactive power injection starting point","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"For each bus,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"vm_start - voltage magnitude starting point for the ACPUPowerModel model\nva_start - voltage angle starting point for the ACPUPowerModel model\nvr_start - real voltage starting point for the IVRUPowerModel model\nvi_start - imaginary voltage starting point for the IVRUPowerModel model","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The following helper function can be used to use the solution point in the network data as the starting point for solve_mc_pf.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"add_start_voltage!","category":"page"},{"location":"manual/power-flow.html#PowerModelsDistribution.add_start_voltage!","page":"Power Flow Computations","title":"PowerModelsDistribution.add_start_voltage!","text":"add_start_voltage!(\n    data_math::Dict{String,Any};\n    coordinates=:rectangular,\n    uniform_v_start=missing,\n    vr_default=0.0,\n    vi_default=0.0,\n    vm_default=0.0,\n    va_default=0.0,\n    epsilon::Number=1E-3,\n)::Dict{String,Any}\n\nAdds start values for the voltage to the buses. For a multinetwork data model, you can calculate the start voltages for a representative network through 'calcstartvoltage', and pass the result as 'uniformvstart' to use the same values for all networks and avoid recalculating it for each network. The argument 'epsilon' controls the offset added to ungrounded terminals which would otherwise be set to zero.\n\n\n\n\n\n","category":"function"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"warning: Warning\n","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"Warm starting a solver is a very delicate task and can easily result in degraded performance. Using PowerModelsDistribution' default flat-start values is recommended before experimenting with warm starting a solver.","category":"page"},{"location":"manual/power-flow.html#Native-Power-Flow","page":"Power Flow Computations","title":"Native Power Flow","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The AC Unbalanced Power Flow problem is ubiquitous in power system analysis. The problem requires solving a system of nonlinear equations, usually via a Newton-Raphson type of algorithm. In PowerModelsDistribution, the standard Julia library is used for solving this system of nonlinear equations. The following function is used to solve Unbalanced Power Flow problem with voltages in rectangular coordinates.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"compute_mc_pf","category":"page"},{"location":"manual/power-flow.html#PowerModelsDistribution.compute_mc_pf","page":"Power Flow Computations","title":"PowerModelsDistribution.compute_mc_pf","text":"compute_mc_pf(\n    data::Dict{String,<:Any};\n    explicit_neutral::Bool=false,\n    max_iter::Int=100,\n    v_start::Union{Dict{<:Any,<:Any},Missing}=missing,\n    stat_tol::Real=1e-8,\n    verbose::Bool=false,\n    kron_reduce::Bool=true,\n    phase_project::Bool=false,\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    eng2math_extensions::Vector{<:Function}=Function[],\n    eng2math_passthrough::Dict{String,<:Vector{<:String}}=Dict{String,Vector{String}}(),\n    make_pu_extensions::Vector{<:Function}=Function[],\n    map_math2eng_extensions::Dict{String,<:Function}=Dict{String,Function}(),\n    make_si::Bool=!get(data, \"per_unit\", false),\n    make_si_extensions::Vector{<:Function}=Function[],\n    dimensionalize_math_extensions::Dict{String,Dict{String,Vector{String}}}=Dict{String,Dict{String,Vector{String}}}(),\n)::Dict{String,Any}\n\nTakes data in either the ENGINEERING or MATHEMATICAL model, a model type (e.g., ACRUPowerModel), and model builder function (e.g., build_mc_opf), and returns a solution in the original data model defined by data.\n\nTechnical description of the native power flow can be found at https://arxiv.org/abs/2305.04405 where implementation fo the  fixed-point current injection algorithm, inspired by the existing open-source implementation in OpenDSS.  The current injection method is commonly conceived as a system of nonlinear equalities solved by Newton’s method.  However, the fixed point iteration variant commonly outperforms most methods, while supporting meshed topologies from the ground up\n\nIf make_si is false, data will remain in per-unit.\n\nFor an explanation of multinetwork and global_keys, see make_multinetwork\n\nFor an explanation of eng2math_extensions and eng2math_passthrough, see transform_data_model\n\nFor an explanation of make_pu_extensions, see make_per_unit!\n\nFor an explanation of ref_extensions, see instantiate_mc_model\n\nFor an explanation of map_math2eng_extensions, make_si, make_si_extensions, and dimensionalize_math_extensions, see solution_make_si\n\n\n\n\n\ncompute_mc_pf(\n  pdf::PowerFlowData,\n  max_iter::Int,\n  stat_tol::Float,\n  verbose::Bool\n)\n\nComputes native power flow and requires PowerFlowData (See https://arxiv.org/abs/2305.04405).\n\n\n\n\n\n","category":"function"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"compute_mc_pf is based on the current injection method and is inspired by OpenDSS's algorithm. compute_mc_pf will typically provide an identical result to solve_mc_pf. However, the existence of solution degeneracy around generator injection assignments and multiple power flow solutions can yield different results. The primary advantage of compute_mc_pf over solve_mc_pf is that it does not require building a JuMP model. If the initial point for the Unbalanced Power Flow solution is near-feasible then compute_mc_pf can result in a significant runtime saving by converging quickly and reducing data-wrangling and memory allocation overheads. This initial guess is provided using the standard _start values. The add_start_voltage! function provides a convenient way of setting a suitable starting point.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"tip: Tip\n","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"If compute_mc_pf fails to converge try solve_mc_pf instead.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The table below reports the accuracy of the native power flow with respect to OpenDSS native solver tested on three IEEE testcases: | IEEE testcases | maximum voltage p.u difference with OpenDSS power flow solver | | –––––––-| ––––––––––––––––––––––––––––––- | | IEEE13 | 3.765096388188572e-6 | | IEEE34 | 6.805369850332029e-8 | | IEEE123 | 4.021326251365659e-8 |","category":"page"},{"location":"manual/power-flow.html#Input-arguments","page":"Power Flow Computations","title":"Input arguments","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"compute_mc_pf receives input arguments as follows,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"data_math - network data in MATHEMATICAL format\nexplicit_neutral - a boolean input indication wether or not the neutral is explicitly modelled\nv_start - warm start if different from in-built initialization algorithm\nmax_iter - maximum iterations\nstat_tol - statistical tolerance","category":"page"},{"location":"manual/power-flow.html#Outputs","page":"Power Flow Computations","title":"Outputs","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"compute_mc_pf provides the following outputs,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"solution - solution dictionary\niterations - number of iterations\ntime_build - time spent on building the power flow data\ntime_solve - time spent on solving the native power flow\ntime_post - time spent to generate solutions\ntime_total - total time\ntermination_status - termination status","category":"page"},{"location":"manual/power-flow.html#Limitations","page":"Power Flow Computations","title":"Limitations","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"compute_mc_pf has the following limitations,","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"starting from the math dictionary means that transformer decomposition is already done, which is different from what OpenDSS does\nwe calculate the primitive admittance matrix in p.u. whereas OpenDSS algorithm works with actual units\nno load model relaxation is performed\ninspired by OpenDSS, we add small ppm values to certain component primitive admittance values to avoid singularity issues\ninspired by OpenDSS, switch primitive admittance has specific values","category":"page"},{"location":"manual/power-flow.html#Network-Admittance-Matrix","page":"Power Flow Computations","title":"Network Admittance Matrix","text":"","category":"section"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"Internally compute_mc_pf utilizes an admittance matrix representation of the network data, which may be useful in other contexts. The foundational type for the admittance matrix representations is SparseMatrixCSC.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"The following function can be used to compute the admittance matrix from PowerModelsDistribution network data.","category":"page"},{"location":"manual/power-flow.html","page":"Power Flow Computations","title":"Power Flow Computations","text":"calc_admittance_matrix","category":"page"},{"location":"manual/power-flow.html#PowerModelsDistribution.calc_admittance_matrix","page":"Power Flow Computations","title":"PowerModelsDistribution.calc_admittance_matrix","text":"calc_admittance_matrix(\n  data_math::Dict,\n  v_start::Dict,\n  explicit_neutral::Bool\n)\n\nCalculates the admittance matrix from PowerFlowData struct.\n\n\n\n\n\n","category":"function"},{"location":"manual/formulations.html#Unbalanced-Network-Formulations","page":"Unbalanced Formulations","title":"Unbalanced Network Formulations","text":"","category":"section"},{"location":"manual/formulations.html#[AbstractUnbalancedACPModel](@ref-AbstractUnbalancedACPModel)","page":"Unbalanced Formulations","title":"AbstractUnbalancedACPModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Real-valued formulation from:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Formulation without shunts: Mahdad, B., Bouktir, T., & Srairi, K. (2006). A three-phase power flow modelization: a tool for optimal location and control of FACTS devices in unbalanced power systems. In IEEE Industrial Electronics IECON (pp. 2238–2243).","category":"page"},{"location":"manual/formulations.html#[AbstractUnbalancedDCPModel](@ref-AbstractUnbalancedDCPModel)","page":"Unbalanced Formulations","title":"AbstractUnbalancedDCPModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Applying all of the standard DC linearization tricks to the AbstractUnbalancedACPModel","category":"page"},{"location":"manual/formulations.html#[SDPUBFModel](@ref-SDPUBFModel)","page":"Unbalanced Formulations","title":"SDPUBFModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"The BFM SDP relaxation as described in:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. doi:10.1109/PSCC.2014.7038399","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Note that this formulation is complex-valued and additional steps are needed to implement this in JuMP.","category":"page"},{"location":"manual/formulations.html#[SOCNLPUBFModel](@ref-SOCNLPUBFModel)","page":"Unbalanced Formulations","title":"SOCNLPUBFModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"The starting point is SDPUBFModel. The SDP constraint can be relaxed to a set of SOC constraints, starting from either the real or complex form of the matrix on which the PSD-ness constraint is applied.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Kim, S., Kojima, M., & Yamashita, M. (2003). Second order cone programming relaxation of a positive semidefinite constraint. Optimization Methods and Software, 18(5), 535–541. doi:10.1080/1055678031000148696\nAndersen, M. S., Hansson, A., & Vandenberghe, L. (2014). Reduced-complexity semidefinite relaxations of optimal power flow problems. IEEE Trans. Power Syst., 29(4), 1855–1863.","category":"page"},{"location":"manual/formulations.html#[SOCConicUBFModel](@ref-SOCConicUBFModel)","page":"Unbalanced Formulations","title":"SOCConicUBFModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"See SOCNLPUBFModel","category":"page"},{"location":"manual/formulations.html#[LPUBFDiagModel](@ref-LPUBFDiagModel)","page":"Unbalanced Formulations","title":"LPUBFDiagModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This formulation has originally been developed by Sankur et al.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Sankur, M. D., Dobbe, R., Stewart, E., Callaway, D. S., & Arnold, D. B. (2016). A linearized power flow model for optimization in unbalanced distribution systems. arXiv:1606.04492v2","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"and is here cast as only considering the diagonal elements of the linear formulation by Gan and Low:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Gan, L., & Low, S. H. (2014). Convex relaxations and linear approximation for optimal power flow in multiphase radial networks. In PSSC (pp. 1–9). Wroclaw, Poland. doi:10.1109/PSCC.2014.7038399","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This furthermore leads to the imaginary part of the lifted node voltage variable W in Gan and Low being redundant, so it is substituted out in LPUBFDiagModel.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"The full formulation from Gan and Low was supported as LPUBFFullModel in PowerModelsDistribution up to version 0.7. ","category":"page"},{"location":"manual/formulations.html#[FBSUBFPowerModel](@ref-FBSUBFPowerModel),-[FOTPUPowerModel](@ref-FOTPUPowerModel),-[FOTRUPowerModel](@ref-FOTRUPowerModel)","page":"Unbalanced Formulations","title":"FBSUBFPowerModel, FOTPUPowerModel, FOTRUPowerModel","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"The linear FBS and FOT formulations as described in:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Girigoudar, K., & Roald, L.A. (2021). Linearized  Three-Phase  Optimal  Power  Flow  Models for  Distribution  Grids  with  Voltage  Unbalance. 2021 IEEE Conference on Decision and Control (CDC).","category":"page"},{"location":"manual/formulations.html#Unbalanced-Network-Formulation-Type-Hierarchy","page":"Unbalanced Formulations","title":"Unbalanced Network Formulation Type Hierarchy","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"PowerModelsDistribution has a rich model type hierarchy similar to PowerModels. At the top of the type hierarchy we can distinguish between conic, active power only, and branch flow models:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"abstract type AbstractUnbalancedConicModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedActivePowerModel <: AbstractPowerModel end\nabstract type AbstractUBFModel <: AbstractPowerModel end\nabstract type AbstractUBFQPModel <: AbstractUBFModel end\nabstract type AbstractUBFConicModel <: AbstractUBFModel end\nconst AbstractUnbalancedConicModels = Union{AbstractUnbalancedConicModel, AbstractUBFConicModel}","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Several nonlinear (non-convex) models are available at the top level:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"abstract type AbstractUnbalancedACPModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedACRModel <: AbstractPowerModel end\nabstract type AbstractUnbalancedIVRModel <: AbstractUnbalancedACRModel end","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"The following relaxations are available under these hierarchies:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"abstract type AbstractNLPUBFModel <: AbstractUBFQPModel end\nabstract type AbstractConicUBFModel <: AbstractUBFConicModel end\nconst AbstractUBFModels = Union{AbstractNLPUBFModel, AbstractConicUBFModel}\n\nabstract type SDPUBFModel <: AbstractConicUBFModel end\nabstract type SDPUBFKCLMXModel <: SDPUBFModel end\nabstract type SOCNLPUBFModel <: AbstractNLPUBFModel end\nabstract type SOCConicUBFModel <: AbstractConicUBFModel end\nconst SOCUBFModels = Union{SOCNLPUBFModel, SOCConicUBFModel}","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"where UBF is an unbalanced variant of the Branch Flow models from PowerModels. Models which do not contain UBF in their name are Bus Injection Models e.g. AbstractUnbalancedACPModel. Finally, some linear unbalanced power flow models are available under the following hierarchy:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"abstract type AbstractUnbalancedDCPModel <: AbstractUnbalancedActivePowerModel end\nabstract type AbstractUnbalancedNFAModel <: AbstractUnbalancedDCPModel end\nabstract type AbstractLPUBFModel <: AbstractNLPUBFModel end\nabstract type LPUBFDiagModel <: AbstractLPUBFModel end\nconst LinDist3FlowModel = LPUBFDiagModel\nabstract type FBSUBFModel <: AbstractLPUBFModel end","category":"page"},{"location":"manual/formulations.html#Unbalanced-Power-Models","page":"Unbalanced Formulations","title":"Unbalanced Power Models","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Each of these Models can be used as the type parameter for an UnbalancedPowerModel:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"mutable struct ACPUPowerModel <: AbstractUnbalancedACPModel @pmd_fields end\nmutable struct ACRUPowerModel <: AbstractUnbalancedACRModel @pmd_fields end\nmutable struct DCPUPowerModel <: AbstractUnbalancedDCPModel @pmd_fields end\nmutable struct NFAUPowerModel <: AbstractUnbalancedNFAModel @pmd_fields end\n\nmutable struct SDPUBFPowerModel <: SDPUBFModel @pmd_fields end\nmutable struct SDPUBFKCLMXPowerModel <: SDPUBFKCLMXModel @pmd_fields end\n\nmutable struct SOCNLPUBFPowerModel <: SOCNLPUBFModel @pmd_fields end\nmutable struct SOCConicUBFPowerModel <: SOCConicUBFModel @pmd_fields end\n\nmutable struct LPUBFDiagPowerModel <: LPUBFDiagModel @pmd_fields end\nconst LinDist3FlowPowerModel = LPUBFDiagPowerModel\nmutable struct FBSUBFPowerModel <: FBSUBFModel @pmd_fields end\nmutable struct FOTPUPowerModel <: AbstractUnbalancedACPModel @pmd_fields end\nmutable struct FOTRUPowerModel <: AbstractUnbalancedACRModel @pmd_fields end","category":"page"},{"location":"manual/formulations.html#Optimization-problem-classes","page":"Unbalanced Formulations","title":"Optimization problem classes","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"NLP (nonconvex): ACPUPowerModel, ACRUPowerModel, IVRUPowerModel\nSDP: SDPUBFPowerModel, SDPUBFKCLMXPowerModel\nSOC(-representable): SOCNLPUBFPowerModel, SOCConicUBFPowerModel\nLinear: LPUBFDiagPowerModel (LinDist3FlowPowerModel), FBSUBFPowerModel, FOTPUPowerModel, FOTRUPowerModel, DCPUPowerModel, NFAUPowerModel ","category":"page"},{"location":"manual/formulations.html#Matrix-equations-versus-scalar-equations","page":"Unbalanced Formulations","title":"Matrix equations versus scalar equations","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"JuMP supports vectorized syntax, but not for nonlinear constraints. Therefore, certain formulations must be implemented in a scalar fashion. Other formulations can be written as matrix (in)equalities. The current implementations are categorized as follows:","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Scalar: ACPUPowerModel, ACRUPowerModel, IVRUPowerModel, DCPUPowerModel, NFAPowerModel, FBSUBFPowerModel, FOTPUPowerModel, FOTRUPowerModel\nMatrix: SDPUBFPowerModel, SDPUBFKCLMXPowerModel, SOCNLPUBFPowerModel, SOCConicUBFPowerModel, LPUBFDiagPowerModel","category":"page"},{"location":"manual/formulations.html#Explicit-Neutral-Models","page":"Unbalanced Formulations","title":"Explicit Neutral Models","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"Explicit neutral (EN) models represent the neutral currents explicitly; unlike all the previous models, which implicitly assume they are grounded immediately where they originate.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"There are two broad classes of formulations: IVR ones an ACR one.","category":"page"},{"location":"manual/formulations.html#IVR","page":"Unbalanced Formulations","title":"IVR","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"AbstractExplicitNeutralIVRModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This abstract type groups all EN IVR formulations, and is a subtype of AbstractUnbalancedIVRModel.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"AbstractNLExplicitNeutralIVRModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This abstract type groups non-linear EN IVR formulations, and is a subtype of AbstractExplicitNeutralIVRModel.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"IVRENPowerModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This concrete type is a non-linear EN IVR formulation.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"IVRReducedENPowerModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This concrete type is a non-linear EN IVR formulation, where the branches only have series current variables (instead of also total current variables).","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"AbstractQuadraticExplicitNeutralIVRModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This abstract type groups quadratic EN IVR formulations, and is a subtype of AbstractExplicitNeutralIVRModel.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"IVRQuadraticENPowerModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This concrete type is a quadratic EN IVR formulation.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"IVRReducedQuadraticENPowerModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This concrete type is a quadratic EN IVR formulation, where the branches only have series current variables (instead of also total current variables).","category":"page"},{"location":"manual/formulations.html#ACR","page":"Unbalanced Formulations","title":"ACR","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"AbstractExplicitNeutralACRModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This abstract type is a subtype of AbstractUnbalancedACRModel, analogous to the IVR structure.","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"ACRENPowerModel","category":"page"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"This is the only concrete ACR type amongst the EN formulations.","category":"page"},{"location":"manual/formulations.html#Overview-of-hierarchy","page":"Unbalanced Formulations","title":"Overview of hierarchy","text":"","category":"section"},{"location":"manual/formulations.html","page":"Unbalanced Formulations","title":"Unbalanced Formulations","text":"EN-IVR (AbstractExplicitNeutralIVRModel)\n|\n|-- NL (AbstractNLExplicitNeutralIVRModel)\n|   |\n|   |-- IVRENPowerModel\n|\n|-- Quadratic (AbstractQuadraticExplicitNeutralIVRModel)\n    |\n    |-- IVRENPowerModel\n    |\n    |-- IVRReducedENPowerModel\n\nEN-ACR (AbstractExplicitNeutralIVRModel)\n|\n|-- ACRENPowerModel","category":"page"},{"location":"manual/enums.html#PowerModelsDistribution-Enum-Types","page":"Enums in Engineering Model","title":"PowerModelsDistribution Enum Types","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Within the PowerModelsDistribution Engineering Model we have included the use of Enums. Here we document the fields for which Enums are expected and the possible Enums available.","category":"page"},{"location":"manual/enums.html#Data-Model","page":"Enums in Engineering Model","title":"Data Model","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Any place in PowerModelsDistribution that calls for specifying the data_model, either in function calls or the \"data_model\" field inside the data structure itself, will expect a DataModel type.","category":"page"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"The DSS data model is an output of parse_dss, and is an untranslated raw parse of a DSS file. This Enum exists for use by count_nodes, where the method to count the number of active nodes is different between all three models.","category":"page"},{"location":"manual/enums.html#Component-Status","page":"Enums in Engineering Model","title":"Component Status","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"All \"status\" fields in the ENGINEERING model expect a Status type.","category":"page"},{"location":"manual/enums.html#Connection-Configuration","page":"Enums in Engineering Model","title":"Connection Configuration","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"All \"configuration\" fields in the ENGINEERING model expect a ConnConfig type.","category":"page"},{"location":"manual/enums.html#Load-Model","page":"Enums in Engineering Model","title":"Load Model","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For load objects, the \"model\" field expects a LoadModel type to specify the type of load model to use, where","category":"page"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"POWER indicates constant power,\nCURRENT indicates constant current,\nIMPEDANCE indicates constant impedance,\nEXPONENTIAL indicates an exponential load model, and\nZIP indicates a ZIP model","category":"page"},{"location":"manual/enums.html#Shunt-Model","page":"Enums in Engineering Model","title":"Shunt Model","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For shunt objects, the \"model\" field expects a ShuntModel type to specify the origin of the shunt object, which is important for transient analysis.","category":"page"},{"location":"manual/enums.html#Switch-State","page":"Enums in Engineering Model","title":"Switch State","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For switch objects, the \"state\" field expects a SwitchState type to specify whether the switch is currently open or closed.","category":"page"},{"location":"manual/enums.html#Dispatchable-Component","page":"Enums in Engineering Model","title":"Dispatchable Component","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"Some components can be Dispatchable, e.g. if a switch is dispatchable that means it is free to open or close, but if not then it is fixed in place, or if a load is dispatchable it implies that it can be shed in a run_mc_mld problem.","category":"page"},{"location":"manual/enums.html#Generator-Control-Mode","page":"Enums in Engineering Model","title":"Generator Control Mode","text":"","category":"section"},{"location":"manual/enums.html","page":"Enums in Engineering Model","title":"Enums in Engineering Model","text":"For generator objects, the \"control_mode\" field expects a ControlMode type to specify whether the generator is operating in an isochronous mode (i.e. is frequency forming) or droop mode (i.e. is frequency following).","category":"page"},{"location":"manual/specifications.html#Problem-Specifications","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"In addition to the standard power flow solve_mc_pf, and optimal power flow solve_mc_opf, there are several notable problem specifications included in PowerModelsDistribution.","category":"page"},{"location":"manual/specifications.html#Optimal-Power-Flow-(OPF)-with-On-Load-Tap-Changers-(OLTC)","page":"Problem Specifications","title":"Optimal Power Flow (OPF) with On-Load Tap Changers (OLTC)","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"This problem is identical to mc_opf, except that all transformers are now modelled as on-load tap changers (OLTCs). Each phase has an individual tap ratio, which can be either variable or fixed, as specified in the data model.","category":"page"},{"location":"manual/specifications.html#OLTC-Objective","page":"Problem Specifications","title":"OLTC Objective","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"objective_mc_min_fuel_cost","category":"page"},{"location":"manual/specifications.html#OLTC-Variables","page":"Problem Specifications","title":"OLTC Variables","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"variable_mc_oltc_transformer_tap","category":"page"},{"location":"manual/specifications.html#OLTC-Constraints","page":"Problem Specifications","title":"OLTC Constraints","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"constraint_mc_transformer_power(pm, i, fix_taps=false)","category":"page"},{"location":"manual/specifications.html#Minimal-Load-Delta-(MLD)-Problem-Specification","page":"Problem Specifications","title":"Minimal Load Delta (MLD) Problem Specification","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"Load shed (continuous) problem. See \"Relaxations of AC Maximal Load Delivery for Severe Contingency Analysis\" by C. Coffrin et al. (DOI: 10.1109/TPWRS.2018.2876507) for single-phase case.","category":"page"},{"location":"manual/specifications.html#MLD-Variables","page":"Problem Specifications","title":"MLD Variables","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxvariables   nonumber \n z^v_i in 01  forall i in N mbox - bus voltage onoff variable \n z^g_i in 01  forall i in G mbox - generator onoff variable \n z^b_i in 01  forall i in Bmbox - storage onoff variable \n z^d_i in (01)  forall i in L mbox - continuous load shedding variable \n z^s_i in (01)  forall i in H mbox - continuous shunt shedding variable\nendalign","category":"page"},{"location":"manual/specifications.html#MLD-Objective","page":"Problem Specifications","title":"MLD Objective","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxminimize left (\nsum_substackiin Ncin C10 left (1-z^v_i right ) + sum_substackiin Lcin C10 omega_icleft Releft (S^d_iright )right left ( 1-z^d_i right )  + sum_substackiin Hcin Cleft  Releft (S^s_i right )right  left (1-z^s_i right )  + sum_substackiin Gcin CDelta^g_i  + sum_substackiin Bcin CDelta^b_i right )\nendalign","category":"page"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"where","category":"page"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nDelta^g_i = left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^g_i = -left Releft (S^g_i(0) right ) - Releft (S^g_i right ) right  \nDelta^b_i = left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right  \nDelta^b_i = -left Releft (S^b_i(0) right ) - Releft (S^b_i right ) right \nendalign","category":"page"},{"location":"manual/specifications.html#MLD-Constraints","page":"Problem Specifications","title":"MLD Constraints","text":"","category":"section"},{"location":"manual/specifications.html","page":"Problem Specifications","title":"Problem Specifications","text":"beginalign\nmboxsubject to   nonumber \n z^v_i v^l_ic leq left  V_ic right  leq z_i^v v^u_ic  forall i in Nforall c in C \n z^g_i S^gl_ic leq S^g_ic leq z^g_i S^gu_ic  forall i in Gforall c in C \n sum_substackkin G_icin C S^g_kc - sum_substackkin L_icin C z^d_k S^d_kc- sum_substackkin H_icin C z^s_k Y^s_kcleft  V_ic right ^2 nonumber \n = sum_substack(ij)in E_icup E_i^Rcin C S_ijc forall i in N\nendalign","category":"page"},{"location":"reference/logging.html#LoggingAPI","page":"Logging","title":"Logging","text":"","category":"section"},{"location":"reference/logging.html","page":"Logging","title":"Logging","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"logging.jl\"]","category":"page"},{"location":"reference/logging.html#PowerModelsDistribution.reset_logging_level!-Tuple{}","page":"Logging","title":"PowerModelsDistribution.reset_logging_level!","text":"reset_logging_level!()\n\nResets the log level to Info\n\n\n\n\n\n","category":"method"},{"location":"reference/logging.html#PowerModelsDistribution.restore_global_logger!-Tuple{}","page":"Logging","title":"PowerModelsDistribution.restore_global_logger!","text":"restore_global_logger!()\n\nRestores the global logger to its default state (before PMD was loaded)\n\n\n\n\n\n","category":"method"},{"location":"reference/logging.html#PowerModelsDistribution.set_logging_level!-Tuple{Symbol}","page":"Logging","title":"PowerModelsDistribution.set_logging_level!","text":"set_logging_level!(level::Symbol)\n\nSets the logging level for PMD: :Info, :Warn, :Error\n\n\n\n\n\n","category":"method"},{"location":"reference/logging.html#PowerModelsDistribution.silence!-Tuple{}","page":"Logging","title":"PowerModelsDistribution.silence!","text":"silence!()\n\nSets loglevel for PMD to :Error, silencing Info and Warn\n\n\n\n\n\n","category":"method"},{"location":"reference/base.html#Base","page":"Base","title":"Base","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"ref\nvar\nids\ncon\nsol\nnws\nnw_ids","category":"page"},{"location":"reference/base.html#PowerModelsDistribution.ref","page":"Base","title":"PowerModelsDistribution.ref","text":"helper function to access the AbstractUnbalancedPowerModel structs' ref, returns (id,data) pairs\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.var","page":"Base","title":"PowerModelsDistribution.var","text":"helper function to access the AbstractUnbalancedPowerModel structs' var, returns JuMP VariableRef\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.ids","page":"Base","title":"PowerModelsDistribution.ids","text":"helper function to access the ids of AbstractUnbalancedPowerModel structs' ref, returns ints\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.con","page":"Base","title":"PowerModelsDistribution.con","text":"helper function to access the AbstractUnbalancedPowerModel structs' con, returns JuMP Constraint\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.sol","page":"Base","title":"PowerModelsDistribution.sol","text":"helper function to access the AbstractUnbalancedPowerModel structs' sol, returns Dict\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.nws","page":"Base","title":"PowerModelsDistribution.nws","text":"helper function to access multinetwork data from AbstractUnbalancedPowerModel structs, returns (id,data) pairs\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.nw_ids","page":"Base","title":"PowerModelsDistribution.nw_ids","text":"helper function to access the ids of multinetworks from AbstractUnbalancedPowerModel structs, returns ints\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#Helper-functions","page":"Base","title":"Helper functions","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"set_lower_bound\nset_upper_bound\ncomp_start_value","category":"page"},{"location":"reference/base.html#PowerModelsDistribution.set_lower_bound","page":"Base","title":"PowerModelsDistribution.set_lower_bound","text":"function set_lower_bound(\n\tx::JuMP.VariableRef,\n\tbound::Real\n)\n\nLocal wrapper method for JuMP.setlowerbound, which skips NaN and infinite (-Inf only)\n\n\n\n\n\nfunction set_lower_bound(\n\txs::Vector{JuMP.VariableRef},\n\tbound::Real\n)\n\nLocal wrapper method for JuMP.setlowerbound, which skips NaN and infinite (-Inf only). Note that with this signature, the bound is applied to every variable in the vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.set_upper_bound","page":"Base","title":"PowerModelsDistribution.set_upper_bound","text":"function set_upper_bound(\n\tx::JuMP.VariableRef,\n\tbound\n)\n\nLocal wrapper method for JuMP.setupperbound, which skips NaN and infinite (+Inf only)\n\n\n\n\n\nfunction set_upper_bound(\n\txs::Vector{JuMP.VariableRef},\n\tbound::Real\n)\n\nLocal wrapper method for JuMP.setupperbound, which skips NaN and infinite (+Inf only). Note that with this signature, the bound is applied to every variable in the vector.\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#PowerModelsDistribution.comp_start_value","page":"Base","title":"PowerModelsDistribution.comp_start_value","text":"comp_start_value(\n  comp::Dict,\n  keys::Vector{String},\n  conductor::Int,\n  default::Any\n)\n\nSearches for start value for a variable key in order from a list of keys of a component comp for conductor conductor, and if one does not exist, uses default\n\n\n\n\n\nfunction comp_start_value(\n\tcomp::Dict{String,<:Any},\n\tkey::String,\n\tconductor::Int,\n\tdefault::Any\n)\n\nSearches for start value for a variable key of a component comp for conductor conductor, and if one does not exist, uses default\n\n\n\n\n\nfunction comp_start_value(\n\tcomp::Dict{String,<:Any},\n\tkeys::String,\n\tdefault::Any=0.0\n)\n\nSearches for start value for a variable key in order from a list of keys of a component comp, and if one does not exist, uses default. This is the conductor-agnostic version of comp_start_value.\n\n\n\n\n\nfunction comp_start_value(\n  comp::Dict,\n  key::String,\n  default::Any=0.0\n)\n\nSearches for start value for a variable key of a component comp, and if one does not exist, uses default. This is the conductor-agnostic version of comp_start_value.\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#Ref-Creation-Functions","page":"Base","title":"Ref Creation Functions","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"ref_\")","category":"page"},{"location":"reference/base.html#PowerModelsDistribution.ref_add_connected_components!-Tuple{Dict{Symbol}, Dict{String}}","page":"Base","title":"PowerModelsDistribution.ref_add_connected_components!","text":"ref_add_connected_components!(ref::Dict{Symbol,<:Any}, data::Dict{String,<:Any})\n\nRef-extension for opb problem type to add connected components ref\n\n\n\n\n\n","category":"method"},{"location":"reference/base.html#PowerModelsDistribution.ref_add_core!-Tuple{Dict{Symbol, Any}}","page":"Base","title":"PowerModelsDistribution.ref_add_core!","text":"ref_add_core!(ref::Dict{Symbol,Any})\n\nReturns a dict that stores commonly used pre-computed data from of the data dictionary, primarily for converting data-types, filtering out deactivated components, and storing system-wide values that need to be computed globally. Some of the common keys include:\n\n:off_angmin and :off_angmax (see calc_theta_delta_bounds(data)),\n:bus – the set {(i, bus) in ref[:bus] : bus[\"bus_type\"] != 4},\n:gen – the set {(i, gen) in ref[:gen] : gen[\"gen_status\"] == 1 && gen[\"gen_bus\"] in keys(ref[:bus])},\n:branch – the set of branches that are active in the network (based on the component status values),\n:arcs_branch_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:branch]],\n:arcs_branch_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:branch]],\n:arcs_branch – the set of arcs from both arcs_from and arcs_to,\n:arcs_switch_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:switch]],\n:arcs_switch_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:switch]],\n:arcs_switch – the set of arcs from both arcs_switch_from and arcs_switch_to,\n:arcs_transformer_from – the set [(i,b[\"f_bus\"],b[\"t_bus\"]) for (i,b) in ref[:transformer]],\n:arcs_transformer_to – the set [(i,b[\"t_bus\"],b[\"f_bus\"]) for (i,b) in ref[:transformer]],\n:arcs_transformer – the set of arcs from both arcs_transformer_from and arcs_transformer_to,\n:bus_arcs_branch – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_branch]]),\n:bus_arcs_transformer – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_transformer]]),\n:bus_arcs_switch – the mapping Dict(i => [(l,i,j) for (l,i,j) in ref[:arcs_switch]]),\n:buspairs – (see buspair_parameters(ref[:arcs_branch_from], ref[:branch], ref[:bus])),\n:bus_gens – the mapping Dict(i => [gen[\"gen_bus\"] for (i,gen) in ref[:gen]]).\n:bus_loads – the mapping Dict(i => [load[\"load_bus\"] for (i,load) in ref[:load]]).\n:bus_shunts – the mapping Dict(i => [shunt[\"shunt_bus\"] for (i,shunt) in ref[:shunt]]).\n\n\n\n\n\n","category":"method"},{"location":"reference/base.html#PowerModelsDistribution.ref_calc_storage_injection_bounds-Tuple{Any, Any}","page":"Base","title":"PowerModelsDistribution.ref_calc_storage_injection_bounds","text":"ref_calc_storage_injection_bounds(storage, buses)\n\nComputes storage bounds\n\n\n\n\n\n","category":"method"},{"location":"reference/base.html#InfrastructureModels-Extensions","page":"Base","title":"InfrastructureModels Extensions","text":"","category":"section"},{"location":"reference/base.html","page":"Base","title":"Base","text":"PowerModelsDistribution._IM.solution_preprocessor\nPowerModelsDistribution._IM.build_solution_values","category":"page"},{"location":"reference/base.html#InfrastructureModels.solution_preprocessor","page":"Base","title":"InfrastructureModels.solution_preprocessor","text":"Definition of the default solution preprocessor for PowerModelsDistribution\n\n\n\n\n\n","category":"function"},{"location":"reference/base.html#InfrastructureModels.build_solution_values","page":"Base","title":"InfrastructureModels.build_solution_values","text":"custom build_solution_values for multiconductor (vector) JuMP expressions\n\n\n\n\n\ncustom build_solution_values for multiconductor (vector) constants\n\n\n\n\n\ncustom build_solution_values for generic dense axis arrays\n\n\n\n\n\ncustom build_solution_values for multiconductor (vector) constants\n\n\n\n\n\n","category":"function"},{"location":"reference/variables.html#VariableAPI","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"reference/variables.html","page":"Variables","title":"Variables","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"variable\")","category":"page"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current","text":"function variable_mc_branch_current(\n\tpm::AbstractExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates total current variables :cr and :ci, series current variables :csr and :csi, and placeholder dictionaries for the terminal current flows :cr_bus and :ci_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractLPUBFModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current-Tuple{ReducedExplicitNeutralIVRModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current","text":"function variable_mc_branch_current(\n\tpm::ReducedExplicitNeutralIVRModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor branch-reduced IVR models with explicit neutrals, creates series current variables :csr and :csi, placeholder dictionaries for the total current :cr and :ci, and placeholder dictionaries for the terminal current flows :cr_bus and :ci_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_imaginary","text":"function variable_mc_branch_current_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch imaginary current variables :ci for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_real","text":"function variable_mc_branch_current_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch real current variables :cr for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_series_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_series_imaginary","text":"variable: csi[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_series_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_series_imaginary","text":"function variable_mc_branch_current_series_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch imaginary series current variables :csi for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_series_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_series_real","text":"variable: csr[l] for l in branch\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_current_series_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_current_series_real","text":"function variable_mc_branch_current_series_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch real series current variables :csr for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_flow_ne_reactive-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_flow_ne_reactive","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power-Tuple{AbstractExplicitNeutralACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power","text":"function variable_mc_branch_power(\n\tpm::AbstractExplicitNeutralACRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor ACR models with explicit neutrals, creates branch power variables :p and :q and placeholder dictionaries for the terminal power flows :p_bus and :q_bus.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power","text":"branch flow variables, delegated back to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power-Tuple{FBSUBFPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power","text":"variable_mc_branch_power(pm::FBSUBFPowerModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nBranch flow variables similar to LPUBFDiagModel\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power-Tuple{LPUBFDiagModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_imaginary","text":"variable: q[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_imaginary","text":"function variable_mc_branch_power_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch reactive power variables :q for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_real-Tuple{AbstractUnbalancedAPLossLessModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_real","text":"variable: p[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_branch_power_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_branch_power_real","text":"function variable_mc_branch_power_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates branch active power variables :p for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedACPModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedDCPModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{AbstractUnbalancedNFAModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"nothing to do, these models do not have complex voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{FBSUBFPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"variable_mc_bus_voltage(pm::FBSUBFPowerModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nVoltage variables are defined in rectangular coordinates similar to ACRUPowerModel. An initial operating point is specified for linearization.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{FOTPUPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"variable_mc_bus_voltage(pm::FOTPUPowerModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nVoltage variables are defined in polar coordinates similar to ACPUPowerModel. An initial operating point is specified for linearization.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{FOTRUPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"variable_mc_bus_voltage(pm::FOTRUPowerModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nVoltage variables are defined in rectangular coordinates similar to ACRUPowerModel. An initial operating point is specified for linearization similar to FBSUBFPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{LPUBFDiagModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage","text":"function variable_mc_bus_voltage(\n\tpm::RectangularVoltageExplicitNeutralModels;\n\tnw=nw_id_default,\n\tbounded::Bool=true,\n)\n\nCreates rectangular voltage variables :vr and :vi for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_angle-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_angle","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_imaginary","text":"function variable_mc_bus_voltage_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates imaginary voltage variables :vr for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_imaginary_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_imaginary_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_indicator","text":"Create variables for bus status\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_on_off","text":"on/off voltage magnitude variable\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_only-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_only","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr","text":"variable: w[i] >= 0 for i in `buses\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_magnitude_sqr_on_off","text":"voltage variable magnitude squared (relaxed form)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACPModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedDCPModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_on_off-Tuple{LPUBFDiagModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_on_off","text":"Create voltage variables for branch flow model\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_prod_hermitian-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_prod_hermitian","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_real","text":"function variable_mc_bus_voltage_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates real voltage variables :vr for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_bus_voltage_real_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_bus_voltage_real_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_capacitor_reactive_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_capacitor_reactive_power","text":"variable_mc_capacitor_reactive_power(pm::AbstractUnbalancedPowerModel; nw::Int=nw_id_default)\n\nCapacitor (with capcontrol) relaxed power variables for AbstractLPUBFModel (using McCormick envelopes)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_capacitor_switch_state-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_capacitor_switch_state","text":"variable_mc_capacitor_switch_state(pm::AbstractUnbalancedPowerModel, relax::Bool; nw::Int=nw_id_default, report::Bool=true)\n\nCapacitor (with capcontrol) switch state (open/close) variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_capcontrol-Tuple{AbstractLPUBFModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_capcontrol","text":"variable_mc_capcontrol(pm::AbstractLPUBFModel; nw::Int=nw_id_default, relax::Bool=false, report::Bool=true)\n\nCapacitor switching and relaxed power variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_capcontrol-Tuple{AbstractUnbalancedNFAModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_capcontrol","text":"nothing to do, these models do not have complex voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_capcontrol-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_capcontrol","text":"variable_mc_capcontrol(pm::AbstractUnbalancedPowerModel; nw::Int=nw_id_default, relax::Bool=false, report::Bool=true)\n\nCapacitor switching variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_gen_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_gen_indicator","text":"Create variables for generator status\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current","text":"For the matrix KCL formulation, the generator needs an explicit current variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current-Tuple{SOCUBFModels, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current","text":"variable_mc_generator_current(pm::SOCUBFModels, gen_ids::Vector{Int}; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nFor the SOC branch-flow formulation, the delta-generator needs an explicit current variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current_imaginary","text":"variable: cig[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current_imaginary","text":"function variable_mc_generator_current_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates generator imaginary current variables :cig for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current_real","text":"variable: crg[j] for j in gen\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_current_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_current_real","text":"function variable_mc_generator_current_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates generator real current variables :crg for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractExplicitNeutralACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"function variable_mc_generator_power(\n\tpm::AbstractExplicitNeutralACRModel;\n\tnw::Int=nw_id_default,\n)\n\nFor ACR models with explicit neutrals, creates generator power variables :pg and :qg, and placeholder dictionaries for terminal power flows :pg_bus and :qg_bus,\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractNLExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"function variable_mc_generator_power(\n\tpm::AbstractNLExplicitNeutralIVRModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true\n)\n\nFor IVR models with explicit neutrals, no power variables are required\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"function variable_mc_generator_power(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, creates generator power variables :pg and :qg\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"variable_mc_generator_power(pm::AbstractUBFModels; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nThe variable creation for generators in branch flow model. Delta generators always need an auxilary power variable (X) similar to delta loads. Wye generators however, don't need any variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"create variables for generators, delegate to PowerModels\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{SDPUBFKCLMXModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"For the matrix KCL formulation, the generator needs an explicit current and power variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power-Tuple{SOCUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power","text":"variable_mc_generator_power(pm::SOCUBFModels; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nThe variable creation for generators in SOC branch flow model. Delta generators always need an auxilary power variable (X) and current squared variable (CC) similar to delta loads. Wye generators however, don't need any variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_delta_aux-Tuple{AbstractUBFModels, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_delta_aux","text":"variable_mc_generator_power_delta_aux(pm::AbstractUBFModels, gen_ids::Vector{Int}; nw::Int=nw_id_default, eps::Real=0.1, bounded::Bool=true, report::Bool=true)\n\nCreates power matrix variable X for delta-connected generators similar to delta loads.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary","text":"function variable_mc_generator_power_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates generator reactive power variables :qg for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_imaginary_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_mx-Tuple{SDPUBFKCLMXModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_mx","text":"For the matrix KCL formulation, the generator needs an explicit power variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_real","text":"function variable_mc_generator_power_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates generator active power variables :pg for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_generator_power_real_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_generator_power_real_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current-Tuple{AbstractExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current","text":"function variable_mc_load_current(\n\tpm::AbstractExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates placeholder dictionaries for the load current :crd and :cid, and for the terminal current flows :crd_bus and :cid_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current","text":"function variable_mc_load_current(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, creates load current variables :crd and :cid, and placeholder dictionaries for the terminal current flows :crd_bus and :cid_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current-Tuple{AbstractUBFModels, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current","text":"All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current-Tuple{FBSUBFPowerModel, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current","text":"variable_mc_load_current(pm::FBSUBFPowerModel, load_ids::Vector{Int}; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nNo loads require a current variable. Delta loads are zero-order approximations and wye loads are first-order approximations around the initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current_imaginary","text":"function variable_mc_load_current_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates load imaginary current variables :cid for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_current_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_current_real","text":"function variable_mc_load_current_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates load real current variables :crd for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_indicator","text":"Create variables for demand status\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractExplicitNeutralACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"function variable_mc_load_power(\n\tpm::AbstractExplicitNeutralACRModel;\n\tnw=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor ACR models with explicit neutrals, creates placeholder dictionaries for load power expressions :pd and :qd\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractNLExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"function variable_mc_load_power(\n\tpm::AbstractNLExplicitNeutralIVRModel;\n\tnw=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor non-linear IVR models with explicit neutrals, creates placeholder dictionaries for the load power :pd and :qd, and for the terminal power flows :pd_bus and :qd_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"function variable_mc_load_power(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, creates load power variables :pd and :qd\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractUBFModels, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"These variables reflect the power consumed by the load, NOT the power injected into the bus nodes; these variables only coincide for wye-connected loads with a grounded neutral.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. Delta loads always need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions). Wye loads however, don't need any variables when the load is modelled as constant power or constant impedance. In all other cases (e.g. when a cone is used to constrain the power), variables need to be created.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"Create a dictionary with values of type Any for the load. Depending on the load model, this can be a parameter or a NLexpression. These will be inserted into KCL.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"Create a dictionary with values of type Any for the load. Depending on the load model, this can be a parameter or a NLexpression. These will be inserted into KCL.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power-Tuple{SDPUBFKCLMXModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power","text":"The variable creation for the loads is rather complicated because Expressions are used wherever possible instead of explicit variables. All loads need a current variable; for wye loads, this variable will be in the wye reference frame whilst for delta currents it will be in the delta reference frame. All loads need variables for the off-diagonals of the nodal power variables. In some cases, the diagonals elements can be created as Expressions. Delta loads only need a current variable and auxilary power variable (X), and all other load model variables are then linear transformations of these (linear Expressions).\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power_active-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power_active","text":"function variable_mc_load_power_active(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates load active power variables :pd for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power_bus-Tuple{SDPUBFKCLMXModel, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power_bus","text":"The bus qualifier denotes that this is the power withdrawn at the bus; Only for grounded wye-connected loads, this is the same as the power consumed by the multi-phase load. The off-diagonals only need to be created for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power_delta_aux-Tuple{AbstractUBFModels, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power_delta_aux","text":"Creates power matrix variable X for delta windings; this defines both the wye-side power Sy and the delta-side power Sd through the lin. transformations Sy = X.Td, Sd = Td.X with Td=[1 -1 0; 0 1 -1; -1 0 1]\n\nSee the paper by Zhao et al. for the first convex relaxation of delta transformations. @INPROCEEDINGS{zhaooptimal2017, \tauthor={C. Zhao, E. Dall'Anese and S. Low}, \tbooktitle={IREP 2017 Bulk Power Systems Dynamics and Control Symposium}, \ttitle={{Optimal Power Flow in Multiphase Radial Networks with Delta Connections}}, \tyear={2017}, \tmonth={},     url={https://www.nrel.gov/docs/fy18osti/67852.pdf} }\n\nSee upcoming paper for discussion of bounds. [reference added when accepted]\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power_delta_aux-Tuple{FBSUBFPowerModel, Vector{Int64}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power_delta_aux","text":"variable_mc_load_power_delta_aux(pm::FBSUBFPowerModel, load_ids::Vector{Int}; nw::Int=nw_id_default, eps::Real=0.1, bounded::Bool=true, report::Bool=true)\n\nAuxiliary variables are not required since delta loads are zero-order approximations calculated using the initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_load_power_reactive-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_load_power_reactive","text":"function variable_mc_load_power_reactive(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates load reactive power variables :qd for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_oltc_transformer_tap-Tuple{AbstractUnbalancedNFAModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_oltc_transformer_tap","text":"no voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_oltc_transformer_tap-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_oltc_transformer_tap","text":"Create tap variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_shunt_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_shunt_indicator","text":"Create variables for shunt status\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_slack_bus_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_slack_bus_power","text":"generates variables for both active and reactive slack at each bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_slack_bus_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_slack_bus_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_slack_bus_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_slack_bus_power_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_current-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_current","text":"do nothing by default but some formulations require this\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_current-Tuple{AbstractUnbalancedWConvexModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_current","text":"do nothing by default but some formulations require this\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_indicator","text":"Create variables for storage status\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power","text":"variables for modeling storage units, includes grid injection and internal variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_control_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_control_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_control_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_control_imaginary","text":"a reactive power slack variable that enables the storage device to inject or consume reactive power at its connecting bus, subject to the injection limits of the device.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_control_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_control_imaginary_on_off","text":"a reactive power slack variable that enables the storage device to inject or consume reactive power at its connecting bus, subject to the injection limits of the device.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_imaginary_on_off","text":"Create variables for reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_mi-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_mi","text":"variable_mc_storage_power_mi(pm::AbstractUnbalancedPowerModel; nw::Int=nw_id_default, relax::Bool=false, bounded::Bool=true, report::Bool=true)\n\nVariables for storage power (mixed-integer if relax==false)\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_mi_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_mi_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_on_off","text":"Create variables for active and reactive storage injection\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_storage_power_real_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_storage_power_real_on_off","text":"Create variables for active storage injection\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current-Tuple{AbstractExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current","text":"function variable_mc_switch_current(\n\tpm::AbstractExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor IVR models with explicit neutrals, creates switch current variables :crs and :cis, and placeholder dictionaries for the terminal current flows :crsw_bus and :cisw_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current_imaginary","text":"function variable_mc_switch_current_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor models with explicit neutrals, creates switch imaginary current variables :cisw for models with explicit neutrals.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_current_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_current_real","text":"function variable_mc_switch_current_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor models with explicit neutrals, creates switch real current variables :crsw for models with explicit neutrals.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power-Tuple{AbstractExplicitNeutralACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power","text":"function variable_mc_switch_power(\n\tpm::AbstractExplicitNeutralACRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor ACR models with explicit neutrals, creates switch power variables :p and :q and placeholder dictionaries for the terminal power flows :ps_bus and :qs_bus.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power","text":"matrix power variables for switches\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power-Tuple{LPUBFDiagModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power","text":"variable_mc_switch_power(pm::LPUBFDiagModel; nw::Int=nw_id_default, bounded::Bool=true, report::Bool=true)\n\nSwitch power variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power_imaginary","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power_imaginary","text":"function variable_mc_switch_power_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor models with explicit neutrals, creates switch reactive power variables :qsw for models with explicit neutrals. This is defined per arc, i.e. with a variable for the from-side and to-side power.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power_real","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_power_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_power_real","text":"function variable_mc_switch_power_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nFor models with explicit neutrals, creates switch active power variables :psw for models with explicit neutrals. This is defined per arc, i.e. with a variable for the from-side and to-side power.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_switch_state-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_switch_state","text":"switch state (open/close) variables\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current-Tuple{AbstractExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current","text":"function variable_mc_transformer_current(\n\tpm::AbstractExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor IVR models with explicit neutrals, create transformer current variables :crt and :cit, and placeholder dictionaries for the terminal current flows :crt_bus and :cit_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current-Tuple{AbstractUnbalancedIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current_imaginary","text":"variable: ci[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current_imaginary","text":"function variable_mc_transformer_current_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates transformer imaginary current variables :cit for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current_real","text":"variable: cr[l,i,j] for (l,i,j) in arcs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_current_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_current_real","text":"function variable_mc_transformer_current_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates transformer real current variables :crt for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractExplicitNeutralACRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"function variable_mc_transformer_power(\n\tpm::AbstractExplicitNeutralACRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor ACR models with explicit neutrals, creates transfomer power variables :pt and :qt, and placeholder dictionaries for transformer terminal power flows :pt_bus and :qt_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractNLExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"function variable_mc_transformer_power(\n\tpm::AbstractNLExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor non-linear IVR models with explicit neutrals, no power variables are required.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractQuadraticExplicitNeutralIVRModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"function variable_mc_transformer_power(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor quadratic IVR models with explicit neutrals, creates transformer power variables :pt and :qt\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractUBFModels}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"defines matrix transformer power variables for the unbalanced branch flow models\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"Creates variables for both active and reactive power flow at each transformer.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{FBSUBFPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"Creates variables for both active and reactive power flow at each transformer.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power-Tuple{LPUBFDiagModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power","text":"Creates variables for both active and reactive power flow at each transformer.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power_imaginary-Tuple{AbstractUnbalancedActivePowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power_imaginary","text":"apo models ignore reactive power flows\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power_imaginary-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power_imaginary","text":"Create variables for the reactive power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power_imaginary-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power_imaginary","text":"function variable_mc_transformer_power_imaginary(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates transformer reactive power variables :qt for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power_real-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power_real","text":"Create variables for the active power flowing into all transformer windings.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mc_transformer_power_real-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}}","page":"Variables","title":"PowerModelsDistribution.variable_mc_transformer_power_real","text":"function variable_mc_transformer_power_real(\n\tpm::ExplicitNeutralModels;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true\n)\n\nCreates transformer active power variables :pt for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_complex-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_complex","text":"variable_mx_complex(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}},\n    M::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    symm_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    name::Union{String, Tuple{String,String}}=\"\",\n    prefix::String=\"\"\n)::Tuple where T\n\nShorthand to create two real matrix variables, where the first is the real part and the second the imaginary part.\n\nIf the name argument is a String, it will be suffixed with 're' and  'im'. It is possible to  specify the names of the real and imaginary part directly as a Tuple as well (to achieve P and Q instead of Sre and Sim for example).\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_complex_with_diag-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_complex_with_diag","text":"variable_mx_complex_with_diag(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    symm_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    diag_re::Dict{T,<:Vector{<:Any}}=Dict([(i, zeros(length(N[i]))) for i in indices]),\n    diag_im::Dict{T,<:Vector{<:Any}}=Dict([(i, zeros(length(N[i]))) for i in indices]),\n    name::Union{String, Tuple{String,String}}=\"\",\n    prefix::String=\"\"\n)::Tuple where T\n\nSame as variable_mx_complex, but square and the diagonal of the matrix variables consists of the constants passed as the diagre and diagim argument. The diag argument is a dictionary of (index, 1d-array) pairs.\n\nUseful for power matrices with specified diagonals (constant power wye loads).\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_hermitian-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_hermitian","text":"variable_mx_hermitian(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    symm_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    sqrt_upper_bound::Union{Missing, Dict{T,<:Vector{<:Real}}}=missing,\n    sqrt_lower_bound::Union{Missing, Dict{T,<:Vector{<:Real}}}=missing,\n    set_lower_bound_diag_to_zero::Bool=false,\n    imag_set_diag_to_zero::Bool=true,\n    name::Union{String,Tuple{String,String}}=\"\",\n    prefix::String=\"\"\n)::Tuple where T\n\nReturns a pair of symmetric and skew-symmetric matrix variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_real-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_real","text":"variable_mx_real(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}},\n    M::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    name::String=\"\",\n    prefix::String=\"\"\n) where T\n\nThis function creates a set of real matrix variables of size NxM, indexed over the elements of the indices argument. The upper and lower bounds have to be specified, and are dictionaries with the indices as keys and the matrix bounds as values. The name and prefix arguments will be combined into the base_name argument for JuMP; the prefix will typically be the network number nw. Instead of sequentially creating the matrix variables, the elements of the matrices are created sequentially for all matrices at once. I.e., we loop over the elements, and not over the indices. This is needed so that the variable names printed by JuMP are in line with the current design.\n\nReturns a dictionary of (index, matrix  variable) pairs\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_real_skewsymmetric-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_real_skewsymmetric","text":"variable_mx_real_skewsymmetric(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    set_diag_to_zero::Bool=true,\n    name::String=\"\",\n    prefix::String=\"\"\n)::Dict where T\n\nSame as variable_mx_real, but adds skew-symmetry structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_real_symmetric-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_real_symmetric","text":"variable_mx_real_symmetric(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    name::String=\"\",\n    prefix::String=\"\"\n)::Dict where T\n\nSame as variable_mx_real, but adds symmetry structure\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_mx_real_with_diag-Union{Tuple{T}, Tuple{JuMP.Model, Vector{T}, Dict{T, Vector{Int64}}}} where T","page":"Variables","title":"PowerModelsDistribution.variable_mx_real_with_diag","text":"variable_mx_real_with_diag(\n    model::JuMP.Model,\n    indices::Array{T,1},\n    N::Dict{T,Vector{Int}};\n    upper_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    lower_bound::Union{Missing, Dict{T,<:Matrix{<:Real}}}=missing,\n    diag::Dict{T,<:Vector{<:Any}}=Dict([(i, fill(0, length(N[i]))) for i in indices]),\n    name::String=\"\",\n    prefix::String=\"\"\n) where T\n\nSame as variable_mx_real, but has to be square and the diagonal of the matrix variables consists of the elements passed as the diag argument. The diag argument is a dictionary of (index, 1d-array) pairs. Useful for power matrices with specified diagonals (constant power wye loads). If not specified, the diagonal elements are set to zero.\n\n\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_storage_charge-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_storage_charge","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_storage_complementary_indicator-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_storage_complementary_indicator","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_storage_discharge-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_storage_discharge","text":"\n\n\n\n","category":"method"},{"location":"reference/variables.html#PowerModelsDistribution.variable_storage_energy-Tuple{AbstractUnbalancedPowerModel}","page":"Variables","title":"PowerModelsDistribution.variable_storage_energy","text":"\n\n\n\n","category":"method"},{"location":"tutorials/The Engineering Model.html#tutorial-eng-model","page":"The Engineering Data Model","title":"Introduction to the Engineering Model","text":"","category":"section"},{"location":"tutorials/The Engineering Model.html","page":"The Engineering Data Model","title":"The Engineering Data Model","text":"Stub for The Engineering Model.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"manual/connections.html#Connecting-Components","page":"Connecting Components","title":"Connecting Components","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"One of the main goals of a network model, is specifying how constituent components are connected together. The patterns explained here, are equally applicable to the engineering and mathematical data model.","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"The available connections of each component connect to bus terminals. Take for example a bus with four terminals, terminals=[\"a\",\"b\",\"c\",\"n\"].","category":"page"},{"location":"manual/connections.html#Node-objects","page":"Connecting Components","title":"Node objects","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"Node objects always connect to a single bus (and perhaps also the universal ground, as can be the case for shunts). Therefore, they always have at least two key fields controlling the connectivity: bus and connections. Most node objects also have a configuration field, which affects the interpretation of the values supplied in connections. We will illustrate this for loads below.","category":"page"},{"location":"manual/connections.html#Loads","page":"Connecting Components","title":"Loads","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"A multi-phase load consists of several individual loads, the number of which is implied by the length of properties such as pd_nom, qd_nom etc. The table below illustrates how the length of the field connections and the value of the field configuration determines the layout of the load.","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"connections configuration==WYE configuration==DELTA\n2 (Image: 2 connections, wye) (Image: 2 connections, delta)\n3 (Image: 3 connections, wye) (Image: 3 connections, delta)\n4 (Image: 4 connections, wye) undefined","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"For example, we wish to connect a wye-connected load consisting of 2 individual loads (|connections|=3 and configuration=WYE) to our example bus with four available terminals. If we specify connections=[\"a\",\"c\",\"n\"], this leads to","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"(Image: loads connection example).","category":"page"},{"location":"manual/connections.html#Edge-objects","page":"Connecting Components","title":"Edge objects","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"Edge objects connect two buses (except for generic transformers, which can connect N buses). Therefore, they have the fields","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"f_bus and f_connections, specifying the from-side bus and how the object connects to it;\nt_bus and t_connections, specifying the same for the to-side.","category":"page"},{"location":"manual/connections.html#Lines","page":"Connecting Components","title":"Lines","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"A line can have a variable number of conductors, which is implied by the size of the fields rs, xs, g_fr, b_fr, g_to and b_to. The fields f_connections and t_connections should specify for each conductor, to which terminals it connects. The figure below illustrates this for a line with 2 conductors,","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"(Image: line connection example).","category":"page"},{"location":"manual/connections.html#Transformers","page":"Connecting Components","title":"Transformers","text":"","category":"section"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"Transformers also have a configuration field. For","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"generic transformers, this is specified per winding, and configuration is therefore a vector of ConnConfig enums (WYE or DELTA);\nAL2W transformers however are always two-winding, and the secondary is always wye-connected. Therefore, configuration is a scalar, specifying the configuration of the from-side winding.","category":"page"},{"location":"manual/connections.html","page":"Connecting Components","title":"Connecting Components","text":"Generic transformers have a field buses, a Vector containing the buses to which each winding connects respectively (these do not have to be unique; a split-phase transformer is typically represented by having two windings connect to the same bus). The AL2W transformer however, since it is always two-winding, follows the f_connections/t_connections pattern.","category":"page"},{"location":"reference/constants.html#ConstantsAPI","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"reference/constants.html","page":"Constants","title":"Constants","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:constant]\nFilter = t -> isa(t, Dict) || isa(t, Vector) || isa(t, String)","category":"page"},{"location":"reference/constants.html#PowerModelsDistribution.dimensionalize_math","page":"Constants","title":"PowerModelsDistribution.dimensionalize_math","text":"lists of scaling factors and what they apply to\n\n\n\n\n\n","category":"constant"},{"location":"reference/constants.html#PowerModelsDistribution.pmd_eng_asset_types","page":"Constants","title":"PowerModelsDistribution.pmd_eng_asset_types","text":"list of all eng asset types\n\n\n\n\n\n","category":"constant"},{"location":"reference/constants.html#PowerModelsDistribution.pmd_math_asset_types","page":"Constants","title":"PowerModelsDistribution.pmd_math_asset_types","text":"list of all math asset types\n\n\n\n\n\n","category":"constant"},{"location":"reference/constants.html#PowerModelsDistribution.pmd_math_component_status","page":"Constants","title":"PowerModelsDistribution.pmd_math_component_status","text":"maps component types to status parameters\n\n\n\n\n\n","category":"constant"},{"location":"reference/constants.html#PowerModelsDistribution.pmd_math_component_status_inactive","page":"Constants","title":"PowerModelsDistribution.pmd_math_component_status_inactive","text":"maps component types to inactive status values\n\n\n\n\n\n","category":"constant"},{"location":"reference/data_models.html#DataModelAPI","page":"Data Models","title":"Data Models","text":"","category":"section"},{"location":"reference/data_models.html#Parsers","page":"Data Models","title":"Parsers","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"parse_file\nparse_dss\nparse_opendss\nparse_json\nprint_file","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.parse_file","page":"Data Models","title":"PowerModelsDistribution.parse_file","text":"parse_file(\n    io::IO,\n    filetype::Union{AbstractString,Missing}=missing;\n    data_model::DataModel=ENGINEERING,\n    import_all::Bool=false,\n    bank_transformers::Bool=true,\n    transformations::Vector{<:Any}=[],\n    dss2eng_extensions::Vector{<:Function}=Function[],\n    eng2math_extensions::Vector{<:Function}=Function[],\n    eng2math_passthrough::Dict{String,Vector{String}}=Dict{String,Vector{String}}(),\n    make_pu_extensions::Vector{<:Function}=Function[],\n    make_pu::Bool=true,\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    kron_reduce::Bool=true,\n    phase_project::Bool=false,\n    time_series::String=\"daily\"\n)::Dict{String,Any}\n\nParses the IOStream of a file into a PowerModelsDistribution data structure\n\nIf filetype is missing, parse_file will attempt to detect the filetype, but this may fail, and it is advised to pass the filetype if it is known.\n\nIf data_model is MATHEMATICAL, the data model type will be automatically transformed via transform_data_model.\n\nFor explanation of import_all, bank_transformers, and time_series, see parse_opendss\n\nFor explanation of dss2eng_extensions, see parse_opendss\n\nFor explanation of kron_reduce, see apply_kron_reduction!\n\nFor explanation of phase_project, see apply_phase_projection!\n\nFor explanation of multinetwork and global_keys, see make_multinetwork and transform_data_model\n\nFor explanation of eng2math_extensions and eng2math_passthrough, see transform_data_model\n\nFor explanation of make_pu and make_pu_extensions, see make_per_unit!.\n\n\n\n\n\nparse_file(file::String; kwargs...)::Dict{String,Any}\n\nLoads file into IOStream and passes it onto parse_file\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.parse_dss","page":"Data Models","title":"PowerModelsDistribution.parse_dss","text":"\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.parse_opendss","page":"Data Models","title":"PowerModelsDistribution.parse_opendss","text":"parse_opendss(\n    io::IO;\n    import_all::Bool=false,\n    bank_transformers::Bool=true,\n    time_series::String=\"daily\",\n    dss2eng_extensions::Vector{<:Function}=Function[],\n)::Dict{String,Any}\n\nParses an IO, into raw dss dictionary via parse_dss, into the ENGINEERING DataModel\n\nSee parse_opendss\n\n\n\n\n\nparse_opendss(\n    data_dss::OpenDssDataModel;\n    import_all::Bool=false,\n    bank_transformers::Bool=true,\n    time_series::String=\"daily\",\n    dss2eng_extensions::Vector{<:Function}=Function[]\n)::Dict{String,Any}\n\nParses a raw dss data structure (dictionary), resulting from the parsing of a DSS file, into the ENGINEERING DataModel\n\nIf import_all is true, all raw dss properties will be included in the final dictionary under \"dss\".\n\nIf bank_transformers is true (default), transformers that are indicated to be part of a bank in dss will be combined into a single multiphase transformer.\n\ntime_series defines which property the time series will be taken from, \"daily\" or \"yearly\". More complex parsing of time series data should be performed with dss2eng_extensions.\n\ndss2eng_extensions\n\nIf a user wishes to parse additional components that are not yet natively supported by PowerModelsDistribution, dss2eng_extensions can be utilized. Custom user functions provided under dss2eng_extensions will be excuted after all built-in dss2eng transformations have been performed and transformers have been banked together (if bank_transformers==true). dss2eng_extension functions should have the following function signature:\n\ndss2eng_func!(data_eng, data_dss)\n\nwhere data_eng is a non-multinetwork ENGINEERING data model (i.e., time series data has not yet been expanded into a multinetwork structure), and data_dss is the raw dss data parsed by parse_dss.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.parse_json","page":"Data Models","title":"PowerModelsDistribution.parse_json","text":"parse_json(file::String)\n\nparses json files that were dumped via JSON.print (or PMD.print_file)\n\n\n\n\n\nparse_json(io::IO)\n\nparses json files that were dumped via JSON.print (or PMD.print_file)\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.print_file","page":"Data Models","title":"PowerModelsDistribution.print_file","text":"print_file(path::String, data::Dict{String,<:Any}; indent::Int=2)\n\nprints a PowerModelsDistribution data structure into a JSON file\n\n\n\n\n\nprint_file(io::IO, data::Dict{String,<:Any}; indent::Int=2)\n\nprints a PowerModelsDistribution data structure into a JSON file\n\n\n\n\n\nprint_file variant for InfrastructureModel that converts to Dict first\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#Constructors","page":"Data Models","title":"Constructors","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"components.jl\"]","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.Model","page":"Data Models","title":"PowerModelsDistribution.Model","text":"Model(model_type::DataModel)\n\nInstantiates a PowerModelsDistribution data model\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_bus!","page":"Data Models","title":"PowerModelsDistribution.add_bus!","text":"adds a bus to provided ENGINEERING model, see create_bus\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_generator!","page":"Data Models","title":"PowerModelsDistribution.add_generator!","text":"adds a generator to provided ENGINEERING model, see create_generator\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_line!","page":"Data Models","title":"PowerModelsDistribution.add_line!","text":"adds a line to provided ENGINEERING model, see create_line\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_linecode!","page":"Data Models","title":"PowerModelsDistribution.add_linecode!","text":"adds a linecode to provided ENGINEERING model, see create_linecode\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_load!","page":"Data Models","title":"PowerModelsDistribution.add_load!","text":"adds a load to provided ENGINEERING model, see create_load\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_object!-Tuple{Dict{String}, String, String, Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.add_object!","text":"add_object!(data_eng::Dict{String,<:Any}, obj_type::String, obj_id::String, object::Dict{String,<:Any})\n\nGeneric add function to add components to an engineering data model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.add_shunt!","page":"Data Models","title":"PowerModelsDistribution.add_shunt!","text":"adds a shunt to provided ENGINEERING model, see create_shunt\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_solar!","page":"Data Models","title":"PowerModelsDistribution.add_solar!","text":"adds a PV to provided ENGINEERING model, see create_solar\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_storage!","page":"Data Models","title":"PowerModelsDistribution.add_storage!","text":"adds a storage to provided ENGINEERING model, see create_storage\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_switch!","page":"Data Models","title":"PowerModelsDistribution.add_switch!","text":"adds a switch to provided ENGINEERING model, see create_switch\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_transformer!","page":"Data Models","title":"PowerModelsDistribution.add_transformer!","text":"adds a transformer to provided ENGINEERING model, see create_transformer and create_al2w_transformer\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_vbase_default!-Tuple{Dict{String}, String, Real}","page":"Data Models","title":"PowerModelsDistribution.add_vbase_default!","text":"add_vbase_default!(data_eng::Dict{String,<:Any}, bus::String, vbase::Real)\n\nFunction to add default vbase for a bus\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.add_voltage_source!","page":"Data Models","title":"PowerModelsDistribution.add_voltage_source!","text":"adds a voltage source to provided ENGINEERING model, see create_voltage_source\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.add_xfmrcode!","page":"Data Models","title":"PowerModelsDistribution.add_xfmrcode!","text":"adds a transformer code (xmfrcode) to provided ENGINEERING model, see create_xfmrcode\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.create_al2w_transformer-Tuple{String, String, Vector{Int64}, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_al2w_transformer","text":"create_al2w_transformer(\n    f_bus::String,\n    t_bus::String,\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    configuration::ConnConfig=WYE,\n    tm_nom::Real=1.0,\n    tm_lb::Union{Vector{<:Real},Missing}=missing,\n    tm_ub::Union{Vector{<:Real},Missing}=missing,\n    tm_set::Union{Vector{<:Real},Missing}=missing,\n    tm_fix::Union{Vector{Bool},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a aysmmetric lossless 2-winding transformer object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_bus-Tuple{}","page":"Data Models","title":"PowerModelsDistribution.create_bus","text":"create_bus(;\n    status::Status=ENABLED,\n    terminals::Vector{Int}=Int[],\n    grounded::Vector{Int}=Int[],\n    rg::Vector{<:Real}=Float64[],\n    xg::Vector{<:Real}=Float64[],\n    kwargs...\n)::Dict{String,Any}\n\ncreates a bus object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_generator-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_generator","text":"create_generator(\n    bus::String,\n    connections::Vector{Int};\n    configuration::ConnConfig=WYE,\n    pg::Union{Vector{<:Real},Missing}=missing,\n    qg::Union{Vector{<:Real},Missing}=missing,\n    vg::Union{Vector{<:Real},Missing}=missing,\n    pg_lb::Union{Vector{<:Real},Missing}=missing,\n    pg_ub::Union{Vector{<:Real},Missing}=missing,\n    qg_lb::Union{Vector{<:Real},Missing}=missing,\n    qg_ub::Union{Vector{<:Real},Missing}=missing,\n    control_mode::ControlMode=FREQUENCYDROOP,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a generator object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_line-Tuple{String, String, Vector{Int64}, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_line","text":"create_line(\n    f_bus::String,\n    t_bus::String,\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    linecode::Union{String,Missing}=missing,\n    rs::Union{Matrix{<:Real},Missing}=missing,\n    xs::Union{Matrix{<:Real},Missing}=missing,\n    g_fr::Union{Matrix{<:Real},Missing}=missing,\n    b_fr::Union{Matrix{<:Real},Missing}=missing,\n    g_to::Union{Matrix{<:Real},Missing}=missing,\n    b_to::Union{Matrix{<:Real},Missing}=missing,\n    length::Real=1.0,\n    cm_ub::Union{Vector{<:Real},Missing}=missing,\n    sm_ub::Union{Vector{<:Real},Missing}=missing,\n    vad_lb::Union{Vector{<:Real},Missing}=missing,\n    vad_ub::Union{Vector{<:Real},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\nCreate a line with some default values\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_linecode-Tuple{Matrix{<:Real}, Matrix{<:Real}}","page":"Data Models","title":"PowerModelsDistribution.create_linecode","text":"create_linecode(\n    rs::Matrix{<:Real},\n    xs::Matrix{<:Real};\n    g_fr::Union{Matrix{<:Real},Missing}=missing,\n    b_fr::Union{Matrix{<:Real},Missing}=missing,\n    g_to::Union{Matrix{<:Real},Missing}=missing,\n    b_to::Union{Matrix{<:Real},Missing}=missing,\n    cm_ub::Union{Vector{<:Real},Missing}=missing,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a linecode with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_load-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_load","text":"create_load(\n    bus::String,\n    connections::Vector{Int};\n    configuration::ConnConfig=WYE,\n    model::LoadModel=POWER,\n    pd_nom::Union{Vector{<:Real},Missing}=missing,\n    qd_nom::Union{Vector{<:Real},Missing}=missing,\n    vm_nom::Real=1.0,\n    dispatchable::Dispatchable=NO,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a load object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_shunt-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_shunt","text":"create_shunt(\n    bus::String,\n    connections::Vector{Int};\n    gs::Union{Matrix{<:Real},Missing}=missing,\n    bs::Union{Matrix{<:Real},Missing}=missing,\n    model::ShuntModel=GENERIC,\n    dispatchable::Dispatchable=NO,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a generic shunt with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_solar-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_solar","text":"create_solar(\n    bus::String,\n    connections::Vector{Int};\n    configuration::ConnConfig=WYE,\n    pg_lb::Union{Vector{<:Real},Missing}=missing,\n    pg_ub::Union{Vector{<:Real},Missing}=missing,\n    qg_lb::Union{Vector{<:Real},Missing}=missing,\n    qg_ub::Union{Vector{<:Real},Missing}=missing,\n    pg::Union{Vector{<:Real},Missing}=missing,\n    qg::Union{Vector{<:Real},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a solar generator with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_storage-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_storage","text":"create_storage(\n    configuration::ConnConfig=WYE,\n    energy::Real=0.0,\n    energy_ub::Real=0.0,\n    charge_ub::Real=0.0,\n    discharge_ub::Real=0.0,\n    sm_ub::Union{Real,Missing}=missing,\n    cm_ub::Union{Real,Missing}=missing,\n    charge_efficiency::Real=1.0,\n    discharge_efficiency::Real=1.0,\n    qs_lb::Union{Real,Missing}=missing,\n    qs_ub::Union{Real,Missing}=missing,\n    rs::Real=0.0,\n    xs::Real=0.0,\n    pex::Real=0.0,\n    qex::Real=0.0,\n    ps::Union{Real,Vector{<:Real},Missing}=missing,\n    qs::Union{Real,Vector{<:Real},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n    )::Dict{String,Any}\n\ncreates energy storage object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_switch-Tuple{String, String, Vector{Int64}, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_switch","text":"create_switch(\n    f_bus::String,\n    t_bus::String,\n    f_connections::Vector{Int},\n    t_connections::Vector{Int};\n    cm_ub::Union{Vector{<:Real},Missing}=missing,\n    sm_ub::Union{Vector{<:Real},Missing}=missing,\n    linecode::Union{String,Missing}=missing,\n    rs::Union{Matrix{<:Real},Missing}=missing,\n    xs::Union{Matrix{<:Real},Missing}=missing,\n    dispatchable::Dispatchable=NO,\n    state::SwitchState=CLOSED,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a switch object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_transformer-Tuple{Vector{String}, Vector{Vector{Int64}}}","page":"Data Models","title":"PowerModelsDistribution.create_transformer","text":"create_transformer(\n    bus::Vector{String},\n    connections::Vector{Vector{Int}};\n    configuration::Union{Vector{ConnConfig},Missing}=missing,\n    xfmrcode::Union{String,Missing}=missing,\n    xsc::Union{Vector{<:Real},Missing}=missing,\n    rw::Union{Vector{<:Real},Missing}=missing,\n    imag::Real=0.0,\n    noloadloss::Real=0.0,\n    tm_nom::Union{Vector{<:Real},Missing}=missing,\n    tm_lb::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_ub::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_set::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_fix::Union{Vector{Vector{Bool}},Missing}=missing,\n    polarity::Union{Vector{Int},Missing}=missing,\n    vm_nom::Union{Vector{<:Real},Missing}=missing,\n    sm_nom::Union{Vector{<:Real},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a n-winding transformer object with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_voltage_source-Tuple{String, Vector{Int64}}","page":"Data Models","title":"PowerModelsDistribution.create_voltage_source","text":"create_voltage_source(\n    bus::String,\n    connections::Vector{Int};\n    configuration::ConnConfig=WYE,\n    vm::Union{Vector{<:Real},Missing}=missing,\n    va::Union{Vector{<:Real},Missing}=missing,\n    vm_lb::Union{Vector{<:Real},Missing}=missing,\n    vm_ub::Union{Vector{<:Real},Missing}=missing,\n    rs::Union{Vector{<:Real},Missing}=missing,\n    xs::Union{Vector{<:Real},Missing}=missing,\n    status::Status=ENABLED,\n    kwargs...\n)::Dict{String,Any}\n\ncreates a voltage source with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.create_xfmrcode-Tuple{}","page":"Data Models","title":"PowerModelsDistribution.create_xfmrcode","text":"create_xfmrcode(;\n    configuration::Union{Vector{ConnConfig},Missing}=missing,\n    xsc::Union{Vector{<:Real},Missing}=missing,\n    rw::Union{Vector{<:Real},Missing}=missing,\n    tm_nom::Union{Vector{<:Real},Missing}=missing,\n    tm_lb::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_ub::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_set::Union{Vector{Vector{<:Real}},Missing}=missing,\n    tm_fix::Union{Vector{Vector{<:Real}},Missing}=missing,\n    kwargs...\n)::Dict{String,Any}\n\ncreates transformer code with some defaults\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.delete_component!-Tuple{Dict{String}, String, String}","page":"Data Models","title":"PowerModelsDistribution.delete_component!","text":"delete_component!(data_eng::Dict{String,<:Any}, component_type::String, component_id::String)\n\ndeletes a component from the engineering data model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#Model-Transformations","page":"Data Models","title":"Model Transformations","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"transform_data_model\ntransform_solution","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.transform_data_model","page":"Data Models","title":"PowerModelsDistribution.transform_data_model","text":"default transform_data_model ErrorException for unsupported combinations\n\n\n\n\n\n\n\n\n\ntransform_data_model(\n    data::Dict{String,<:Any};\n    kron_reduce::Bool=true,\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    eng2math_passthrough::Dict{String,<:Vector{<:String}}=Dict{String,Vector{String}}(),\n    eng2math_extensions::Vector{<:Function}=Function[],\n    make_pu::Bool=true,\n    make_pu_extensions::Vector{<:Function}=Function[],\n)::Dict{String,Any}\n\nTransforms a data model model between ENGINEERING (high-level) and MATHEMATICAL (low-level) DataModel.\n\nNotes\n\nKron reduction\n\nIf kron_reduce==true, apply_kron_reduction! and apply_phase_projection_delta! will be applied to the network data.\n\nPhase projection\n\nIf phase_project==true,  apply_phase_projection! will be applied to the network data.\n\nMultinetwork transformations\n\nIf multinetwork==true, the data model will be transformed into a multinetwork (e.g., time series) data structure using make_multinetwork before being transformed into a MATHEMATICAL DataModel.\n\nglobal_keys::Set{String} can be used to add custom top-level items to the multinetwork data structure, and will only be used in the context where multinetwork==true, and ignored otherwise.\n\nCustom eng2math transformations\n\nTo add custom transformations between ENGINEERING and MATHEMATICAL data models, eng2math_extensions::Vector{<:Function} can be utilized to pass user-created functions, which are expected to have the signature\n\neng2math_func!(data_math::Dict{String,Any}, data_eng::Dict{String,Any})\n\nwhere datamath and dataeng equivalent to single subnetworks in a multinetwork data structure, or a non-multinetwork data structure.\n\nThese functions are run after all built-in eng2math transformations have been performed.\n\nMapping back to ENGINEERING\n\nSee transform_solution\n\nPassthrough properties\n\nTo more simply pass through some properties in the built-in eng2math transformations, eng2math_passthrough::Dict{String,Vector{String}} can be used. For example, if in the ENGINEERING model, a property called z was added to switch objects, and a property at the root level of the dictionary was added called max_switch_actions, the user could pass the following dictionary to eng2math_passthrough:\n\nDict{String,Vector{String}}(\n    \"switch\" => String[\"z\"],\n    \"root\" => String[\"max_switch_actions\"],\n)\n\nThis will result in z showing up on the switch object in the MATHEMATICAL model. Passthrough properties will always land on the primary conversion object in the MATHEMATICAL model if that object gets converted to multiple object types, e.g., voltage_source with internal impedance will result in gen, bus, and branch objects in the MATHEMATICAL model, but passthrough properties will only land on gen.\n\nCustom per-unit transformations\n\nTo add additional per-unit transformations, a user can supply custom functions to make_pu_extensions::Vector{<:Function}, which will only be used if make_pu==true.\n\nSee make_per_unit! for further explanation.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.transform_solution","page":"Data Models","title":"PowerModelsDistribution.transform_solution","text":"transform_solution(\n    solution_math::Dict{String,<:Any},\n    data_math::Dict{String,<:Any};\n    map::Union{Vector{<:Dict{String,<:Any}},Missing}=missing,\n    make_si::Bool=true,\n    convert_rad2deg::Bool=true,\n    map_math2eng_extensions::Dict{String,<:Function}=Dict{String,Function}(),\n    make_si_extensions::Vector{<:Function}=Function[],\n    dimensionalize_math_extensions::Dict{String,<:Dict{String,<:Vector{<:String}}}=Dict{String,Dict{String,Vector{String}}}(),\n    )::Dict{String,Any}\n\nTransforms solutions from MATHEMATICAL data structures, back to an ENGINEERING data structure, given a map::Vector{Dict{String,Any}}, typically which was produced automatically by transform_data_model.\n\nNotes\n\nIf make_si==false, the solution will remain in per-unit, rather than being converted back to SI units (default). Angles will still be converted to degrees unless convert_rad2deg is utilized.\n\nIf convert_rad2deg==false, angles will remain in radians, instead of getting converted to degrees (default).\n\nCustom SI unit conversions\n\nSee solution_make_si\n\nCustom math2eng transformations\n\nTo enable automatically mapping back custom components solutions' to the ENGINEERING structure, eng2math_extensions added in transform_data_model should include a push of an item to the map dictionary in the data_math structure. These items should have the structure:\n\nDict{String,Any}(\n    \"from\" => String,\n    \"to\" => Union{String,Vector{String}},\n    \"unmap_function\" => PowerModelsDistribution.function!,\n    \"apply_to_subnetworks\" => Bool\n)\n\nImportant things to note are that\n\nThe function must be included in map_math2eng_extensions, which has the form:\njulia  Dict{String,Function}(      \"_map_math2eng_func!\" => _map_math2eng_func!,  )\n\"apply_to_subnetworks\" is optional, and is true by default.\n\"from\" needs to be a single object\n\"to\" can be multiple objects or a single object\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#Data-Transformations","page":"Data Models","title":"Data Transformations","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"transformations.jl\", \"reduce.jl\", \"kron.jl\", \"bounds.jl\"]","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.reduce_line_series!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.reduce_line_series!","text":"reduce_line_series!(eng::Dict{String,<:Any}; remove_original_lines::Bool=false)::Dict{String,<:Any}\n\nThis is a function to merge series of lines which only connect to buses with no other connections (i.e., string of buses with no loads, generators, transformers, etc.). This function will preserve the total length of the merged lines.\n\nIf remove_original_lines, the original lines and eliminated buses will be deleted from the data structure, otherwise the lines and buses will be DISABLED.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.apply_kron_reduction!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.apply_kron_reduction!","text":"apply_kron_reduction!(data::Dict{String,<:Any}; kr_phases::Union{Vector{Int},Vector{String}}=[1,2,3], kr_neutral::Union{Int,String}=4)\n\nApplies a Kron Reduction to the network, reducing out the kr_neutral, leaving only the kr_phases\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.kron_reduce_implicit_neutrals!-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.kron_reduce_implicit_neutrals!","text":"kron_reduce_implicit_neutrals!(data::Dict{String,Any})::Dict{String,Any}\n\nKron-reduce all (implied) neutral conductors of lines, switches and shunts, and remove any terminals which become unconnected. A line or switch conductor is considered as a neutral conductor if it is connected between two neutral terminals. A terminal is a neutral terminals if it is galvanically connected (i.e. through a line or switch) to a grounded terminal, or the neutral conductor of a wye-connected component.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.add_bus_absolute_vbounds!-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.add_bus_absolute_vbounds!","text":"add_bus_absolute_vbounds!(\n    data_eng::Dict{String,Any};\n    phase_lb_pu::Real=0.9,\n    phase_ub_pu::Real=1.1,\n    neutral_ub_pu::Real=0.3\n)::Dict{String,Any}\n\nAdds absolute (i.e. indivdially, not between a pair of terminals) voltage bounds through the 'vmlb' and 'vmub' property. Bounds are specified in per unit, and automatically converted to SI units by calculating the voltage base. If you change dataeng[\"settings\"][\"vbasesdefault\"], the data model transformation will however produce inconsistent bounds in per unit. Neutral terminals are automatically detected, and set to [0,phaseubpu*vbase].\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.add_bus_pn_pp_ng_vbounds!-Tuple{Dict{String, Any}, Vector, Any}","page":"Data Models","title":"PowerModelsDistribution.add_bus_pn_pp_ng_vbounds!","text":"add_bus_pn_pp_ng_vbounds!(data_eng::Dict{String,Any}, phase_terminals::Vector, neutral_terminal;\n    pn_lb_pu::Union{Real,Missing}=missing,\n    pn_ub_pu::Union{Real,Missing}=missing,\n    pp_lb_pu::Union{Real,Missing}=missing,\n    pp_ub_pu::Union{Real,Missing}=missing,\n    ng_ub_pu::Union{Real,Missing}=missing,\n)::Dict{String,Any}\n\nAdds symmetric phase-to-neutral and phase-to-phase voltage bounds when possible for each bus through the three-phase bus syntax.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.add_unit_vbounds!-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.add_unit_vbounds!","text":"add_unit_vbounds!(\n    data_eng::Dict{String,Any};\n    lb_pu::Real=0.9,\n    ub_pu::Real=1.1,\n    delta_multiplier::Real=sqrt(3),\n    unit_comp_types::Vector{<:AbstractString}=[\"load\", \"generator\", \"storage\", \"pv\"],\n)::Dict{String,Any}\n\nAdds voltage bounds to the bus terminals to which units are connected. 'Units' in this context are all oneport component types specified by the argument 'unitcomptypes'. Bounds are specified in per unit, and automatically converted to SI units by calculating the voltage base. If you change dataeng[\"settings\"][\"vbasesdefault\"], the data model transformation will however produce inconsistent bounds in per unit. The delta multiplier controls the scaling of bounds of delta-connected units.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.adjust_line_limits!-Tuple{Dict{String}, Real}","page":"Data Models","title":"PowerModelsDistribution.adjust_line_limits!","text":"adjust_line_limits!(data::Dict{String,<:Any}, mult::Real)\n\nMultiplies limits (sm_ub and/or cm_ub) on line objects (line, linecode, switch) by a multiplier mult\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.adjust_small_line_admittances!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.adjust_small_line_admittances!","text":"adjust_small_line_admittances!(data::Dict{String,<:Any}; min_admittance_val::Real=1e-2, replace_admittance_val::Real=0.0)\n\nReplaces admittances (gfr, gto, bfr, bto) on lines, linecodes, and switches lower than min_admittance_val with replace_admittance_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.adjust_small_line_impedances!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.adjust_small_line_impedances!","text":"adjust_small_line_impedances!(data::Dict{String,<:Any}; min_impedance_val::Real=1e-2, replace_impedance_val::Real=0.0)\n\nReplaces impedances (rs, xs) on lines, linecodes, and switches lower than min_impedance_val with replace_impedance_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.adjust_small_line_lengths!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.adjust_small_line_lengths!","text":"adjust_small_line_lengths!(data::Dict{String,<:Any}; min_length_val::Real=25.0, replace_length_val::Real=0.0)\n\nReplaces length on lines, switches lower than min_length_val with replace_length_val.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.adjust_transformer_limits!-Tuple{Dict{String}, Real}","page":"Data Models","title":"PowerModelsDistribution.adjust_transformer_limits!","text":"adjust_transformer_limits!(data::Dict{String,<:Any}, mult::Real)\n\nMultiplies limits (sm_ub and/or cm_ub) on transformer objects by a multiplier mult\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.apply_voltage_angle_difference_bounds!","page":"Data Models","title":"PowerModelsDistribution.apply_voltage_angle_difference_bounds!","text":"apply_voltage_angle_difference_bounds!(data::Dict{String,<:Any}, vad::Real=5.0)\n\nApplies voltage angle difference bound given by vad::Real in degrees (i.e., the allowed drift of angle from one end of a line to another) to all lines. By default, vad=5.0.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.apply_voltage_bounds!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.apply_voltage_bounds!","text":"apply_voltage_bounds!(data::Dict{String,<:Any}; vm_lb::Union{Real,Missing}=0.9, vm_ub::Union{Real,Missing}=1.1)\n\nadd voltage bounds to all buses based on per-unit upper (vm_ub) and lower (vm_lb), scaled by the bus's voltage based\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.remove_all_bounds!-Tuple{Any}","page":"Data Models","title":"PowerModelsDistribution.remove_all_bounds!","text":"remove_all_bounds!(data; exclude::Vector{<:String}=String[\"energy_ub\"], exclude_asset_type::Vector{String}=String[])\n\nRemoves all fields ending in 'ub' or 'lb' that aren't required by the math model. Properties can be excluded from this removal with exclude::Vector{String}\n\nWhole asset types (e.g., \"line\") can be excluded using the keyword argument exclude_asset_type::Vector{String}\n\nBy default, \"energy_ub\" is excluded from this removal, since it is a required properly on storage.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.remove_line_limits!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.remove_line_limits!","text":"remove_line_limits!(data::Dict{String,<:Any})\n\nRemoves fields cm_ub and sm_ub from lines, switches, and linecodes\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.remove_transformer_limits!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.remove_transformer_limits!","text":"remove_transformer_limits!(data_eng::Dict{String,<:Any})\n\nRemoves field sm_ub from transformers, xfmrcodes\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#Multinetworks","page":"Data Models","title":"Multinetworks","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"multinetwork.jl\"]","category":"page"},{"location":"reference/data_models.html#InfrastructureModels.ismultinetwork-Tuple{AbstractUnbalancedPowerModel}","page":"Data Models","title":"InfrastructureModels.ismultinetwork","text":"ismultinetwork(pm::AbstractUnbalancedPowerModel)\n\nChecks if power model struct is multinetwork\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.make_multinetwork-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.make_multinetwork","text":"make_multinetwork(\n    data::Dict{String,<:Any};\n    sparse::Bool=false,\n    time_elapsed::Union{Missing,Real,Vector{<:Real}}=missing,\n    global_keys::Set{String}=Set{String}(),\n)::Dict{String,Any}\n\nExpands a data structure into a multinetwork assuming there are time_series objects defined and assigned to some components.\n\nIf global_keys::Set{String} is defined, the global keys that will appear at the top-level of the data structure will include both the default global keys for that data model type, and additionally the keys defined in global_keys.\n\ntime_elapsed defines the time elapsed between subnetworkin hours, and can either be a single Real value, and thus a constant time between each time step, or a Vector with the same length as the number of time steps, or can be left missing, in which case time elapsed will attempt to be discovered, with a fallback on 1 hour default. Time elapsed can be adjusted later using set_time_elapsed!\n\nmake_multinetwork assumes all \"time\" values in \"timeseries\" objects to be in the same units, and will attempt to automatically sort multinetworks in the correct order. [`sortmultinetwork!`](@ref sort_multinetwork!) can be used after the fact to re-sort the subnetworks.\n\nsparse is currently unsupported, and is only included for future compatibility\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.set_time_elapsed!-Tuple{Dict{String}, Union{Real, Vector{<:Real}}}","page":"Data Models","title":"PowerModelsDistribution.set_time_elapsed!","text":"set_time_elapsed!(data::Dict{String,<:Any}, time_elapsed::Union{Real,Vector{<:Real}})\n\nHelper function to set time_elapsed in multinetwork data, given either some constant value of time elapsed or a Vector of time elapsed values of the same length as the number of subnetworks.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.sort_multinetwork!-Tuple{Dict{String}, Vector}","page":"Data Models","title":"PowerModelsDistribution.sort_multinetwork!","text":"sort_multinetwork!(mn_data::Dict{String,<:Any}, times::Vector{<:Any})\n\nHelper function to manually sort your multinetwork frames, given some pre-sorted vector of time values times\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#Unit-conversions","page":"Data Models","title":"Unit conversions","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"units.jl\"]","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.calc_eng_voltage_bases-Tuple{Dict{String}, Dict{String, <:Real}}","page":"Data Models","title":"PowerModelsDistribution.calc_eng_voltage_bases","text":"calc_eng_voltage_bases(data_model::Dict{String,<:Any}, vbase_sources::Dict{String,<:Real})::Tuple{Dict,Dict}\n\nCalculates voltage bases for each voltage zone for buses and branches for a ENGINEERING data_model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.calc_math_voltage_bases-Tuple{Dict{String}, Dict{String, <:Real}}","page":"Data Models","title":"PowerModelsDistribution.calc_math_voltage_bases","text":"calc_math_voltage_bases(data_model::Dict{String,<:Any}, vbase_sources::Dict{String,<:Real})::Tuple{Dict,Dict}\n\nCalculates voltage bases for each voltage zone for buses and branches for a MATHEMATICAL data_model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.calc_voltage_bases-Tuple{Dict{String}, Dict{String, <:Real}}","page":"Data Models","title":"PowerModelsDistribution.calc_voltage_bases","text":"calc_voltage_bases(data_model::Dict{String,<:Any}, vbase_sources::Dict{String,<:Real})::Tuple{Dict,Dict}\n\nCalculates voltage bases for each voltage zone for buses and branches, attempting to automatically decern the data_model type\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.discover_eng_voltage_zones-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.discover_eng_voltage_zones","text":"discover_voltage_zones(data_model::Dict{String,<:Any})::Dict{Int,Set{Any}}\n\nfinds voltage zones by walking through the network and analyzing the transformers for a ENGINEERING data_model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.discover_math_voltage_zones-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.discover_math_voltage_zones","text":"discover_math_voltage_zones(data_model::Dict{String,<:Any})::Dict{Int,Set{Any}}\n\nfinds voltage zones by walking through the network and analyzing the transformers for a MATHEMATICAL data_model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.discover_voltage_zones-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.discover_voltage_zones","text":"discover_voltage_zones(data_model::Dict{String,<:Any})::Dict{Int,Set{Any}}\n\nfinds voltage zones by walking through the network and analyzing the transformers, attempting to decern the type of data_model\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.make_per_unit!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.make_per_unit!","text":"make_per_unit!(\n    data::Dict{String,Any};\n    vbases::Union{Missing,Dict{String,Real}}=missing,\n    sbase::Union{Missing,Real}=missing,\n    make_pu_extensions::Vector{<:Function}=Function[],\n)\n\nConverts units of properties to per-unit from SI units\n\nmake_pu_extensions\n\nTo add additional per-unit transformations, a user can supply custom functions to make_pu_extensions::Vector{<:Function}, which will only be used if make_pu==true.\n\nFor example, if custom properties are added to the MATHEMATICAL model via eng2math_passthrough or eng2math_extensions, those properties will not be converted to per-unit by default, and custom rules will need to be added with functions with the signature:\n\nrebase_pu_func!(\n    nw::Dict{String,Any},\n    data_math::Dict{String,Any},\n    bus_vbase::Dict{String,Real},\n    line_vbase::Dict{String,Real},\n    sbase::Real,\n    sbase_old::Real,\n    voltage_scale_factor::Real\n)\n\nwhere,\n\nnw is equivalent to the a single subnetwork in a multinetwork data structure (which may be the same as data_math, in the case of a single network),\ndata_math is the complete data structure with the global keys,\nbus_vbase is a dictionary of the voltage bases of each bus indexed by their MATHEMATICAL model indices,\nline_vbase is a dictionary of the voltage bases of each branch indexed by their MATHEMATICAL model indices,\nsbase is the new power base,\nsbase_old is the power base the data structure started with, and\nvoltage_scale_factor is the scaling factor for voltage.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.solution_make_si-Tuple{Dict{String}, Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.solution_make_si","text":"solution_make_si(\n    solution::Dict{String,<:Any},\n    math_model::Dict{String,<:Any};\n    mult_sbase::Bool=true,\n    mult_vbase::Bool=true,\n    mult_ibase::Bool=true,\n    convert_rad2deg::Bool=true,\n    make_si_extensions::Vector{<:Function}=Function[],\n    dimensionalize_math_extensions::Dict{String,<:Dict{String,<:Vector{<:String}}}=Dict{String,Dict{String,Vector{String}}}()\n)::Dict{String,Any}\n\nTransforms solution dictionaries solution from per-unit back to SI units, requiring the original MATHEMATICAL model math_model to perform the transformation.\n\nIf mult_sbase is false, sbase variables will not be multiplied, thus remaining in per-unit\n\nIf mult_vbase is false, vbase variables will not be multiplied, thus remaining in per-unit\n\nIf mult_ibase is false, ibase variables will not be multiplied, thus remaining in per-unit\n\nIf convert_rad2deg is false, angle variables will not be multiplied, thus remaining in radians\n\nCustom SI unit conversions\n\nTo convert custom properties not part of formulations already included within PowerModelsDistribution, users will need to either specify multiplicative factors via dimensionalize_math_extensions, or pass user functions via make_si_extensions.\n\nThe latter case requires functions with the signature\n\nmake_si_func!(nw_solution, nw_data, solution, data)\n\nwhere nw_solution and nw_data are equivalent to a single subnetwork of a multinetwork structure of the solution and the data in the MATHEMATICAL format, respectively, and solution and data are the full data structures, which may be equivalent to nw_solution and nw_data, if the data is not multinetwork. Changes should be applied to nw_solution in the user functions.\n\nFor dimensionalize_math_extensions, it is possible to easily extended the SI conversions if they are straightforward conversions using vbase, sbase, ibase, or rad2deg. For example, if a custom variable cfr is added to branches, and is scaled by ibase, the following dictionary would be passed:\n\nDict{String,Dict{String,Vector{String}}}(\n    \"branch\" => Dict{String,Vector{String}}(\n        \"ibase\" => String[\"cfr\"]\n    )\n)\n\nwhich would ensure that this variable gets converted back to SI units upon transformation.\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#Data-Checking-and-Correction","page":"Data Models","title":"Data Checking and Correction","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"correct\") || startswith(string(t), \"check\")","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.check_branch_loops-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.check_branch_loops","text":"check_branch_loops(data::Dict{String,<:Any})\n\nchecks that all branches connect two distinct buses\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.check_connectivity-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.check_connectivity","text":"check_connectivity(data::Dict{String,<:Any})\n\nchecks that all buses are unique and other components link to valid buses\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.check_cost_models-Tuple{AbstractUnbalancedPowerModel}","page":"Data Models","title":"PowerModelsDistribution.check_cost_models","text":"check_cost_models(pm::AbstractUnbalancedPowerModel)\n\nChecks that all cost models are of the same type\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.check_eng_data_model-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.check_eng_data_model","text":"check_eng_data_model(data_eng::Dict{String,<:Any})\n\nchecks the engineering data model for correct data types, required fields and applies default checks\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.check_gen_cost_models-Tuple{AbstractUnbalancedPowerModel}","page":"Data Models","title":"PowerModelsDistribution.check_gen_cost_models","text":"check_gen_cost_models(pm::AbstractUnbalancedPowerModel)\n\nChecks that all generator cost models are of the same type\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_branch_directions!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.correct_branch_directions!","text":"correct_branch_directions!(data::Dict{String,<:Any})\n\nchecks that all parallel branches have the same orientation\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_bus_types!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.correct_bus_types!","text":"checks bus types are suitable for a power flow study, if not, fixes them. the primary checks are that all type 2 buses (i.e., PV) have a connected and active generator and there is a single type 3 bus (i.e., slack bus) with an active connected generator. assumes that the network is a single connected component\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_cost_functions!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.correct_cost_functions!","text":"correct_cost_functions!(data::Dict{String,<:Any})\n\nthrows warnings if cost functions are malformed\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_json_import!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.correct_json_import!","text":"correct_json_import!(data::Dict{String,<:Any})\n\nhelper function to correct data imported from json\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_mc_thermal_limits!-Tuple{Dict{String}}","page":"Data Models","title":"PowerModelsDistribution.correct_mc_thermal_limits!","text":"correct_mc_thermal_limits!(data::Dict{String,<:Any})\n\nchecks that each branch has non-negative thermal ratings and removes zero thermal ratings\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_mc_voltage_angle_differences!","page":"Data Models","title":"PowerModelsDistribution.correct_mc_voltage_angle_differences!","text":"correct_mc_voltage_angle_differences!(data::Dict{String,<:Any}, default_pad::Real=deg2rad(10.0))\n\nchecks that voltage angle differences are within 90 deg., if not tightens to a default of 10deg (adjustable)\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.correct_network_data!-Tuple{Dict{String, Any}}","page":"Data Models","title":"PowerModelsDistribution.correct_network_data!","text":"correct_network_data!(data::Dict{String,Any}; make_pu::Bool=true, make_pu_extensions::Vector{<:Function}=Function[])\n\nMakes corrections and performs checks on network data structure in either ENGINEERING or MATHEMATICAL formats, and converts to per-unit if data a is MATHEMATICAL data model.\n\nIf make_pu is false, converting to per-unit will be skipped.\n\nCustom per-unit transformations\n\nSee make_per_unit!\n\n\n\n\n\n","category":"method"},{"location":"reference/data_models.html#Statistics-and-Analysis","page":"Data Models","title":"Statistics and Analysis","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"count_nodes\ncount_active_connections\ncount_active_terminals\nidentify_load_blocks\nidentify_blocks\nidentify_islands\ncalc_connected_components","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.count_nodes","page":"Data Models","title":"PowerModelsDistribution.count_nodes","text":"count_nodes(data::Dict{String,<:Any})::Int\n\nCounts number of nodes in network\n\n\n\n\n\ncount_nodes(data::Dict{String,<:Any})::Int\n\nCounts number of nodes in network\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.count_active_connections","page":"Data Models","title":"PowerModelsDistribution.count_active_connections","text":"count_active_connections(data::Dict{String,<:Any})\n\nCounts active ungrounded connections on edge components\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.count_active_terminals","page":"Data Models","title":"PowerModelsDistribution.count_active_terminals","text":"count_active_terminals(data::Dict{String,<:Any}; count_grounded::Bool=false)\n\nCounts active ungrounded terminals on buses\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.identify_load_blocks","page":"Data Models","title":"PowerModelsDistribution.identify_load_blocks","text":"identify_load_blocks(data::Dict{String,<:Any})\n\ncomputes load blocks based on switch locations\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.identify_blocks","page":"Data Models","title":"PowerModelsDistribution.identify_blocks","text":"identify_blocks(data::Dict{String,<:Any})\n\ncomputes connected blocks currently in the model based on switch states\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.identify_islands","page":"Data Models","title":"PowerModelsDistribution.identify_islands","text":"identify_islands(data::Dict{String,<:Any})\n\ncomputes component islands base only on edge and bus status\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.calc_connected_components","page":"Data Models","title":"PowerModelsDistribution.calc_connected_components","text":"calc_connected_components(data::Dict{String,<:Any}; edges::Union{Missing, Vector{<:String}}=missing, type::Union{Missing,String}=missing, check_enabled::Bool=true)::Set\n\ncomputes the connected components of the network graph returns a set of sets of bus ids, each set is a connected component\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#Helper-Functions","page":"Data Models","title":"Helper Functions","text":"","category":"section"},{"location":"reference/data_models.html","page":"Data Models","title":"Data Models","text":"iseng\nismath\nfind_conductor_ids!\nmake_multiconductor!\ndiscover_voltage_zones\ncalc_voltage_bases\napply_pmd!\nget_pmd_data","category":"page"},{"location":"reference/data_models.html#PowerModelsDistribution.iseng","page":"Data Models","title":"PowerModelsDistribution.iseng","text":"iseng(data::Dict{String,Any})\n\nHelper function to check is data is ENGINEERING model\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.ismath","page":"Data Models","title":"PowerModelsDistribution.ismath","text":"ismath(data::Dict{String,Any})\n\nHelper function to check if data is MATHEMATICAL model\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.find_conductor_ids!","page":"Data Models","title":"PowerModelsDistribution.find_conductor_ids!","text":"find_conductor_ids!(data::Dict{String,Any})\n\nFinds all conductor ids and puts a list of them under \"conductor_ids\" at the root level\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.make_multiconductor!","page":"Data Models","title":"PowerModelsDistribution.make_multiconductor!","text":"make_multiconductor!(data::Dict{String,<:Any}, conductors::Int)\n\nThis function is not meant to be an officially supported method for creating reasonable multiconductor data sets.\n\nHacky helper function to transform single-conductor network data, from, e.g., matpower/psse, into multi-conductor data.\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.discover_voltage_zones","page":"Data Models","title":"PowerModelsDistribution.discover_voltage_zones","text":"discover_voltage_zones(data_model::Dict{String,<:Any})::Dict{Int,Set{Any}}\n\nfinds voltage zones by walking through the network and analyzing the transformers, attempting to decern the type of data_model\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.calc_voltage_bases","page":"Data Models","title":"PowerModelsDistribution.calc_voltage_bases","text":"calc_voltage_bases(data_model::Dict{String,<:Any}, vbase_sources::Dict{String,<:Real})::Tuple{Dict,Dict}\n\nCalculates voltage bases for each voltage zone for buses and branches, attempting to automatically decern the data_model type\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.apply_pmd!","page":"Data Models","title":"PowerModelsDistribution.apply_pmd!","text":"apply_pmd!(func!::Function, data::Dict{String,<:Any}; apply_to_subnetworks::Bool=true, kwargs...)\n\nVersion of apply_pmd! that supports kwargs\n\n\n\n\n\napply_pmd!(func!::Function, data::Dict{String,<:Any}; apply_to_subnetworks::Bool=true, kwargs...)\n\nVersion of apply_pmd! that supports kwargs\n\n\n\n\n\napply_pmd!(func!::Function, data::Dict{String,<:Any}, args...; apply_to_subnetworks::Bool=true, kwargs...)\n\nVersion of apply_pmd! that supports args and kwargs\n\n\n\n\n\napply_pmd!(func!::Function, ref::Dict{Symbol,<:Any}, data::Dict{String,<:Any}; apply_to_subnetworks::Bool=true)\n\nPowerModelsDistribution wrapper for the InfrastructureModels apply! function\n\n\n\n\n\n","category":"function"},{"location":"reference/data_models.html#PowerModelsDistribution.get_pmd_data","page":"Data Models","title":"PowerModelsDistribution.get_pmd_data","text":"get_pmd_data(data::Dict{String, <:Any})\n\nConvenience function for retrieving the power-distribution-only portion of network data\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#ObjectiveAPI","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"reference/objectives.html","page":"Objectives","title":"Objectives","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"objective\")","category":"page"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_max_load_setpoint-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_max_load_setpoint","text":"objective_mc_max_load_setpoint(pm::AbstractUnbalancedPowerModel)\n\nmaximum loadability objective (continuous load shed) with storage\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost","text":"objective_mc_min_fuel_cost(pm::AbstractUnbalancedPowerModel)\n\nStandard fuel cost minimization objective\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial","text":"objective_mc_min_fuel_cost_polynomial(pm::AbstractUnbalancedPowerModel)\n\nFuel cost minimization objective for polynomial terms\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_polynomial_switch","text":"objective_mc_min_fuel_cost_polynomial_switch(pm::AbstractUnbalancedPowerModel)\n\nFuel cost minimization objective for polynomial terms including switches\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost_pwl-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_pwl","text":"objective_mc_min_fuel_cost_pwl(pm::AbstractUnbalancedPowerModel)\n\nFuel cost minimization objective with piecewise linear terms\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost_pwl_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_pwl_switch","text":"objective_mc_min_fuel_cost_pwl_switch(pm::AbstractUnbalancedPowerModel)\n\nFuel cost minimization objective with piecewise linear terms including switches\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_fuel_cost_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_fuel_cost_switch","text":"objective_mc_min_fuel_cost_switch(pm::AbstractUnbalancedPowerModel)\n\nStandard fuel cost minimization objective including switches\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_load_setpoint_delta-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta","text":"objective_mc_min_load_setpoint_delta(pm::AbstractUnbalancedPowerModel)\n\nminimum load delta objective with storage\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple","text":"objective_mc_min_load_setpoint_delta_simple(pm::AbstractUnbalancedPowerModel)\n\nsimplified minimum load delta objective (continuous load shed)\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple_switch-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_load_setpoint_delta_simple_switch","text":"objective_mc_min_load_setpoint_delta_simple_switch(pm::AbstractUnbalancedPowerModel)\n\nsimplified minimum load delta objective (continuous load shed) including a switch state term\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_min_slack_bus_power-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_min_slack_bus_power","text":"objective_mc_min_slack_bus_power(pm::AbstractUnbalancedPowerModel)\n\na quadratic penalty for bus power slack variables\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_mc_variable_pg_cost-Tuple{AbstractUnbalancedPowerModel}","page":"Objectives","title":"PowerModelsDistribution.objective_mc_variable_pg_cost","text":"objective_mc_variable_pg_cost(pm::AbstractUnbalancedPowerModel)\n\nadds pg_cost variables and constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#PowerModelsDistribution.objective_variable_pg_cost-Tuple{AbstractUnbalancedIVRModel}","page":"Objectives","title":"PowerModelsDistribution.objective_variable_pg_cost","text":"objective_variable_pg_cost(pm::AbstractUnbalancedIVRModel)\n\nadds pg_cost variables and constraints for the IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/objectives.html#Helpers","page":"Objectives","title":"Helpers","text":"","category":"section"},{"location":"reference/objectives.html","page":"Objectives","title":"Objectives","text":"calc_max_cost_index\nsimplify_cost_terms!\ncalc_pwl_points\ncalc_cost_pwl_lines\nstandardize_cost_terms!","category":"page"},{"location":"reference/objectives.html#PowerModelsDistribution.calc_max_cost_index","page":"Objectives","title":"PowerModelsDistribution.calc_max_cost_index","text":"calc_max_cost_index(data::Dict{String,<:Any})\n\nComputes maximum cost index\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#PowerModelsDistribution.simplify_cost_terms!","page":"Objectives","title":"PowerModelsDistribution.simplify_cost_terms!","text":"simplify_cost_terms!(data::Dict{String,<:Any})\n\ntrims zeros from higher order cost terms\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#PowerModelsDistribution.calc_pwl_points","page":"Objectives","title":"PowerModelsDistribution.calc_pwl_points","text":"calc_pwl_points(ncost::Int, cost::Vector{<:Real}, pmin::Real, pmax::Real; tolerance=1e-2)\n\ncleans up raw pwl cost points in preparation for building a mathamatical model. The key mathematical properties,\n\nthe first and last points are strickly outside of the pmin-to-pmax range\npmin and pmax occur in the first and last line segments.\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#PowerModelsDistribution.calc_cost_pwl_lines","page":"Objectives","title":"PowerModelsDistribution.calc_cost_pwl_lines","text":"calc_cost_pwl_lines(comp_dict::Dict)\n\ncompute lines in m and b from from pwl cost models data is a list of components. Can be run on data or ref data structures\n\n\n\n\n\n","category":"function"},{"location":"reference/objectives.html#PowerModelsDistribution.standardize_cost_terms!","page":"Objectives","title":"PowerModelsDistribution.standardize_cost_terms!","text":"standardize_cost_terms!(data::Dict{String,<:Any}; order=-1)\n\nensures all polynomial costs functions have the same number of terms\n\n\n\n\n\n","category":"function"},{"location":"tutorials/basic.html#Using-PowerModelsDistribution","page":"Basics","title":"Using PowerModelsDistribution","text":"","category":"section"},{"location":"tutorials/basic.html","page":"Basics","title":"Basics","text":"Stub for basic.jl Pluto Notebook in the examples/ folder. The Pluto Notebook will get rendered and inserted as an iframe at documentation build time.","category":"page"},{"location":"manual/quickguide.html#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsDistribution is installed, Ipopt is installed, and a network data file (e.g., \"case3_unbalanced.dss\" in the package folder under ./test/data) has been acquired, an unbalanced AC Optimal Power Flow can be executed with,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using PowerModelsDistribution\nusing Ipopt\n\nsolve_mc_opf(\"case3_unbalanced.dss\", ACPUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html#Parsing-files","page":"Getting Started","title":"Parsing files","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"To parse an OpenDSS file into PowerModelsDistribution's default ENGINEERING format, use the parse_file command","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"eng = parse_file(\"case3_unbalanced.dss\")","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"To examine the MATHEMATICAL model it is possible to transform the data model using the transform_data_model command, but this step is not necessary to run a problem.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"math = transform_data_model(eng)","category":"page"},{"location":"manual/quickguide.html#Getting-Results","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The run commands in PowerModelsDistribution return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = solve_mc_opf(eng, ACPUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can pass the file path string directly:","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = solve_mc_opf(\"case3_unbalanced.dss\", ACPUPowerModel, Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"ACPUPowerModel indicates an unbalanced (i.e., multiconductor) AC formulation in polar coordinates.  This more generic solve_mc_opf allows one to solve an OPF problem with any power network formulation in PowerModelsDistribution.  For example, the SDPUBFPowerModel relaxation of unbalanced Optimal Power Flow (branch flow model) can be run with,","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"using SCS\nsolve_mc_opf(eng, SDPUBFPowerModel, with_optimizer(SCS.Optimizer))","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Note that you have to use a SDP-capable solver, e.g., the open-source solver SCS, to solve SDP models.","category":"page"},{"location":"manual/quickguide.html#Inspecting-the-Formulation","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a solve_mc_opf call into separate model building and solving steps.  This allows inspection of the JuMP model created by PowerModelsDistribution for the AC-OPF problem. Note that the MATHEMATICAL model must be passed to instantiate_mc_model, so the data model must either be transformed with transform_data_model or parsed directly to a MATHEMATICAL model using the data_model keyword argument:","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"math = parse_file(\"case3_unbalanced.dss\"; data_model=MATHEMATICAL)\npm = instantiate_model(math, ACPUPowerModel, build_mc_opf; ref_extensions=[ref_add_arcs_trans!])\nprint(pm.model)\noptimize_model!(pm, optimizer=Ipopt.Optimizer)","category":"page"},{"location":"manual/quickguide.html#Providing-a-Warm-Start","page":"Getting Started","title":"Providing a Warm Start","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"To reduce the number of solver iterations, it might be useful to provide a (good) initial value to some or all optimization variables. To do so, it is sufficient to assign a value or vector (depending on the dimensions of the variable) in the data dictionary, under the key $(variablename)_start. The example below shows how to do it for the vm and va variables.","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"math = parse_file(\"case3_unbalanced.dss\"; data_model=MATHEMATICAL)\nmath[\"bus\"][\"2\"][\"vm_start\"] = [0.9959, 0.9959, 0.9959]\nmath[\"bus\"][\"2\"][\"va_start\"] = [0.00, -2.0944, 2.0944]","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Providing a bad initial value might result in the opposite effect: longer calculation times or convergence issues, so the start value assignment should be done attentively. If no initial value is provided, a flat start is assigned by default. The default initial value of each variable is indicated in the function where the variable is defined, as the last argument of the comp_start_value function. In the case of vm, this is 1.0, as shown below:","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"vm = var(pm, nw)[:vm] = Dict(i => JuMP.@variable(pm.model,\n        [c in 1:ncnds], base_name=\"$(nw)_vm_$(i)\",\n        start = comp_start_value(ref(pm, nw, :bus, i), \"vm_start\", c, 1.0)\n    ) for i in ids(pm, nw, :bus)\n)","category":"page"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"Finally, it should be noted that if va_start and vm_start are present in a data dictionary which is passed to the ACR or IVR formulation, these are converted to their rectangular equivalents and used as vr_start and vi_start.","category":"page"},{"location":"manual/quickguide.html#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"manual/quickguide.html","page":"Getting Started","title":"Getting Started","text":"More examples of working with the engineering data model can be found in the /examples folder of the PowerModelsDistribution.jl repository. These are Pluto Notebooks; instructions for running them can be found in the Pluto documentation.","category":"page"},{"location":"reference/formulations.html#FormulationAPI","page":"Formulations","title":"Formulations","text":"","category":"section"},{"location":"reference/formulations.html#Abstract-Models","page":"Formulations","title":"Abstract Models","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"AbstractUnbalancedPowerModel\nAbstractUnbalancedActivePowerModel\nAbstractUnbalancedConicModel\nAbstractUBFModel\nAbstractUBFAModel\nAbstractUBFQPModel\nAbstractUBFConicModel\nAbstractUnbalancedACPModel\nAbstractUnbalancedACRModel\nAbstractUnbalancedIVRModel\nAbstractUnbalancedDCPModel\nAbstractUnbalancedNFAModel\nAbstractNLPUBFModel\nAbstractConicUBFModel\nSDPUBFModel\nSDPUBFKCLMXModel\nSOCNLPUBFModel\nSOCConicUBFModel\nAbstractLPUBFModel\nLPUBFDiagModel\nLinDist3FlowModel","category":"page"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedPowerModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedPowerModel","text":"root of the power formulation type hierarchy\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedActivePowerModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedActivePowerModel","text":"active power only models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedConicModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedConicModel","text":"variants that target conic solvers\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUBFModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUBFModel","text":"for branch flow models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUBFAModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUBFAModel","text":"for variants of branch flow models that target LP solvers\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUBFQPModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUBFQPModel","text":"for variants of branch flow models that target QP or NLP solvers\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUBFConicModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUBFConicModel","text":"for variants of branch flow models that target conic solvers\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedACPModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedACPModel","text":"Abstract Power-Voltage (Polar) formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedACRModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedACRModel","text":"Abstract Power-Voltage (Rectangular) formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedIVRModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedIVRModel","text":"Abstract Current-Voltage (Rectangular) formulation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedDCPModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedDCPModel","text":"\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedNFAModel","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedNFAModel","text":"\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractNLPUBFModel","page":"Formulations","title":"PowerModelsDistribution.AbstractNLPUBFModel","text":"Base Abstract NLP Unbalanced Branch Flow Model\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractConicUBFModel","page":"Formulations","title":"PowerModelsDistribution.AbstractConicUBFModel","text":"Base Abstract Conic Unbalanced Branch Flow Model\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SDPUBFModel","page":"Formulations","title":"PowerModelsDistribution.SDPUBFModel","text":"SDP BFM per Gan and Low 2014, PSCC\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SDPUBFKCLMXModel","page":"Formulations","title":"PowerModelsDistribution.SDPUBFKCLMXModel","text":"SDP BFM with KCL as matrix equation, Geth 2020 (under review)\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SOCNLPUBFModel","page":"Formulations","title":"PowerModelsDistribution.SOCNLPUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as an QCP\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SOCConicUBFModel","page":"Formulations","title":"PowerModelsDistribution.SOCConicUBFModel","text":"SOC relaxation of SDPUBFModel per Kim, Kojima, & Yamashita 2003, cast as a SOC\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractLPUBFModel","page":"Formulations","title":"PowerModelsDistribution.AbstractLPUBFModel","text":"Abstract form for linear unbalanced power flow models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.LPUBFDiagModel","page":"Formulations","title":"PowerModelsDistribution.LPUBFDiagModel","text":"LinDist3Flow per Arnold et al. (2016), using vector variables for power, voltage and current\n\nD. B. Arnold, M. Sankur, R. Dobbe, K. Brady, D. S. Callaway and A. Von Meier, \"Optimal dispatch of reactive power for voltage regulation and balancing in unbalanced distribution systems,\" 2016 IEEE Power and Energy Society General Meeting (PESGM), Boston, MA, 2016, pp. 1-5, doi: 10.1109/PESGM.2016.7741261.\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.LinDist3FlowModel","page":"Formulations","title":"PowerModelsDistribution.LinDist3FlowModel","text":"More popular name for the LPUBFDiagModel\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#Abstract-Union-Models","page":"Formulations","title":"Abstract Union Models","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"AbstractUBFModels\nKCLMXModels\nSOCUBFModels\nAbstractUnbalancedWModels\nAbstractUnbalancedWConvexModels\nAbstractUnbalancedAPLossLessModels\nAbstractUnbalancedPolarModels","category":"page"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUBFModels","page":"Formulations","title":"PowerModelsDistribution.AbstractUBFModels","text":"Collection of Unbalanced Branch Flow Models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.KCLMXModels","page":"Formulations","title":"PowerModelsDistribution.KCLMXModels","text":"Collection of Semidefinite Models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SOCUBFModels","page":"Formulations","title":"PowerModelsDistribution.SOCUBFModels","text":"Collection of Second Order Cone Models\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedWModels","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedWModels","text":"Collection of AbstractUnbalancedPowerModels that include W relaxations\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedWConvexModels","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedWConvexModels","text":"Collection of convex AbstractUnbalancedPowerModels that include W relaxations\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedAPLossLessModels","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedAPLossLessModels","text":"Collection of AbstractUnbalancedPowerModels that are Active Power only and Lossless\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.AbstractUnbalancedPolarModels","page":"Formulations","title":"PowerModelsDistribution.AbstractUnbalancedPolarModels","text":"Collection of AbstractUnbalancedPowerModels that have a Polar representation\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#Power-Models","page":"Formulations","title":"Power Models","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"ACPUPowerModel\nACRUPowerModel\nIVRUPowerModel\nDCPUPowerModel\nNFAUPowerModel\nLPUBFDiagPowerModel\nLinDist3FlowPowerModel\nSDPUBFPowerModel\nSDPUBFKCLMXPowerModel\nSOCNLPUBFPowerModel\nSOCConicUBFPowerModel","category":"page"},{"location":"reference/formulations.html#PowerModelsDistribution.ACPUPowerModel","page":"Formulations","title":"PowerModelsDistribution.ACPUPowerModel","text":"AC power flow Model with polar bus voltage variables. The seminal reference of AC OPF:\n\n@article{carpentier1962contribution,\n  title={Contribution to the economic dispatch problem},\n  author={Carpentier, J},\n  journal={Bulletin de la Societe Francoise des Electriciens},\n  volume={3},\n  number={8},\n  pages={431--447},\n  year={1962}\n}\n\nHistory and discussion:\n\n@techreport{Cain2012,\n  author = {Cain, Mary B and {O' Neill}, Richard P and Castillo, Anya},\n  title = {{History of optimal power flow and Models}},\n  year = {2012}\n  pages = {1--36},\n  url = {https://www.ferc.gov/industries/electric/indus-act/market-planning/opf-papers/acopf-1-history-Model-testing.pdf}\n}\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.ACRUPowerModel","page":"Formulations","title":"PowerModelsDistribution.ACRUPowerModel","text":"AC power flow Model with rectangular bus voltage variables.\n\n@techreport{Cain2012,\n  author = {Cain, Mary B and {O' Neill}, Richard P and Castillo, Anya},\n  pages = {1--36},\n  title = {{History of optimal power flow and Models}},\n  url = {https://www.ferc.gov/industries/electric/indus-act/market-planning/opf-papers/acopf-1-history-Model-testing.pdf}\n  year = {2012}\n}\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.IVRUPowerModel","page":"Formulations","title":"PowerModelsDistribution.IVRUPowerModel","text":"Current voltage formulation of AC OPF. The formulation uses rectangular coordinates for both current and voltage.  Note that, even though Kirchhoff's circuit laws are linear in current and voltage, this formulation is nonconvex due to constants power loads/generators and apparent power limits.\n\n@techreport{ONeill2012,\n    author = {{O' Neill}, Richard P and Castillo, Anya and Cain, Mary B},\n    pages = {1--18},\n    title = {{The IV formulation and linear approximations of the ac optimal power flow problem}},\n    year = {2012}\n}\n\nApplicable to problem formulations with _iv in the name.\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.DCPUPowerModel","page":"Formulations","title":"PowerModelsDistribution.DCPUPowerModel","text":"Linearized 'DC' power flow Model with polar voltage variables. This model is a basic linear active-power-only approximation, which uses branch susceptance values br_b = -br_x / (br_x^2 + br_x^2) for determining the network phase angles.  Furthermore, transformer parameters such as tap ratios and phase shifts are not considered as part of this model. It is important to note that it is also common for active-power-only approximations to use 1/br_x for determining the network phase angles, instead of the br_b value that is used here.  Small discrepancies in solutions should be expected when comparing active-power-only approximations across multiple tools.\n\n@ARTICLE{4956966,\n  author={B. Stott and J. Jardim and O. Alsac},\n  journal={IEEE Transactions on Power Systems},\n  title={DC Power Flow Revisited},\n  year={2009},\n  month={Aug},\n  volume={24},\n  number={3},\n  pages={1290-1300},\n  doi={10.1109/TPWRS.2009.2021235},\n  ISSN={0885-8950}\n}\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.NFAUPowerModel","page":"Formulations","title":"PowerModelsDistribution.NFAUPowerModel","text":"The an active power only network flow approximation, also known as the transportation model.\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.LPUBFDiagPowerModel","page":"Formulations","title":"PowerModelsDistribution.LPUBFDiagPowerModel","text":"default LP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.LinDist3FlowPowerModel","page":"Formulations","title":"PowerModelsDistribution.LinDist3FlowPowerModel","text":"More popular name for the LPUBFDiagPowerModel\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SDPUBFPowerModel","page":"Formulations","title":"PowerModelsDistribution.SDPUBFPowerModel","text":"default SDP unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SDPUBFKCLMXPowerModel","page":"Formulations","title":"PowerModelsDistribution.SDPUBFKCLMXPowerModel","text":"default SDP unbalanced DistFlow with matrix KCL constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SOCNLPUBFPowerModel","page":"Formulations","title":"PowerModelsDistribution.SOCNLPUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#PowerModelsDistribution.SOCConicUBFPowerModel","page":"Formulations","title":"PowerModelsDistribution.SOCConicUBFPowerModel","text":"default SOC unbalanced DistFlow constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/formulations.html#Mutable-Stuct-creator","page":"Formulations","title":"Mutable Stuct creator","text":"","category":"section"},{"location":"reference/formulations.html","page":"Formulations","title":"Formulations","text":"@pmd_fields","category":"page"},{"location":"reference/formulations.html#PowerModelsDistribution.@pmd_fields","page":"Formulations","title":"PowerModelsDistribution.@pmd_fields","text":"a macro for adding the base PowerModels fields to a type definition\n\n\n\n\n\n","category":"macro"},{"location":"manual/eng2math.html#Engineering-to-Mathematical-Data-Model-Mapping","page":"Conversion to Mathematical Model","title":"Engineering to Mathematical Data Model Mapping","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"In this document we define the mapping from the engineering data model down to the mathematical data model for each physical component.","category":"page"},{"location":"manual/eng2math.html#bus-objects","page":"Conversion to Mathematical Model","title":"bus objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Buses are parsed into bus and potentially shunt objects.","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"The mathematical bus model contains only lossless connections to ground. All other connections to grounds are converted to equivalent shunts at that bus. For example, take a bus defined as","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"bus_eng = Dict(\"grounded\"=>[4, 5], \"rg\"=>[1.0, 0.0], \"xg\"=>[2.0, 0.0],...).","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"This is equivalent to a shunt g+im*b = 1/(1.0+im*2.0) connected to terminal 4, and a lossless grounding at terminal 5 (since rg[2]==xg[2]==0.0). This is mapped to","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"bus_math = Dict(\"grounded\"=>[5], ...),","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"shunt_math = Dict(\"connections\"=>[4], \"b\"=>[b], \"g\"=>[g]...).","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"This simplifies the mathematical model, as the modeller does no longer have to consider lossy groundings explicitly.","category":"page"},{"location":"manual/eng2math.html#line-objects","page":"Conversion to Mathematical Model","title":"line objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Lines are parsed into branch objects with transformer=false","category":"page"},{"location":"manual/eng2math.html#switch-objects","page":"Conversion to Mathematical Model","title":"switch objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Switches are parsed into switch. If there are loss parameters provided (i.e. rs and/or xs) then a virtual branch and virtual bus are created to model the impedance","category":"page"},{"location":"manual/eng2math.html#transformer-objects","page":"Conversion to Mathematical Model","title":"transformer objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"A transformer can have N windings, each with its own configuration (delta or wye are supported). This is decomposed to a network of N lossless, two-winding transformers which connect to an internal loss model. The to-winding is always wye-connected, hence we refer to these transformers as 'asymmetric'.","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"The internal loss model is a function of","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"the winding resistance rw,\nthe short-circuit reactance xsc,\nthe no-load loss properties noloadloss (resistive) and magnetizing current imag (reactive).","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"If all of these are non-zero, this leads to an internal loss model consisting of N virtual buses, (N^2+N)/2 virtual branches, and 1 shunt. These virtual buses and branches are automatically merged and simplified whenever possible; e.g., when all these loss parameters are zero, this simplifies to a single virtual bus, to which all two-winding transformers connect.","category":"page"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"For more detail, please refer to [upcoming technical paper]. #TODO add link to paper","category":"page"},{"location":"manual/eng2math.html#shunt-objects","page":"Conversion to Mathematical Model","title":"shunt objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Shunts are parsed directly into shunt objects.","category":"page"},{"location":"manual/eng2math.html#load-objects","page":"Conversion to Mathematical Model","title":"load objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Loads are parsed into load objects. See the discussion under the Load Model documentation on the sidebar, for a detailed discussion of the various load models.","category":"page"},{"location":"manual/eng2math.html#generator-objects","page":"Conversion to Mathematical Model","title":"generator objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Generators are parsed into gen objects.","category":"page"},{"location":"manual/eng2math.html#solar-objects","page":"Conversion to Mathematical Model","title":"solar objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Solar objects (photovoltaic systems) are parsed into gen objects.","category":"page"},{"location":"manual/eng2math.html#voltage_source-objects","page":"Conversion to Mathematical Model","title":"voltage_source objects","text":"","category":"section"},{"location":"manual/eng2math.html","page":"Conversion to Mathematical Model","title":"Conversion to Mathematical Model","text":"Voltage sources are parsed into gen objects. If loss parameters are specified (i.e. rs and/or xs) then a virtual bus and branch are created to model the internal impedance.","category":"page"},{"location":"manual/eng-data-model.html#Engineering-Data-Model","page":"Engineering Data Model","title":"Engineering Data Model","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"This document describes the ENGINEERING data model type in PowerModelsDistribution, which is transformed at runtime, or at the user's direction into a MATHEMATICAL data model for optimization.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"In this document,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"nphases refers to the number of non-neutral, non-ground active phases connected to a component,\nnconductors refers to all active conductors connected to a component, i.e. length(connections), and\nnwindings refers to the number of windings of a transformer.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The data structure is in the following format","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Dict{String,Any}(\n    \"data_model\" => ENGINEERING,\n    \"component_type\" => Dict{String,Dict{String,Any}}(\n        id => Dict{String,Any}(\n            \"parameter\" => value,\n            ...\n        ),\n        ...\n    ),\n    ...\n)","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Valid component types are those that are documented in the sections below. Each component object is identified by an id, which must be a string (id <: String), but id does not appear inside of the component dictionary, and only appears as keys to the component dictionaries under each component type. Note that this requirement is so that data structures will be JSON serializable.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Each edge or node component (i.e. all those that are not data objects or buses), is expected to have status fields to specify whether the component is active or disabled, bus or f_bus and t_bus, to specify the buses that are connected to the component, and connections or f_connections and t_connections, to specify the terminals of the buses that are actively connected in an ordered list. NOTE: terminals, connections, f_connections, and t_connections, must be type Vector{Int}.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Parameter values on components are expected to be specified in SI units by default (where applicable) in the engineering data model. Relevant expected units are noted in the sections below. It is possible for the user to select universal scalar factors for power and voltages. For example, if power_scalar_factor and voltage_scalar_factor are their default values given below, where units is listed as watt or var, real units will be kW and kvar. Where units are listed as volt, real units will be kV (multiplied by vm_nom, where that value exists).","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The Used column describes the situations where certain parameters are used. \"always\" indicates those values are used in all contexts, opf, mld, or any other problem name abbreviation indicate they are used in particular for those problems. \"solution\" indicates that those parameters are outputs from the solvers. \"multinetwork\" indicates these values are only used to build multinetwork problems.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Those parameters that have a default may be omitted by the user from the data model, they will be populated by the specified default values.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Components that support \"codes\", such as lines, switches, and transformers, behave such that any property on said object that conflicts with a value in the code will override the value given in the code object. This is noted on each object where this is relevant.","category":"page"},{"location":"manual/eng-data-model.html#Root-Level-Properties","page":"Engineering Data Model","title":"Root-Level Properties","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"At the root level of the data structure, the following fields can be found.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Used Description\nname  String  Case name\ndata_model ENGINEERING DataModel always ENGINEERING, MATHEMATICAL, or DSS. Type of the data model (this document describes data_model==ENGINEERING)\nsettings Dict() Dict{String,<:Any} always Base settings for the data model, see Settings section below for details","category":"page"},{"location":"manual/eng-data-model.html#Settings-(settings)","page":"Engineering Data Model","title":"Settings (settings)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"At the root-level of the data model a settings dictionary object is expected, containing the following fields.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nvoltage_scale_factor 1e3 Real  always Scalar multiplier for voltage values\npower_scale_factor 1e3 Real  always Scalar multiplier for power values\nvbases_default  Dict{String,Real}  always Instruction to set the vbase at a number of buses for non-dimensionalization\nsbase_default  Real  always Instruction to set the power base for non-dimensionalization\nbase_frequency 60.0 Real Hz always Frequency base, i.e. the base frequency of the whole circuit","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The parameters voltage_scale_factor and power_scale_factordetermine the base for all voltage and power parameters in this data model. For example,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"voltage_scale_factor=1E3 and vm_nom=4.0: vm_nom is 4.0 kV/4.0E3 V,\npower_scale_factor=1E6 and pd_nom=2.0: pd_nom is 2.0 MW/2.0E6 W,\npower_scale_factor=1E6 and qd_nom=5.0: qd_nom is 5.0 MVAr/5.0E6 VAr,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"where the mentioned fields vm_nom, pd_nom and qd_nom are sample voltage and power variables which are defined later.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"On the other hand,vbase_default and sbase_default provide default values for a 'per unit' conversion; these do not affect the interpretation of the parameters in this model, like the scale factors do. Note that vbase_default is a Dict{Any,Real}, with pairs of bus ids and voltage magnitude levels, since in per unit conversion, the voltage base can change from bus to bus. The power base is the same everywhere, and therefore sbase_default has a single value.","category":"page"},{"location":"manual/eng-data-model.html#Buses-(bus)","page":"Engineering Data Model","title":"Buses (bus)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The data model below allows us to include buses of arbitrary many terminals (i.e., more than the usual four). This would be useful for","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"underground lines with multiple neutrals which are not joined at every bus;\ndistribution lines that carry several conventional lines in parallel (see for example the quad circuits in NEVTestCase).","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nterminals [1,2,3,4] Vector{Int}  always Terminals for which the bus has active connections\nvm_lb  Vector{Real} volt opf Minimum conductor-to-ground voltage magnitude, size=nphases\nvm_ub  Vector{Real} volt opf Maximum conductor-to-ground voltage magnitude, size=nphases\nvm_pair_ub  Vector{Tuple}  opf e.g. [(1,2,210)] means |U1-U2|>210\nvm_pair_lb  Vector{Tuple}  opf e.g. [(1,2,230)] means |U1-U2|<230\ngrounded [] Vector{Int}  always List of terminals which are grounded\nrg [] Vector{Real}  always Resistance of each defined grounding, size=length(grounded)\nxg [] Vector{Real}  always Reactance of each defined grounding, size=length(grounded)\nvm  Vector{Real} volt always Voltage magnitude at bus. If set, voltage magnitude at bus is fixed\nva  Vector{Real} degree always Voltage angle at bus. If set, voltage angle at bus is fixed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Each terminal c of the bus has an associated complex voltage phasor v[c]. There are two types of voltage magnitude bounds. The first type bounds the voltage magnitude of each v[c] individually,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"lb <= |v[c]| <= ub","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"However, especially in four-wire networks, bounds are more naturally imposed on the difference of two terminal voltages instead, e.g. for terminals c and d,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"lb <= |v[c]-v[d]| <= ub","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"This is why we introduce the fields vm_pair_lb and vm_pair_ub, which define bounds for pairs of terminals,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"forall\n(c,d,lb) in vm_pair_lb: |v[c]-v[d]| >= lb\nforall\n(c,d,ub) in vm_pair_ub: |v[c]-v[d]| <= ub","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Finally, we give an example of how grounding impedances should be entered. If terminal 4 is grounded through an impedance Z=1+j2, we write","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"grounded=[4], rg=[1], xg=[2]","category":"page"},{"location":"manual/eng-data-model.html#Special-Case:-three-phase-bus","page":"Engineering Data Model","title":"Special Case: three-phase bus","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"For three-phase buses, instead of specifying bounds explicitly for each pair of windings, often we want to specify 'phase-to-phase', 'phase-to-neutral' and 'neutral-to-ground' bounds. This can be done conveniently with a number of additional fields. First, phases is a list of the phase terminals, and neutral designates a single terminal to be the neutral.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The bounds vm_pn_lb and vm_pn_ub specify the same lower and upper bound for the magnitude of the difference of each phase terminal and the neutral.\nThe bounds vm_pp_lb and vm_pp_ub specify the same lower and upper bound for the magnitude of the difference of all phase terminals.\nvm_ng_ub specifies an upper bound for the neutral terminal, the lower bound is typically zero.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"If all of these are specified, these bounds also imply valid bounds for the individual voltage magnitudes,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"forall\nc in phases: vm_pn_lb - vm_ng_ub <= |v[c]| <= vm_pn_ub + vm_ng_ub\n0 <= |v[neutral]|<= vm_ng_ub","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Instead of defining the bounds directly, they can be specified through an associated voltage zone.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nphases  Vector{Int}  always Identifies the terminal that represents the neutral conductor\nneutral  Int  always Identifies the terminal that represents the neutral conductor\nvm_pn_lb  Real  opf Minimum phase-to-neutral voltage magnitude for all phases\nvm_pn_ub  Real  opf Maximum phase-to-neutral voltage magnitude for all phases\nvm_pp_lb  Real  opf Minimum phase-to-phase voltage magnitude for all phases\nvm_pp_ub  Real  opf Maximum phase-to-phase voltage magnitude for all phases\nvm_ng_ub  Real  opf Maximum neutral-to-ground voltage magnitude","category":"page"},{"location":"manual/eng-data-model.html#Edge-Objects","page":"Engineering Data Model","title":"Edge Objects","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"These objects represent edges on the power grid and therefore require f_bus and t_bus (or buses in the case of transformers), and f_connections and t_connections (or connections in the case of transformers).","category":"page"},{"location":"manual/eng-data-model.html#Lines-(line)","page":"Engineering Data Model","title":"Lines (line)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"This is a pi-model branch. When a linecode is given, and any of rs, xs, b_fr, b_to, g_fr or g_to are specified, any of those overwrite the values on the linecode.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  String  always id of from-side bus connection\nt_bus  String  always id of to-side bus connection\nf_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the f_bus it connects\nt_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the t_bus it connects\nlinecode  String  always id of an associated linecode\nrs  Matrix{Real} ohm/meter always Series resistance matrix, size=(nconductors,nconductors)\nxs  Matrix{Real} ohm/meter always Series reactance matrix, size=(nconductors,nconductors)\ng_fr zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always From-side conductance, size=(nconductors,nconductors)\nb_fr zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always From-side susceptance, size=(nconductors,nconductors)\ng_to zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always To-side conductance, size=(nconductors,nconductors)\nb_to zeros(nconductors, nconductors) Matrix{Real} siemens/meter/Hz always To-side susceptance, size=(nconductors,nconductors)\nlength 1.0 Real meter always Length of the line\ncm_ub  Vector{Real} amp opf Symmetrically applicable current rating, size=nconductors\nsm_ub  Vector{Real} watt opf Symmetrically applicable power rating, size=nconductors\nvad_lb  Vector{Real} degree opf Voltage angle difference lower bound\nvad_ub  Vector{Real} degree opf Voltage angle difference upper bound\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"manual/eng-data-model.html#Transformers-(transformer)","page":"Engineering Data Model","title":"Transformers (transformer)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"These are n-winding (nwinding), n-phase (nphase), lossy transformers. Note that most properties are now Vectors (or Vectors of Vectors), indexed over the windings.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  Vector{String}  always List of bus for each winding, size=nwindings\nconnections  Vector{Vector{Int}}  always List of connection for each winding, size=((nconductors),nwindings)\nconfiguration fill(WYE, nwindings) Vector{ConnConfig}  always WYE or DELTA. List of configuration for each winding, size=nwindings\nxfmrcode  String  always id of\nxsc zeros(nwindings*(nwindings-1)/2) Vector{Real} sm_nom[1] always List of short-circuit reactances between each pair of windings, relative to the VA rating of the first winding; enter as a list of the upper-triangle elements\nrw zeros(nwindings) Vector{Real} sm_nom[1] always Active power lost due to resistance of each winding, relative to the VA rating of each winding winding\ncmag 0.0 Real sm_nom[1] always Total no-load reactive power drawn by the transformer, relative to VA rating of the first winding (magnetizing current)\nnoloadloss 0.0 Real sm_nom[1] always Total no-load active power drawn by the transformer, relative to VA rating of the first winding\ntm_nom ones(nwindings) Vector{Real}  always Nominal tap ratio for the transformer, size=nwindings (multiplier)\ntm_ub  Vector{Vector{Real}}  opf Maximum tap ratio for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_lb  Vector{Vector{Real}}  opf Minimum tap ratio for for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_set fill(fill(1.0,nphases),nwindings) Vector{Vector{Real}}  always Set tap ratio for each winding and phase, size=((nphases),nwindings) (base=tm_nom)\ntm_fix fill(fill(true,nphases),nwindings) Vector{Vector{Bool}}  oltc Indicates for each winding and phase whether the tap ratio is fixed, size=((nphases),nwindings)\npolarity fill(1,nwindings) Vector{Int}  always \nvm_nom  Vector{Real} volt always \nsm_nom  Vector{Real} watt always \nsm_ub  Real watt opf Rating for the total apparent power magnitude at each winding\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"manual/eng-data-model.html#Asymmetric,-Lossless,-Two-Winding-(AL2W)-Transformers-(transformer)","page":"Engineering Data Model","title":"Asymmetric, Lossless, Two-Winding (AL2W) Transformers (transformer)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Special case of the Generic transformer, which is still a transformer object, but has a simplified method for its definition. These are transformers are asymmetric (A), lossless (L) and two-winding (2W). Asymmetric refers to the fact that the secondary is always has a WYE configuration, whilst the primary can be DELTA. The table below indicates alternate, more simple ways to specify the special case of an AL2W Transformer. xsc and rw cannot be specified for an AL2W transformer, because it is lossless. To use this definition format, all of f_bus, t_bus, f_connections, t_connections, and configuration must be used, and none of buses, connections, configuration may be used. xfmrcode is ignored for this component.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  String  always Alternative way to specify buses, requires both f_bus and t_bus\nt_bus  String  always Alternative way to specify buses, requires both f_bus and t_bus\nf_connections  Vector{Int}  always Alternative way to specify connections, requires both f_connections and t_connections, size=nphases\nt_connections  Vector{Int}  always Alternative way to specify connections, requires both f_connections and t_connections, size=nphases\nconfiguration WYE ConnConfig  always WYE or DELTA. Alternative way to specify the from-side configuration, to-side is always WYE\ntm_nom 1.0 Real  always Nominal tap ratio for the transformer (multiplier)\ntm_ub  Vector{Real}  opf Maximum tap ratio for each phase (base=tm_nom), size=nphases\ntm_lb  Vector{Real}  opf Minimum tap ratio for each phase (base=tm_nom), size=nphases\ntm_set fill(1.0,nphases) Vector{Real}  always Set tap ratio for each phase (base=tm_nom), size=nphases\ntm_fix fill(true,nphases) Vector{Bool}  oltc Indicates for each phase whether the tap ratio is fixed, size=nphases\nsm_ub  Real  opf Rating for the total apparent power magnitude at each winding","category":"page"},{"location":"manual/eng-data-model.html#Transformers-with-voltage-regulator-control-(controls)","page":"Engineering Data Model","title":"Transformers with voltage regulator control (controls)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Special case of the Generic transformer, which is part of the transformer object, and emulates a standard utility voltage regulator. The taps of these transformers can be controlled by modelling a line drop compensator.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nvreg  Vector{Vector{Real}} volt oltc Voltage regulator reference, default value is 120.0 for the controlled winding, 0.0 for winding without regulator control, size=((nphases),nwindings)\nband  Vector{Vector{Real}} volt oltc Voltage bandwidth, default value is 3.0 for the controlled winding, 0.0 for winding without regulator control, size=((nphases),nwindings)\nptratio  Vector{Vector{Real}}  oltc Voltage ratio of the potential transformer, default value is 60.0 for the controlled winding, 0.0 for winding without regulator control, size=((nphases),nwindings)\nctprim  Vector{Vector{Real}} amp oltc Current transformer rating on primary side, default value is 300.0 for the controlled winding, 0.0 for winding without regulator control, size=((nphases),nwindings)\nr  Vector{Vector{Real}} volt oltc Resistance setting on line drop compensator, default value is 0.0 for both controlled winding and winding without regulator control, size=((nphases),nwindings)\nx  Vector{Vector{Real}} volt oltc Reactance setting on line drop compensator, default value is 0.0 for both controlled winding and winding without regulator control, size=((nphases),nwindings)","category":"page"},{"location":"manual/eng-data-model.html#Switches-(switch)","page":"Engineering Data Model","title":"Switches (switch)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Switches without rs, xs or a linecode (conductance/susceptance not considered), defined the switch will be treated as lossless. If lossy parameters are defined, switch objects will be decomposed into virtual branch & bus, and an ideal switch.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nf_bus  String  always id of from-side bus connection\nt_bus  String  always id of to-side bus connection\nf_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the f_bus it connects\nt_connections  Vector{Int}  always Indicates for each conductor, to which terminal of the t_bus it connects\ncm_ub  Vector{Real} amp opf Symmetrically applicable current rating\nsm_ub  Vector{Real} watt opf Symmetrically applicable power rating\nlinecode  String  always id of an associated linecode, does not take into account conductance/susceptance\nrs zeros(nphases,nphases) Matrix{Real} ohm always Series resistance matrix, size=(nphases,nphases)\nxs zeros(nphases,nphases) Matrix{Real} ohm always Series reactance matrix, size=(nphases,nphases)\ndispatchable NO Dispatchable   NO or YES, indicates whether switch state can be changed in a switching optimization problem\nstate CLOSED SwitchState  always CLOSED: closed or OPEN: open, to indicate state of switch\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively","category":"page"},{"location":"manual/eng-data-model.html#Node-Objects","page":"Engineering Data Model","title":"Node Objects","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"These are objects that have single bus connections. Every object will have at least bus, connections, and status.","category":"page"},{"location":"manual/eng-data-model.html#Shunts-(shunt)","page":"Engineering Data Model","title":"Shunts (shunt)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\ngs  Matrix{Real} siemens always Conductance, size=(nconductors,nconductors)\nbs  Matrix{Real} siemens always Susceptance, size=(nconductors,nconductors)\nmodel GENERIC ShuntModel   GENERIC, CAPACITOR, or REACTOR. Indicates the type of shunt which may be necessary for transient stability analysis\ndispatchable NO Dispatchable  mld NO or YES, indicates whether a shunt can be shed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,Any}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html#Shunts-with-capacitor-control-(controls)","page":"Engineering Data Model","title":"Shunts with capacitor control (controls)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Special case of the shunt capacitors, which is part of the shunt object, and emulates a typical utility capacitor control (CapControl) by sending switching messages.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ntype  Vector{String}  capc Control type, default is current for controlled phase, `for uncontrolled phase,size=1forkvartype, otherwisesize=(nphases)`\nelement  String  capc source_id of element (typically line or transformer) to which CapControl is connected\nterminal  Vector{Int}  capc Number of the terminal of circuit element to which CapControl is connected, default is 1 for controlled phase, 0 for uncontrolled phase, size=1 for kvar type, otherwise size=(nphases)\nonsetting  Vector{Real}  capc Value at which the CapControl switches the capacitor on, default is 300.0 for controlled phase, 0.0 for uncontrolled phase, size=1 for kvar type, otherwise size=(nphases)\noffsetting  Vector{Real}  capc Value at which the CapControl switches the capacitor off, default is 200.0 for controlled phase, 0.0 for uncontrolled phase, size=1 for kvar type, otherwise size=(nphases)\nvoltoverride  Vector{Bool}  capc Indicate whether voltage over ride is enabled, default is false for both controlled and uncontrolled phases, size=1 for kvar type, otherwise size=(nphases)\nptratio  Vector{Real}  capc Ratio of potential transformer, default is 60.0 for controlled phase, 0.0 for uncontrolled phase, size=(nphases)\nctratio  Vector{Real}  capc Ratio of current transformer, default is 60.0 for controlled phase, 0.0 for uncontrolled phase, size=(nphases)\nvmin  Vector{Real} volt capc Minimum voltage below which CapControl switches the capacitor on, default is 115.0 for controlled phase, 0.0 for uncontrolled phase, size=1 for kvar type, otherwise size=(nphases)\nvmax  Vector{Real} volt capc Maximum voltage above which CapControl switches the capacitor off, default is 126.0 for controlled phase, 0.0 for uncontrolled phase, size=1 for kvar type, otherwise size=(nphases)","category":"page"},{"location":"manual/eng-data-model.html#Loads-(load)","page":"Engineering Data Model","title":"Loads (load)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nmodel POWER LoadModel  always POWER, IMPEDANCE, CURRENT, EXPONENTIAL, or ZIP. Indicates the type of voltage-dependency\npd_nom  Vector{Real} watt always Nominal active load, with respect to vm_nom, size=nphases\nqd_nom  Vector{Real} var always Nominal reactive load, with respect to vm_nom, size=nphases\nvm_nom  Real volt model!=POWER Nominal voltage (multiplier)\ndispatchable NO Dispatchable  mld NO or YES, indicates whether a load can be shed\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Multi-phase loads define a number of individual loads connected between two terminals each. How they are connected, is defined both by configuration and connections. The table below indicates the value of configuration and lengths of the other properties for a consistent definition,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"configuration connections pd_nom | qd_nom | pd_exp\nDELTA 2 1\nDELTA 3 3\nWYE 2 1\nWYE 3 2\nWYE N N-1","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Note that for delta loads, only 2 and 3 connections are allowed. Each individual load i is connected between two terminals, exposed to a voltage magnitude v[i], which leads to a consumption pd[i]+j*qd[i]. The model then defines the relationship between these quantities,","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"model pd[i]/pd_nom[i]= qd[i]/qd_nom[i]=\nPOWER 1 1\nCURRENT (v[i]/vm_nom) (v[i]/vm_nom)\nIMPEDANCE (v[i]/vm_nom)^2 (v[i]/vm_nom)^2","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Two more model types are supported, which need additional fields and are defined below.","category":"page"},{"location":"manual/eng-data-model.html#model-EXPONENTIAL","page":"Engineering Data Model","title":"model == EXPONENTIAL","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"(pd[i]/pd_nom[i]) = (v[i]/vm_nom)^pd_exp[i]\n(qd[i]/qd_nom[i]) = (v[i]/vm_nom)^qd_exp[i]","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\npd_exp  Real  model==EXPONENTIAL \nqd_exp  Real  model==EXPONENTIAL ","category":"page"},{"location":"manual/eng-data-model.html#model-ZIP","page":"Engineering Data Model","title":"model == ZIP","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"ZIP load models are split into IMPEDANCE, CURRENT, POWER models.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"(pd[i]/pd_nom) = pd_cz[i]*(v[i]/vm_nom)^2 + pd_ci[i]*(v[i]/vm_nom) + pd_cp[i]\n(qd[i]/qd_nom) = qd_cz[i]*(v[i]/vm_nom)^2 + qd_ci[i]*(v[i]/vm_nom) + qd_cp[i]","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nzipv  Vector{Real}  model==ZIP First 3 are ZIP weighting factors for active power (pd_cz,pd_ci,pd_cp), next 3 are ZIP weighting factors for reactive power (qd_cz,qd_ci,qd_cp), last 1 is cut-off voltage in p.u. of base kV; load is 0 below this cut-off","category":"page"},{"location":"manual/eng-data-model.html#Generators-(generator)","page":"Engineering Data Model","title":"Generators (generator)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nvg  Vector{Real} volt control_mode==ISOCHRONOUS Voltage magnitude setpoint\npg_lb zeros(nphases) Vector{Real} watt opf Lower bound on active power generation per phase, size=nphases\npg_ub fill(Inf, nphases) Vector{Real} watt opf Upper bound on active power generation per phase, size=nphases\nqg_lb -pg_ub Vector{Real} var opf Lower bound on reactive power generation per phase, size=nphases\nqg_ub pg_ub Vector{Real} var opf Upper bound on reactive power generation per phase, size=nphases\npg  Vector{Real} watt solution Present active power generation per phase, size=nphases\nqg  Vector{Real} var solution Present reactive power generation per phase, size=nphases\ncontrol_mode FREQUENCYDROOP ControlMode   FREQUENCYDROOP or ISOCHRONOUS\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html#generator-Cost-Model","page":"Engineering Data Model","title":"generator Cost Model","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The generator cost model is currently specified by the following fields.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncost_pg_model 2 Int  opf Cost model type, 1 = piecewise-linear, 2 = polynomial\ncost_pg_parameters [0.0, 1.0, 0.0] Vector{Real} /MVA opf Cost model polynomial","category":"page"},{"location":"manual/eng-data-model.html#Photovoltaic-Systems-(solar)","page":"Engineering Data Model","title":"Photovoltaic Systems (solar)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\npg_lb  Vector{Real} watt opf Lower bound on active power generation per phase, size=nphases\npg_ub  Vector{Real} watt opf Upper bound on active power generation per phase, size=nphases\nqg_lb  Vector{Real} var opf Lower bound on reactive power generation per phase, size=nphases\nqg_ub  Vector{Real} var opf Upper bound on reactive power generation per phase, size=nphases\npg  Vector{Real} watt solution Present active power generation per phase, size=nphases\nqg  Vector{Real} var solution Present reactive power generation per phase, size=nphases\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html#solar-Cost-Model","page":"Engineering Data Model","title":"solar Cost Model","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"The cost model for a photovoltaic system currently matches that of generators.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncost_pg_model 2 Int  opf Cost model type, 1 = piecewise-linear, 2 = polynomial\ncost_pg_parameters [0.0, 1.0, 0.0] Vector{Real} /MVA opf Cost model polynomial","category":"page"},{"location":"manual/eng-data-model.html#Wind-Turbine-Systems-(wind)","page":"Engineering Data Model","title":"Wind Turbine Systems (wind)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Wind turbine systems are most closely approximated by induction machines, also known as asynchronous machines. These are not currently supported, but there is plans to support them in the future.","category":"page"},{"location":"manual/eng-data-model.html#Storage-(storage)","page":"Engineering Data Model","title":"Storage (storage)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"A storage object is a flexible component that can represent a variety of energy storage objects, like Li-ion batteries, hydrogen fuel cells, flywheels, etc.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"How to include the inverter model for this? Similar issue as for a PV generator","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nenergy  Real watt-hr always Stored energy\nenergy_ub  Real  opf maximum energy rating\ncharge_ub  Real  opf maximum charge rating\ndischarge_ub  Real  opf maximum discharge rating\nsm_ub  Real watt opf Power rating,\ncm_ub  Real amp opf Current rating,\ncharge_efficiency  Real percent always charging efficiency (losses)\ndischarge_efficiency  Real percent always discharging efficiency (losses)\nqs_ub  Real  opf Maximum reactive power injection,\nqs_lb  Real  opf Minimum reactive power injection,\nrs  Real ohm always converter resistance\nxs  Real ohm always converter reactance\npex  Real  always Total active power standby exogenous flow (loss)\nqex  Real  always Total reactive power standby exogenous flow (loss)\nps  Vector{Real} watt solution Present active power injection\nqs  Vector{Real} var solution Present reactive power injection\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html#Voltage-Sources-(voltage_source)","page":"Engineering Data Model","title":"Voltage Sources (voltage_source)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"A voltage source is a source of power at a set voltage magnitude and angle connected to a slack bus. If rs or xs are not specified, the voltage source is assumed to be lossless, otherwise virtual branch and bus will be created in the mathematical model to represent the internal losses of the voltage source.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nbus  String  always id of bus connection\nconnections  Vector{Int}  always Ordered list of connected conductors, size=nconductors\nconfiguration WYE ConnConfig  always WYE or DELTA. If WYE, connections[end]=neutral\nvm ones(nphases) Vector{Real} volt always Voltage magnitude set at slack bus, size=nphases\nva zeros(nphases) Real degree always Voltage angle offsets at slack bus, applies symmetrically to each phase angle\nrs zeros(nconductors,nconductors) Matrix{Real} ohm always Internal series resistance of voltage source, size=(nconductors,nconductors)\nxs zeros(nconductors,nconductors) Matrix{Real} ohm always Internal series reactance of voltage soure, size=(nconductors,nconductors)\nstatus ENABLED Status  always ENABLED or DISABLED. Indicates if component is enabled or disabled, respectively\ntime_series  Dict{String,String}  multinetwork Dictionary containing time series parameters.","category":"page"},{"location":"manual/eng-data-model.html#Data-Objects-(codes,-time-series,-etc.)","page":"Engineering Data Model","title":"Data Objects (codes, time series, etc.)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"These objects are referenced by node and edge objects, but are not part of the network themselves, only containing data.","category":"page"},{"location":"manual/eng-data-model.html#Linecodes-(linecode)","page":"Engineering Data Model","title":"Linecodes (linecode)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Linecodes are easy ways to specify properties common to multiple lines.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nrs  Matrix{Real} ohm/meter always Series resistance, size=(nconductors,nconductors)\nxs  Matrix{Real} ohm/meter always Series reactance, size=(nconductors,nconductors)\ng_fr zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always From-side conductance, size=(nconductors,nconductors)\nb_fr zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always From-side susceptance, size=(nconductors,nconductors)\ng_to zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always To-side conductance, size=(nconductors,nconductors)\nb_to zeros(nconductors,nconductors) Matrix{Real} siemens/meter/Hz always To-side susceptance, size=(nconductors,nconductors)\ncm_ub fill(Inf,nconductors) Vector{Real} ampere opf maximum current per conductor, symmetrically applicable\nsm_ub fill(Inf,nconductors) Vector{Real} watt opf maximum power per conductor, symmetrically applicable","category":"page"},{"location":"manual/eng-data-model.html#Transformer-Codes-(xfmrcode)","page":"Engineering Data Model","title":"Transformer Codes (xfmrcode)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Transformer codes are easy ways to specify properties common to multiple transformers","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\nconfiguration fill(WYE, nwindings) Vector{ConnConfig}  always WYE or DELTA. List of configuration for each winding, size=nwindings\nxsc [0.0] Vector{Real} ohm always List of short-circuit reactances between each pair of windings; enter as a list of the upper-triangle elements, size=(nwindings == 2 ? 1 : 3)\nrw zeros(nwindings) Vector{Real} ohm always List of the winding resistance for each winding, size=nwindings\ntm_nom ones(nwindings) Vector{Real}  always Nominal tap ratio for the transformer, size=nwindings (multiplier)\ntm_ub  Vector{Vector{Real}}  opf Maximum tap ratio for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_lb  Vector{Vector{Real}}  opf Minimum tap ratio for for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_set fill(fill(1.0, nphases), nwindings) Vector{Vector{Real}}  always Set tap ratio for each winding and phase, size=((nphases), nwindings) (base=tm_nom)\ntm_fix fill(fill(true, nphases), nwindings) Vector{Vector{Bool}}  always Indicates for each winding and phase whether the tap ratio is fixed, size=((nphases), nwindings)","category":"page"},{"location":"manual/eng-data-model.html#Time-Series-(time_series)","page":"Engineering Data Model","title":"Time Series (time_series)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Time series objects are used to specify time series for e.g. load or generation forecasts.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Some parameters for components specified in this document can support a time series by inserting a reference to a time_series object into the time_series dictionary inside a component under the relevant parameter name. For example, for a load, if pd_nom is supposed to be a time series, the user would specify \"time_series\" => Dict(\"pd_nom\" => time_series_id) where time_series_id is the id of an object in time_series, and has type Any.","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ntime  Union{Vector{Real},Vector{String}} hour always Time points at which values are specified. If time is specified in String, units not required to be in hours.\nvalues  Vector{Real}  always Multipers at each time step given in time\noffset 0 Real hour always Start time offset\nreplace true Bool  always Indicates to replace with data, instead of multiply. Will only work on non-Array data","category":"page"},{"location":"manual/eng-data-model.html#Fuses-(fuse)","page":"Engineering Data Model","title":"Fuses (fuse)","text":"","category":"section"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Fuses can be defined on any terminal of any physical component","category":"page"},{"location":"manual/eng-data-model.html","page":"Engineering Data Model","title":"Engineering Data Model","text":"Name Default Type Units Used Description\ncomponent_type  String   \ncomponent_id  String   \nterminals  Vector{Int}   \nfuse_curve  Array{Vector{Real},2}   specifies the fuse blowing condition\nminimum_melting_curve  Array{Vector{Real},2}   specifies the minimum melting conditions of the fuse","category":"page"},{"location":"developer/contributing.html#Pull-Requests","page":"Contributing","title":"Pull Requests","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"All pull requests should be reviewed by a core developer, and may include a review by a subject matter expert if the area of the PR is outside that of one of the core developers. In that case, the core developers will primarily review style and design, rather than substance.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Every PR to PowerModelsDistribution should strive to meet the following guidelines.","category":"page"},{"location":"developer/contributing.html#PR-Title","page":"Contributing","title":"PR Title","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Should be concise and clear, describing in a phrase the content of the PR\nShould include a prefix that describes the primary type of the PR\nADD: feature addition\nFIX: bugfix\nREF: refactor\nUPD: updates to code for e.g. version bumps of dependencies\nSTY: style changes, no changes to function names, added features, etc.\nDOC: documentation-only additions/changes\nRM: dead code removal","category":"page"},{"location":"developer/contributing.html#PR-Body","page":"Contributing","title":"PR Body","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"If the change is breaking, it should be clearly stated up front\nThe purpose of this PR should be clearly stated right away\nMajor changes / additions to the code should be summarized. In the case where a refactor was performed, the name changes of public functions should be documented in the body of the PR\nAny associated Issues should be referenced in the body of the PR, and it is accepted/encouraged to use Closes #XX to automatically close Issues after the PR is merged","category":"page"},{"location":"developer/contributing.html#PR-Code","page":"Contributing","title":"PR Code","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"An entry should be added to CHANGELOG.md for every PR\nDocumentation should be updated (See Documentation section above for guidelines)\nUnit tests should be added. In the case where existing unit tests were altered, an explanation for the change must be included\nCode should be rebased to the latest version of whatever branch the PR is aimed at (no merge conflicts!)","category":"page"},{"location":"developer/contributing.html#Versions","page":"Contributing","title":"Versions","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"PowerModelsDistribution follows the Semantic Versioning (SemVer) convention of Major.minor.patch, where Major indicates breaking changes, minor indicates non-breaking feature additions, and patch indicates non-breaking bugfixes.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Currently, because Major==0, minor indicates breaking changes and patch indicates any non-breaking change, including both feature additions and bugfixes. Once PowerModelsDistribution reaches v1.0.0, we will adhere strictly to the SemVer convention.","category":"page"},{"location":"developer/contributing.html#Branch-Management","page":"Contributing","title":"Branch Management","text":"","category":"section"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"The main branch is a protected branch, meaning that its history will always be contiguous and can never be overwritten.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Release candidate branches of the format vM.m.0-rc are also protected branches. These branches will contain only breaking changes and will not be merged into main until a new version is ready to be tagged. Pull requests including breaking changes should be directed into the next release candidate branch available, e.g. if the current version of the package is v0.9.0, the next release candidate branch will be v0.10.0-rc.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Pull requests that include only non-breaking changes can be merged directly into main once approved, and in the case of merge conflicts arising for release candidate branches, the -rc branch will need to be updated to include the latest main.","category":"page"},{"location":"developer/contributing.html","page":"Contributing","title":"Contributing","text":"Pull requests will generally be merged using squash and merge into the branch they are aimed at, with the exception of release candidate branches, which generally be merged using rebase and merge into main.","category":"page"},{"location":"reference/problems.html#ProblemAPI","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"reference/problems.html#Solvers","page":"Problems","title":"Solvers","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"solve\")","category":"page"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_mld-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_mld","text":"Solve load shedding problem with storage\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_mld_uc-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_mld_uc","text":"Solve unit commitment load shedding problem (!relaxed)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_model-Tuple{Dict{String}, Type, Any, Function}","page":"Problems","title":"PowerModelsDistribution.solve_mc_model","text":"solve_mc_model(\n    data::Dict{String,<:Any},\n    model_type::Type,\n    optimizer,\n    build_mc::Function;\n    ref_extensions::Vector{<:Function}=Function[],\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    eng2math_extensions::Vector{<:Function}=Function[],\n    eng2math_passthrough::Dict{String,<:Vector{<:String}}=Dict{String,Vector{String}}(),\n    make_si::Bool=!get(data, \"per_unit\", false),\n    make_si_extensions::Vector{<:Function}=Function[],\n    dimensionalize_math_extensions::Dict{String,Dict{String,Vector{String}}}=Dict{String,Dict{String,Vector{String}}}(),\n    kwargs...\n)::Dict{String,Any}\n\nTakes data in either the ENGINEERING or MATHEMATICAL model, a model type (e.g., ACRUPowerModel), and model builder function (e.g., build_mc_opf), and returns a solution in the original data model defined by data.\n\nIf make_si is false, data will remain in per-unit.\n\nFor an explanation of multinetwork and global_keys, see make_multinetwork\n\nFor an explanation of eng2math_extensions and eng2math_passthrough, see transform_data_model\n\nFor an explanation of make_pu_extensions, see make_per_unit!\n\nFor an explanation of ref_extensions, see instantiate_mc_model\n\nFor an explanation of map_math2eng_extensions, make_si, make_si_extensions, and dimensionalize_math_extensions, see solution_make_si\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_model-Tuple{String, Type, Any, Function}","page":"Problems","title":"PowerModelsDistribution.solve_mc_model","text":"solve_mc_model(\n    file::String,\n    model_type::Type,\n    optimizer,\n    build_mc::Function;\n    dss2eng_extensions::Vector{<:Function}=Function[],\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    kwargs...\n)::Dict{String,Any}\n\nGiven a file::String, data will be parsed automatically from the file.\n\nSee solve_mc_model for detailed explanation of function arguments.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_opf-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_opf","text":"function solve_mc_opf(\n\tdata::Union{Dict{String,<:Any},String},\n\tmodel_type::Type,\n\tsolver;\n\tkwargs...\n)\n\nSolve Optimal Power Flow\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_opf_capc-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_opf_capc","text":"solve_mc_opf_capc(data::Union{Dict{String,<:Any},String}, model_type::Type, solver; kwargs...)\n\nSolve OPF with capacitor control\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_opf_oltc-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_opf_oltc","text":"Solve on-load tap-changer OPF\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_opf_oltc_capc-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_opf_oltc_capc","text":"solve_mc_opf_capc(data::Union{Dict{String,<:Any},String}, model_type::Type, solver; kwargs...)\n\nSolve OPF with capacitor control\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_opf_pbs-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_opf_pbs","text":"Solve OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_pf-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_pf","text":"Power Flow Problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mc_pf_pbs-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mc_pf_pbs","text":"Solve PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mn_mc_mld_simple-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mn_mc_mld_simple","text":"Solve multinetwork load shedding problem with storage\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mn_mc_opf-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mn_mc_opf","text":"function solve_mn_mc_opf(\n\tdata::Union{Dict{String,<:Any},String},\n\tmodel_type::Type,\n\tsolver;\n\tkwargs...\n)\n\nSolve multinetwork optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.solve_mn_mc_opf_oltc-Tuple{Union{String, Dict{String}}, Type, Any}","page":"Problems","title":"PowerModelsDistribution.solve_mn_mc_opf_oltc","text":"function solve_mn_mc_opf_oltc(\n\tdata::Union{Dict{String,<:Any},String},\n\tmodel_type::Type,\n\tsolver;\n\tkwargs...\n)\n\nSolve multinetwork oltc optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#Builders","page":"Problems","title":"Builders","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"build\")","category":"page"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_mld-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_mld","text":"Load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_mld-Tuple{AbstractUnbalancedIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_mld","text":"\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_mld-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_mld","text":"Load shedding problem including storage (snap-shot)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_mld_bf-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_mld_bf","text":"Load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_mld_uc-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_mld_uc","text":"Standard unit commitment (!relaxed) load shedding problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf-Tuple{AbstractExplicitNeutralACRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf","text":"function build_mc_opf(\n\tpm::AbstractExplicitNeutralACRModel\n)\n\nconstructor for OPF in power-voltage variable space with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf-Tuple{AbstractExplicitNeutralIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf","text":"function build_mc_opf(\n\tpm::AbstractExplicitNeutralIVRModel\n)\n\nconstructor for OPF in current-voltage variable space with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf","text":"function build_mc_opf(\n\tpm::AbstractUBFModels\n)\n\nconstructor for branch flow opf\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf-Tuple{AbstractUnbalancedIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf","text":"function build_mc_opf(\n\tpm::AbstractUnbalancedIVRModel\n)\n\nconstructor for OPF in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf","text":"function build_mc_opf(\n\tpm::AbstractUnbalancedPowerModel\n)\n\nConstructor for Optimal Power Flow\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_capc-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_capc","text":"constructor for branch flow opf with capcontrol\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_capc-Tuple{AbstractUnbalancedIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_capc","text":"constructor for capcontrol OPF in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_capc-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_capc","text":"build_mc_opf_capc(pm::AbstractUnbalancedPowerModel)\n\nConstructor for capcontrol OPF\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_oltc-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_oltc","text":"constructor for branch flow on-load tap-changer OPF\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_oltc-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_oltc","text":"constructor for on-load tap-changer OPF\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_oltc_capc-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_oltc_capc","text":"constructor for branch flow opf\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_oltc_capc-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_oltc_capc","text":"build_mc_opf_capc(pm::AbstractUnbalancedPowerModel)\n\nConstructor for capcontrol OPF\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_opf_pbs-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_opf_pbs","text":"OPF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_pf-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Branch Flow Power Flow\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_pf-Tuple{AbstractUnbalancedIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Power Flow in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_pf-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_pf","text":"Constructor for Power Flow Problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mc_pf_pbs-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mc_pf_pbs","text":"PF problem with slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_mld_simple-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_mld_simple","text":"Multinetwork load shedding problem for Branch Flow model\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_mld_simple-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_mld_simple","text":"Multinetwork load shedding problem including storage\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractExplicitNeutralIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_opf","text":"function buildmcopf(     pm::AbstractExplicitNeutralIVRModel )\n\nconstructor for multinetwork OPF in current-voltage variable space with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractUBFModels}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_opf","text":"function build_mn_mc_opf(\n\tpm::AbstractUBFModels\n)\n\nMultinetwork branch flow optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractUnbalancedIVRModel}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_opf","text":"function build_mn_mc_opf(\n\tpm::AbstractUnbalancedIVRModel\n)\n\nMultinetwork current-voltage optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_opf-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_opf","text":"function build_mn_mc_opf(\n\tpm::AbstractUnbalancedPowerModel\n)\n\nMultinetwork optimal power flow problem\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_mn_mc_opf_oltc-Tuple{AbstractUnbalancedPowerModel}","page":"Problems","title":"PowerModelsDistribution.build_mn_mc_opf_oltc","text":"function build_mn_mc_opf_oltc(\n\tpm::AbstractUnbalancedPowerModel\n)\n\nConstructor for otlc Optimal Power Flow\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_pf_result-Tuple{PowerFlowData, Vector{ComplexF64}, PFTerminationStatus, Int64, Real, Real}","page":"Problems","title":"PowerModelsDistribution.build_pf_result","text":"build_pf_result(\n  pfd::PowerFlowData,\n  Uv::Vector,\n  status::PFTerminationStatus,\n  its::Int,\n  time::Real,\n  stationarity::Real,\n  verbose::Bool\n)\n\nBuilds the result dict from the solution dict.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.build_pf_solution-Tuple{PowerFlowData, Vector{ComplexF64}}","page":"Problems","title":"PowerModelsDistribution.build_pf_solution","text":"build_pf_solution(\n  pfd::PowerFlowData,\n  Uv::Vector\n)\n\nBuilds the solution dict.\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#Model-Instantiation","page":"Problems","title":"Model Instantiation","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"instantiate_mc_model","category":"page"},{"location":"reference/problems.html#PowerModelsDistribution.instantiate_mc_model","page":"Problems","title":"PowerModelsDistribution.instantiate_mc_model","text":"instantiate_mc_model(\n    data::Dict{String,<:Any},\n    model_type::Type,\n    build_method::Function;\n    ref_extensions::Vector{<:Function}=Function[],\n    multinetwork::Bool=false,\n    global_keys::Set{String}=Set{String}(),\n    eng2math_extensions::Vector{<:Function}=Function[],\n    eng2math_passthrough::Dict{String,<:Vector{<:String}}=Dict{String,Vector{String}}(),\n    make_pu_extensions::Vector{<:Function}=Function[],\n    kwargs...\n)\n\nTakes data in either the ENGINEERING or MATHEMATICAL model, a model type (e.g., ACRUPowerModel), and model builder function (e.g., build_mc_opf), and returns an AbstractUnbalancedPowerModel structure.\n\nFor an explanation of multinetwork and global_keys, see make_multinetwork\n\nFor an explanation of eng2math_extensions and eng2math_passthrough, see transform_data_model\n\nFor an explanation of make_pu_extensions, see make_per_unit!\n\nref_extensions\n\nInside of the model structures, data can be quickly accessed via the ref function. By default, the only ref objects available are created by ref_add_core!, but users can add their own custom ref objects by passing functions via ref_extensions that have the signature:\n\nref_add!(ref::Dict{Symbol,Any}, data::Dict{String,Any})\n\nSee the Beginners Guide for an example.\n\n\n\n\n\n","category":"function"},{"location":"reference/problems.html#Solution-Helpers","page":"Problems","title":"Solution Helpers","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"sol_\")","category":"page"},{"location":"reference/problems.html#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUnbalancedACRModel, Dict{String}}","page":"Problems","title":"PowerModelsDistribution.sol_data_model!","text":"sol_data_model!(pm::AbstractUnbalancedACRModel, solution::Dict{String,<:Any})\n\nsolutionprocessor, see [`solvemcmodel`](@ref solvemc_model),  to convert ACR variables back into polar representation (default data model voltage form)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUnbalancedPowerModel, Dict{String}}","page":"Problems","title":"PowerModelsDistribution.sol_data_model!","text":"sol_data_model!(pm::AbstractUnbalancedPowerModel, solution::Dict{String,<:Any})\n\ndoes nothing (no sol_data_model! exists for the formulation attempting to be converted)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.sol_data_model!-Tuple{AbstractUnbalancedWModels, Dict{String}}","page":"Problems","title":"PowerModelsDistribution.sol_data_model!","text":"sol_data_model!(pm::AbstractUnbalancedWModels, solution::Dict{String,<:Any})\n\nsolutionprocessor, see [`solvemcmodel`](@ref solvemc_model), to convert W variables back into polar representation (default data model voltage form)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.sol_data_model!-Tuple{FBSUBFPowerModel, Dict{String}}","page":"Problems","title":"PowerModelsDistribution.sol_data_model!","text":"sol_data_model!(pm::FBSUBFPowerModel, solution::Dict{String,<:Any})\n\nsolution_processor, to convert FBS variables back into polar representation (default data model voltage form)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#PowerModelsDistribution.sol_data_model!-Tuple{FOTRUPowerModel, Dict{String}}","page":"Problems","title":"PowerModelsDistribution.sol_data_model!","text":"sol_data_model!(pm::FOTRUPowerModel, solution::Dict{String,<:Any})\n\nsolution_processor, to convert FOT rectangular variables back into polar representation (default data model voltage form)\n\n\n\n\n\n","category":"method"},{"location":"reference/problems.html#DEPRECIATED-Solver-functions","page":"Problems","title":"DEPRECIATED Solver functions","text":"","category":"section"},{"location":"reference/problems.html","page":"Problems","title":"Problems","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"run\")","category":"page"},{"location":"manual/load-model.html#Load-Models","page":"Load Models","title":"Load Models","text":"","category":"section"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^d=S^d_1S^d_n^T","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"is a column vector ntimes 1, specifying for each individual load how much power is consumed. By definition, this is","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^d=U^dodot left(I^dright)^*","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"where U^d is the voltage applied across each individual load and I^d is the current drawn by each load. At the same time, the composed load is connected to a bus with voltage U^textbus, and draws a current I^textbus and power S^textbus.","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"How these quantities relate to each other, depends on how the load is connected.","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"(S^d U^d I^d)  (S^textbus U^textbus I^textbus)","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"In the implementations, these variables are referred to as","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"beginalign\nS^d=textpd+jtextqd  S^textbus=textpd_bus+jtextqd_bus\nI^d=textcrd+jtextcid  I^textbus=textcrd_bus+jtextcid_bus\nU^d=textvrd+jtextvid  U^textbus=textvr+jtextvi\nendalign","category":"page"},{"location":"manual/load-model.html#Voltage-dependency","page":"Load Models","title":"Voltage dependency","text":"","category":"section"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"The general, exponential load model is defined as","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"P^d_i = P^d0_i left(fracV^d_iV^d0_iright)^alpha_i = a_i left(V^d_iright)^alpha_i","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"Q^d_i = Q^d0_i left(fracV^d_iV^d0_iright)^beta_i = b_i left(V^d_iright)^beta_i","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"There are a few cases which get a special name: constant power (alpha=beta=0), constant current (alpha=beta=1), and constant impedance (alpha=beta=2).","category":"page"},{"location":"manual/load-model.html#Wye-connected-Loads","page":"Load Models","title":"Wye-connected Loads","text":"","category":"section"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"A wye-connected load connects between a set of phases mathcalP and a neutral conductor n. The voltage as seen by each individual load is then","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"U^d = U^textbus_mathcalP-U^textbus_n","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"whilst the current","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"I^textbus_mathcalP = I^textdI^textbus_n=-1^TI^d","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"We now develop the expression for the power drawn at the bus for the phase conductors","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^textbus_mathcalP = (U^d+U^textbus_n)odot(I^d)^* = S^d+U^textbus_n S^doslash U^d","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"From conservation of power or simply the formulas above,","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^textbus_n = -1^TS^textbus_mathcalP+1^TS^d","category":"page"},{"location":"manual/load-model.html#Grounded-neutral","page":"Load Models","title":"Grounded neutral","text":"","category":"section"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"Note that when the neutral is grounded, i.e. U^textbus_n=0, these formulas simplify to","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^textbus_mathcalP=S^dS^textbus_n=0","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"which is why in Kron-reduced unbalanced networks, you can directly insert the power consumed by the loads, in the nodal power balance equations.","category":"page"},{"location":"manual/load-model.html#Delta-connected-Loads","page":"Load Models","title":"Delta-connected Loads","text":"","category":"section"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"Firstly, define the three-phase delta transformation matrix","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"M^Delta_3 = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"which can be extended to more phases in a straight-forward manner. For loads connected between split-phase terminals of triplex nodes (usually located on the secondary side of center-tapped transformers), we define a single-phase delta transformation matrix","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"M^Delta_1 = beginbmatrix 1  -1 endbmatrix","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"Now,","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"U^d = M^Delta U^textbus I^textbus = left(M^Deltaright)^T I^d","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"We can related S^textbus to U^textbus and I^d","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^textbus = U^textbusodot left(I^textbusright)^* = U^textbusodot left(M^Deltaright)^Tleft(I^dright)^*","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"and using the fact that left(I^dright)^*=S^d oslash U^d, and the expression above for U^d,","category":"page"},{"location":"manual/load-model.html","page":"Load Models","title":"Load Models","text":"S^textbus = U^textbusleft(M^Deltaright)^T S^d oslash M^Delta U^textbus","category":"page"},{"location":"index.html#![PowerModelsDistribution-Logo](assets/logo.svg)","page":"Introduction","title":"(Image: PowerModelsDistribution Logo)","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"CurrentModule = PowerModelsDistribution","category":"page"},{"location":"index.html#What-is-PowerModelsDistribution?","page":"Introduction","title":"What is PowerModelsDistribution?","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PowerModelsDistribution.jl is a Julia/JuMP-based package for modeling unbalanced (i.e., multiconductor) power networks.","category":"page"},{"location":"index.html#Resources-for-Getting-Started","page":"Introduction","title":"Resources for Getting Started","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Installation Guide.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the Quickstart Guide.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Read the introductory tutorial Introduction to PowerModelsDistribution.","category":"page"},{"location":"index.html#How-the-documentation-is-structured","page":"Introduction","title":"How the documentation is structured","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The following is a high-level overview of how our documentation is structured. There are three primary sections:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The Manual contains detailed documentation for certain aspects of PowerModelsDistribution, such as the data model specification, the Unbalanced Network Formulations, or the Optimization Problem Specifications.\nTutorials contains working examples of how to use PowerModelsDistribution. Start here if you are new to PowerModelsDistribution.\nThe API Reference contains a complete list of the functions you can use in PowerModelsDistribution. Look here if you want to know how to use a particular function.","category":"page"},{"location":"index.html#Citing-PowerModelsDistribution","page":"Introduction","title":"Citing PowerModelsDistribution","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"If you find PowerModelsDistribution useful for your work, we kindly request that you cite the following publication:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"@article{FOBES2020106664,\ntitle = \"PowerModelsDistribution.jl: An open-source framework for exploring distribution power flow formulations\",\njournal = \"Electric Power Systems Research\",\nvolume = \"189\",\npages = \"106664\",\nyear = \"2020\",\nissn = \"0378-7796\",\ndoi = \"https://doi.org/10.1016/j.epsr.2020.106664\",\nurl = \"http://www.sciencedirect.com/science/article/pii/S0378779620304673\",\nauthor = \"David M. Fobes and Sander Claeys and Frederik Geth and Carleton Coffrin\",\nkeywords = \"Nonlinear optimization, Convex optimization, AC optimal power flow, Julia language, Open-source\",\nabstract = \"In this work we introduce PowerModelsDistribution, a free, open-source toolkit for distribution power network optimization, whose primary focus is establishing a baseline implementation of steady-state multi-conductor unbalanced distribution network optimization problems, which includes implementations of Power Flow and Optimal Power Flow problem types. Currently implemented power flow formulations for these problem types include AC (polar and rectangular), a second-order conic relaxation of the Branch Flow Model (BFM) and Bus Injection Model (BIM), a semi-definite relaxation of BFM, and several linear approximations, such as the simplified unbalanced BFM. The results of AC power flow have been validated against OpenDSS, an open-source “electric power distribution system simulator”, using IEEE distribution test feeders (13, 34, 123 bus and LVTestCase), all parsed using a built-in OpenDSS parser. This includes support for standard distribution system components as well as novel resource models such as generic energy storage (multi-period) and photovoltaic systems, with the intention to add support for additional components in the future.\"\n}","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The associated Power Systems Computation Conference talk can be found on YouTube.","category":"page"},{"location":"index.html#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This code is provided under a BSD license as part of the Multi-Infrastructure Control and Optimization Toolkit (MICOT) project, LA-CC-13-108.","category":"page"},{"location":"reference/enums.html#EnumAPI","page":"Enums","title":"Enums","text":"","category":"section"},{"location":"reference/enums.html","page":"Enums","title":"Enums","text":"PowerModelsDistributionEnums\nDataModel\nENGINEERING\nMATHEMATICAL\nDSS\nMATPOWER\nLoadModel\nPOWER\nCURRENT\nIMPEDANCE\nEXPONENTIAL\nZIP\nShuntModel\nGENERIC\nCAPACITOR\nREACTOR\nSwitchState\nOPEN\nCLOSED\nControlMode\nFREQUENCYDROOP\nISOCHRONOUS\nConnConfig\nWYE\nDELTA\nDispatchable\nNO\nYES\nStatus\nDISABLED\nENABLED","category":"page"},{"location":"reference/enums.html#PowerModelsDistribution.PowerModelsDistributionEnums","page":"Enums","title":"PowerModelsDistribution.PowerModelsDistributionEnums","text":"Collection of the built-in Enums for PowerModelsDistribution\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.DataModel","page":"Enums","title":"PowerModelsDistribution.DataModel","text":"DataModel\n\nAn Enum to descibe the current data model contained in the structure\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.ENGINEERING","page":"Enums","title":"PowerModelsDistribution.ENGINEERING","text":"Model type for models that are in the PowerModelsDistribution engineering representation\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.MATHEMATICAL","page":"Enums","title":"PowerModelsDistribution.MATHEMATICAL","text":"Model type for models that are in the mathematical representation\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.DSS","page":"Enums","title":"PowerModelsDistribution.DSS","text":"Model type for raw dss imports\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.MATPOWER","page":"Enums","title":"PowerModelsDistribution.MATPOWER","text":"Model type for models imported via parse_file from PowerModels\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.LoadModel","page":"Enums","title":"PowerModelsDistribution.LoadModel","text":"LoadModel\n\nAn Enum to describe the type of load, e.g., constant power, constant current, etc.\n\nInformation about load models can be found under Load Models\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.POWER","page":"Enums","title":"PowerModelsDistribution.POWER","text":"Constant Power load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.CURRENT","page":"Enums","title":"PowerModelsDistribution.CURRENT","text":"Constant Current load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.IMPEDANCE","page":"Enums","title":"PowerModelsDistribution.IMPEDANCE","text":"Constant Impedance load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.EXPONENTIAL","page":"Enums","title":"PowerModelsDistribution.EXPONENTIAL","text":"Exponential load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ZIP","page":"Enums","title":"PowerModelsDistribution.ZIP","text":"ZIP load model\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ShuntModel","page":"Enums","title":"PowerModelsDistribution.ShuntModel","text":"ShuntModel\n\nAn Enum to describe the type of shunt, e.g., generic, capcitor or reactor type.\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.GENERIC","page":"Enums","title":"PowerModelsDistribution.GENERIC","text":"Generic shunt model, usually indicates user-created\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.CAPACITOR","page":"Enums","title":"PowerModelsDistribution.CAPACITOR","text":"Capacitor shunt model, usually indicates parsed from capacitor dss object\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.REACTOR","page":"Enums","title":"PowerModelsDistribution.REACTOR","text":"Reactor shunt model, usually indicates parsed from reactor dss object\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.SwitchState","page":"Enums","title":"PowerModelsDistribution.SwitchState","text":"SwitchState\n\nAn Enum to descibe whether a switch is open or closed\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.OPEN","page":"Enums","title":"PowerModelsDistribution.OPEN","text":"Switch state is open\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.CLOSED","page":"Enums","title":"PowerModelsDistribution.CLOSED","text":"Switch state is closed\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ControlMode","page":"Enums","title":"PowerModelsDistribution.ControlMode","text":"ControlMode\n\nAn Enum to descibe the current control mode of the generation object\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.FREQUENCYDROOP","page":"Enums","title":"PowerModelsDistribution.FREQUENCYDROOP","text":"Generation resource is in frequency droop mode (following)\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ISOCHRONOUS","page":"Enums","title":"PowerModelsDistribution.ISOCHRONOUS","text":"Generation resource is in isochronous mode (forming)\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ConnConfig","page":"Enums","title":"PowerModelsDistribution.ConnConfig","text":"ConnConfig\n\nAn Enum to describe the connection configuration, e.g., wye or delta\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.WYE","page":"Enums","title":"PowerModelsDistribution.WYE","text":"Wye connection configuration\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.DELTA","page":"Enums","title":"PowerModelsDistribution.DELTA","text":"Delta connection configuration\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.Dispatchable","page":"Enums","title":"PowerModelsDistribution.Dispatchable","text":"Dispatchable\n\nAn Enum to describe whether an object is dispatchable, e.g., can a switch state be controled, or can a load or shunt be shed individually.\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.NO","page":"Enums","title":"PowerModelsDistribution.NO","text":"The object is not dispatchable / controllable\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.YES","page":"Enums","title":"PowerModelsDistribution.YES","text":"The object is dispatchable / controllable\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.Status","page":"Enums","title":"PowerModelsDistribution.Status","text":"Status\n\nAn Enum to describe whether an object is enabled or disabled\n\n\n\n\n\n","category":"type"},{"location":"reference/enums.html#PowerModelsDistribution.DISABLED","page":"Enums","title":"PowerModelsDistribution.DISABLED","text":"The object is disabled\n\n\n\n\n\n","category":"constant"},{"location":"reference/enums.html#PowerModelsDistribution.ENABLED","page":"Enums","title":"PowerModelsDistribution.ENABLED","text":"The object is enabled\n\n\n\n\n\n","category":"constant"},{"location":"reference/constraints.html#ConstraintAPI","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"reference/constraints.html","page":"Constraints","title":"Constraints","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nFilter = t -> startswith(string(t), \"constraint\")","category":"page"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_M_psd-Tuple{JuMP.Model, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_M_psd","text":"For rectangular coordinates of a complex matrix M=Mre+im*Mim, this function applies constraints equivalent to requiring that M itself is PSD.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_SWL_psd-Tuple{JuMP.Model, Vararg{Any, 6}}","page":"Constraints","title":"PowerModelsDistribution.constraint_SWL_psd","text":"Take a multi-conductor voltage variable V and a current variable I. The associated power is then defined as S = VI^H Define the lifted variables as W and L as W = VV^H, L = I*I^H Then, it is equally valid that [W S; S^H L] ∈ PSDCone, rank([W S; S^H L])=1 This function adds this PSD constraint for the rectangular coordinates of S, W and L.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::AbstractUnbalancedACPModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching\n\nbeginalign\ntextkvar control (ON)   q-q_texton  M_q  z - ϵ  (1-z) \ntextkvar control (OFF)  q-q_textoff  -M_q  (1-z) - ϵ  z \ntextvoltage control (ON)   v-v_textmin  -M_v  z + ϵ  (1-z) \ntextvoltage control (OFF)  v-v_textmax  M_v  (1-z) - ϵ  z\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::AbstractUnbalancedACRModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching\n\nbeginalign\ntextkvar control (ON)   q-q_texton  M_q  z - ϵ  (1-z) \ntextkvar control (OFF)  q-q_textoff  -M_q  (1-z) - ϵ  z \ntextvoltage control (ON)   v_r^2 + v_i^2 - v_textmin^2  -M_v  z + ϵ  (1-z) \ntextvoltage control (OFF)  v_r^2 + v_i^2 - v_textmax^2  M_v  (1-z) - ϵ  z\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::AbstractUnbalancedIVRModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching\n\nbeginalign\ntextkvar control  s = (vr_fr+im*vi_fr)*(cr_fr-im*ci_fr)\ntextkvar control (ON)   Ims-q_texton  M_q  z - ϵ  (1-z) \ntextkvar control (OFF)  Ims-q_textoff  -M_q  (1-z) - ϵ  z \ntextvoltage control (ON)   v_r^2 + v_i^2 - v_textmin^2  -M_v  z + ϵ  (1-z) \ntextvoltage control (OFF)  v_r^2 + v_i^2 - v_textmax^2  M_v  (1-z) - ϵ  z\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{FBSUBFPowerModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::FBSUBFPowerModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching\n\nbeginalign\ntextkvar control (ON)   q-q_texton  M_q  z - ϵ  (1-z) \ntextkvar control (OFF)  q-q_textoff  -M_q  (1-z) - ϵ  z \ntextvoltage control (ON)   2  v_r0  v_r + 2  v_i0  v_i - v_r0^2 - v_i0^2 - v_textmin^2  -M_v  z + ϵ  (1-z) \ntextvoltage control (OFF)  2  v_r0  v_r + 2  v_i0  v_i - v_r0^2 - v_i0^2 - v_textmax^2  M_v  (1-z) - ϵ  z\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{FOTRUPowerModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::FOTRUPowerModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching similar to FBSUBFPowerModel\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_capacitor_on_off-Tuple{LPUBFDiagModel, Int64, Int64, Vector{Tuple{Int64, Vector{Int64}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_capacitor_on_off","text":"constraint_capacitor_on_off(pm::LPUBFDiagModel, i::Int; nw::Int=nw_id_default)\n\nAdd constraints to model capacitor switching\n\nbeginalign\ntextkvar control (ON)   q-q_texton  M_q  z - ϵ  (1-z) \ntextkvar control (OFF)  q-q_textoff  -M_q  (1-z) - ϵ  z \ntextvoltage control (ON)   w - v_textmin^2  -M_v  z + ϵ  (1-z) \ntextvoltage control (OFF)  w - v_textmax^2  M_v  (1-z) - ϵ  z\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{AbstractUnbalancedACPModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"constraint_mc_ampacity_from(pm::AbstractUnbalancedACPModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq vm_{fr}^2 i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"nothing to do, no voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"constraint_mc_ampacity_from(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for branch current limit constraint from-side\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{AbstractUnbalancedRectangularModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"constraint_mc_ampacity_from(pm::AbstractUnbalancedRectangularModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq (vr_{fr}^2 + vi_{fr}^2) i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{AbstractUnbalancedWModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"constraint_mc_ampacity_from(pm::AbstractUnbalancedWModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq w_{fr} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_from-Tuple{LPUBFDiagModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_from","text":"constraint_mc_ampacity_from(pm::AbstractUnbalancedWModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})\n\nACP current limit constraint on branches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq w_{fr} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{AbstractUnbalancedACPModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"constraint_mc_ampacity_to(pm::AbstractUnbalancedACPModel, nw::Int, t_idx::Tuple{Int,Int,Int}, t_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches to-side\n\nmathp_{to}^2 + q_{to}^2 \\leq vm_{to}^2 i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"nothing to do, no voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"constraint_mc_ampacity_to(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothin\n\nTemplate function for branch current limit constraint to-side\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{AbstractUnbalancedRectangularModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"constraint_mc_ampacity_to(pm::AbstractUnbalancedRectangularModels, nw::Int, t_idx::Tuple{Int,Int,Int}, t_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches to-side\n\nmathp_{to}^2 + q_{to}^2 \\leq (vr_{to}^2 + vi_{to}^2) i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{AbstractUnbalancedWModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"constraint_mc_ampacity_to(pm::AbstractUnbalancedWModels, nw::Int, t_idx::Tuple{Int,Int,Int}, t_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on branches to-side\n\nmathp_{to}^2 + q_{to}^2 \\leq w_{to} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ampacity_to-Tuple{LPUBFDiagModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ampacity_to","text":"constraint_mc_ampacity_to(pm::AbstractUnbalancedWModels, nw::Int, t_idx::Tuple{Int,Int,Int}, t_connections::Vector{Int}, c_rating::Vector{<:Real})\n\nACP current limit constraint on branches to-side\n\nmathp_{to}^2 + q_{to}^2 \\leq w_{to} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_current_limit-Tuple{AbstractExplicitNeutralACRModel, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector, Vector, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_current_limit","text":"function constraint_mc_branch_current_limit(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector,\n\tt_connections::Vector,\n\tc_rating::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the total current magnitude per conductor.\n\np_fr^2 + q_fr^2 <= r^2 * (vr_fr^2 + vi_fr^2)\np_to^2 + q_to^2 <= r^2 * (vr_to^2 + vi_to^2)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_current_limit-Tuple{AbstractExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector, Vector, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_current_limit","text":"function constraint_mc_branch_current_limit(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector,\n\tt_connections::Vector,\n\tc_rating::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, imposes a bound on the current magnitude per conductor at both ends of the branch (total current, i.e. including shunt contributions).\n\ncr_fr^2 + ci_fr^2 <= c_rating^2\ncr_to^2 + ci_to^2 <= c_rating^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_current_limit-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_current_limit","text":"function constraint_mc_branch_current_limit(\n\tpm::ExplicitNeutralModels,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nFor models with explicit neutrals, imposes a bound on the current magnitude per conductor at both ends of the branch (total current, i.e. including shunt contributions)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_current_series_product_hermitian-Tuple{AbstractUBFModels}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_current_series_product_hermitian","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_flow-Tuple{AbstractUnbalancedAPLossLessModels, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_flow","text":"Already handled by variablemcbranchpowerreal\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_branch_flow-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_branch_flow","text":"constraint_mc_branch_flow(pm::AbstractUnbalancedPowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int})\n\nFor superconducting branch flow (brr and brx all zeros)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_balance","text":"constraint_mc_bus_voltage_balance(pm::AbstractUnbalancedPowerModel, bus_id::Int; nw=nw_id_default)::Nothing\n\nTemplate function for bus voltage balance constraints.\n\nImpose all balance related constraints for which key present in data model of bus. For a discussion of sequence components and voltage unbalance factor (VUF), see @INPROCEEDINGS{girigoudarmolzahnroald-2019, \tauthor={K. Girigoudar and D. K. Molzahn and L. A. Roald}, \tbooktitle={submitted}, \ttitle={{Analytical and Empirical Comparisons of Voltage Unbalance Definitions}}, \tyear={2019}, \tmonth={},     url={https://molzahn.github.io/pubs/girigoudarmolzahnroald-2019.pdf} }\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_drop-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_drop","text":"function constraint_mc_bus_voltage_drop(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\ti::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tr::Matrix{<:Real},\n\tx::Matrix{<:Real}\n)\n\nFor IVR models with explicit neutrals, defines voltage drop over a branch, linking from and to side complex voltage.\n\nvr_to == vr_fr - r*csr_fr + x*csi_fr\nvi_to == vi_fr - r*csi_fr - x*csr_fr\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_drop-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_drop","text":"Defines voltage drop over a branch, linking from and to side complex voltage\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_drop-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_drop","text":"constraint_mc_bus_voltage_drop(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for bus voltage drop constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_ll-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector, Vector}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_ll","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_negative_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_negative_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"on/off bus voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"constraint_mc_bus_voltage_magnitude_on_off(pm::AbstractUnbalancedPowerModel, nw::Int, i::Int, vmin::Vector{<:Real}, vmax::Vector{<:Real})::Nothing\n\nGeneric on/off bus voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_on_off","text":"constraint_mc_bus_voltage_magnitude_on_off(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for on/off voltage magnitude constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_positive_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_positive_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off","text":"on/off bus voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_sqr_on_off","text":"constraint_mc_bus_voltage_magnitude_sqr_on_off(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for on/off voltage magnitude squared constraint for relaxed formulations\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_vuf-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_vuf","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_zero_sequence-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_magnitude_zero_sequence","text":"a = exp(im2π/3) U+ = (1Ua + aUb a^2Uc)/3 U- = (1Ua + a^2Ub aUc)/3 vuf = |U-|/|U+| |U-| <= vufmax|U+| |U-|^2 <= vufmax^2*|U+|^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACPModel}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"bus voltage on/off constraint for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedACRModel}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"bus voltage on/off constraint for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedDCPModel}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for DCP formulation, nothing to do\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedPowerModel}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"constraint_mc_bus_voltage_on_off(pm::AbstractUnbalancedPowerModel; nw::Int=nw_id_default)::Nothing\n\nTemplate function for on/off constraint for bus voltages\"\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_bus_voltage_on_off-Tuple{AbstractUnbalancedWModels}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_bus_voltage_on_off","text":"on/off bus voltage constraint for relaxed forms\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_balance-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_balance","text":"Kirchhoff's current law applied to buses sum(cr + im*ci) = 0\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_balance","text":"constraint_mc_current_balance(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints in current-voltage variable space\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_balance-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_balance","text":"function constraint_mc_current_balance(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool},\n\tbus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_gens::Vector{Tuple{Int,Vector{Int}}},\n\tbus_storage::Vector{Tuple{Int,Vector{Int}}},\n\tbus_loads::Vector{Tuple{Int,Vector{Int}}},\n\tbus_shunts::Vector{Tuple{Int,Vector{Int}}}\n)\n\nKirchhoff's current law applied to buses sum(cr + im*ci) = 0\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_balance_capc-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_balance_capc","text":"constraint_mc_current_balance_capc(pm::AbstractUnbalancedIVRModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nCurrent balance constraints with capacitor control.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_balance_capc-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_balance_capc","text":"constraint_mc_current_balance_capc(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints in current-voltage variable space with capacitor control variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_from-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_from","text":"function constraint_mc_current_from(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tg_sh_fr::Matrix{<:Real},\n\tb_sh_fr::Matrix{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, defines how current distributes over series and shunt impedances of a pi-model branch.\n\ncr_fr == csr_fr + g_sh_fr*vr_fr - b_sh_fr*vi_fr\nci_fr == csi_fr + g_sh_fr*vi_fr + b_sh_fr*vr_fr\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_from-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_from","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_from-Tuple{AbstractUnbalancedIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_from","text":"constraint_mc_current_from(pm::AbstractUnbalancedIVRModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for current constraints on branches (from-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_from-Tuple{ReducedExplicitNeutralIVRModels, Int64, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_from","text":"function constraint_mc_current_from(\n\tpm::ReducedExplicitNeutralIVRModels,\n\tnw::Int,\n\tf_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tg_sh_fr::Matrix{<:Real},\n\tb_sh_fr::Matrix{<:Real};\n\treport::Bool=true\n)\n\nFor branch-reduced IVR models with explicit neutrals, defines how current distributes over series and shunt impedances of a pi-model branch.\n\ncr_fr = csr_fr + g_sh_fr*vr_fr - b_sh_fr*vi_fr\nci_fr = csi_fr + g_sh_fr*vi_fr + b_sh_fr*vr_fr\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_limit-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_limit","text":"Bounds the current magnitude at both from and to side of a branch cr[f_idx]^2 + ci[f_idx]^2 <= c_rating_a^2 cr[t_idx]^2 + ci[t_idx]^2 <= c_rating_a^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_to-Tuple{AbstractExplicitNeutralIVRModel, Int64, Any, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_to","text":"function constraint_mc_current_to(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tt_bus,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tg_sh_to::Matrix{<:Real},\n\tb_sh_to::Matrix{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, defines how current distributes over series and shunt impedances of a pi-model branch.\n\ncr_to == csr_to + g_sh_to*vr_to - b_sh_to*vi_to\nci_to == csi_to + g_sh_to*vi_to + b_sh_to*vr_to\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_to-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_to","text":"Defines how current distributes over series and shunt impedances of a pi-model branch\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_to-Tuple{AbstractUnbalancedIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_to","text":"constraint_mc_current_to(pm::AbstractUnbalancedIVRModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for current constraints on branches (to-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_current_to-Tuple{ReducedExplicitNeutralIVRModels, Int64, Any, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_current_to","text":"function constraint_mc_current_to(\n\tpm::ReducedExplicitNeutralIVRModels,\n\tnw::Int,\n\tt_bus,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tg_sh_to::Matrix{<:Real},\n\tb_sh_to::Matrix{<:Real};\n\treport::Bool=true\n)\n\nFor branch-reduced IVR models with explicit neutrals, defines how current distributes over series and shunt impedances of a pi-model branch.\n\ncr_to = csr_to + g_sh_to*vr_to - b_sh_to*vi_to\nci_to = csi_to + g_sh_to*vi_to + b_sh_to*vr_to\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_active_bounds-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_active_bounds","text":"pmin <= Re(v*cg') <= pmax\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_active_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_active_bounds","text":"constraint_mc_gen_active_bounds(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for defining limits on active power output of a generator where bounds can't be used.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{<:Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"on/off constraint for generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_on_off","text":"constraint_mc_gen_power_on_off(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for generator power on/off constraints (MLD problems)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"pg[i] == pg\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"constraint_mc_gen_power_setpoint_real(pm::AbstractUnbalancedPowerModel, nw::Int, i::Int, pg::Vector{<:Real})::Nothing\n\nGeneric generator real power setpoint constraint\n\nP_g == P_g^setpoint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_power_setpoint_real","text":"constraint_mc_gen_power_setpoint_real(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for generator active power setpoint constraint, for power flow problems\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_reactive_bounds-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_reactive_bounds","text":"qmin <= Im(v*cg') <= qmax\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_gen_reactive_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_gen_reactive_bounds","text":"constraint_mc_gen_reactive_bounds(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for defines limits on reactive power output of a generator where bounds can't be used.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_current-Tuple{AbstractExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_current","text":"function constraint_mc_generator_current(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates expressions for the terminal current flows :crg_bus and :cig_bus.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_current_delta-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_current_delta","text":"function constraint_mc_generator_current_delta(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tconnections::Vector{Int};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates expressions for the terminal current flows :crg_bus and :cig_bus of delta-connected generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_current_wye-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_current_wye","text":"function constraint_mc_generator_current_wye(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tconnections::Vector{Int};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates expressions for the terminal current flows :crg_bus and :cig_bus of wye-connected generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power-Tuple{AbstractUnbalancedActivePowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"Only support wye-connected generators.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"constraint_mc_generator_power(pm::AbstractUnbalancedPowerModel, id::Int; nw::Int=nw_id_default, report::Bool=true, bounded::Bool=true)::Nothing\n\nTemplate function for generator power constraints\n\nDELTA\n\nWhen connected in delta, the load power gives the reference in the delta reference frame. This means\n\nsd_1 = v_abconj(i_ab) = (v_a-v_b)conj(i_ab)\n\nWe can relate this to the per-phase power by\n\nsn_a = v_aconj(i_a)\n    = v_aconj(i_ab-i_ca)\n    = v_aconj(conj(s_abv_ab) - conj(s_cav_ca))\n    = v_a(s_ab(v_a-v_b) - s_ca(v_c-v_a))\n\nSo for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power-Tuple{SDPUBFKCLMXModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"Link the current and power withdrawn by a generator at the bus through a PSD constraint. The rank-1 constraint is dropped in this formulation.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power","text":"function constraint_mc_generator_power(\n    pm::ExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    report::Bool=true\n)\n\nConstrains generator power variables for models with explicit neutrals.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"function constraint_mc_generator_power_delta(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor ACR models with explicit neutrals, links the terminal power flows :pg_bus and :qg_bus to the power variables :pg and :qg for delta-connected generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractNLExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"function constraint_mc_generator_power_delta(\n\tpm::AbstractNLExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates non-linear expressions for the generator power :pd and :qd of delta-connected generators as a function of voltage and current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"function constraint_mc_generator_power_delta(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, links the generator power variables :pd and :qd of delta-connected generators to the voltage and current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"constraint_mc_generator_power_delta(pm::FBSUBFPowerModel, nw::Int, id::Int, bus_id::Int, connections::Vector{Int}, pmin::Vector{<:Real}, pmax::Vector{<:Real}, qmin::Vector{<:Real}, qmax::Vector{<:Real}; report::Bool=true, bounded::Bool=true)\n\nAdds constraints for delta-connected generators similar to delta-connected loads (zero-order approximation).\n\nbeginalign\ntextInitial line-neutral voltage    V_0 = V_r0 +j V_i0\ntextThree-phase delta transformation matrix   M^Delta = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix \ntextSingle-phase delta transformation matrix (triple nodes)   M^Delta = beginbmatrix1  -1 endbmatrix \ntextInitial line-line voltage   V_0^Delta = M^Delta V_0 \ntextLine-line current   (I^Delta)^* = S^Delta oslash V_0^Delta \ntextLine-neutral current   I_bus = (M^Delta)^T I^Delta \ntextBus generation power   S_bus = V_0 oslash I_bus^*\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"constraint_mc_generator_power_delta(pm::FOTPUPowerModel, nw::Int, id::Int, bus_id::Int, connections::Vector{Int}, pmin::Vector{<:Real}, pmax::Vector{<:Real}, qmin::Vector{<:Real}, qmax::Vector{<:Real}; report::Bool=true, bounded::Bool=true)\n\nAdds constraints for delta-connected generators similar to delta-connected loads (zero-order approximation).\n\nbeginalign\ntextInitial line-neutral voltage    V_0 = V_m0 angle V_a0\ntextThree-phase delta transformation matrix   M^Delta = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix \ntextSingle-phase delta transformation matrix (triple nodes)   M^Delta = beginbmatrix1  -1 endbmatrix \ntextInitial line-line voltage   V_0^Delta = M^Delta V_0 \ntextLine-line current   (I^Delta)^* = S^Delta oslash V_0^Delta \ntextLine-neutral current   I_bus = (M^Delta)^T I^Delta \ntextLine-neutral generation power   S_bus = V_0 oslash I_bus^*\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{FOTRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"constraint_mc_generator_power_delta(pm::FOTRUPowerModel, nw::Int, id::Int, bus_id::Int, connections::Vector{Int}, pmin::Vector{<:Real}, pmax::Vector{<:Real}, qmin::Vector{<:Real}, qmax::Vector{<:Real}; report::Bool=true, bounded::Bool=true)\n\nAdds constraints for delta-connected generators similar to delta-connected loads (zero-order approximation).\n\nbeginalign\ntextInitial line-neutral voltage    V_0 = V_r0 +j V_i0\ntextThree-phase delta transformation matrix   M^Delta = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix \ntextSingle-phase delta transformation matrix (triple nodes)   M^Delta = beginbmatrix1  -1 endbmatrix \ntextInitial line-line voltage   V_0^Delta = M^Delta V_0 \ntextLine-line current   (I^Delta)^* = S^Delta oslash V_0^Delta \ntextLine-neutral current   I_bus = (M^Delta)^T I^Delta \ntextLine-neutral generation power   S_bus = V_0 oslash I_bus^*\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"delta connected generator setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"constraint_mc_generator_power_delta(pm::LPUBFDiagModel, nw::Int, gen_id::Int, bus_id::Int, connections::Vector{Int}, pmin::Vector{<:Real}, pmax::Vector{<:Real}, qmin::Vector{<:Real}, qmax::Vector{<:Real}; report::Bool=true, bounded::Bool=true)\n\nAdds constraints for delta-connected generators similar to delta-connected loads (using auxilary variable X).\n\nbeginalign\ntextThree-phase delta transformation matrix   T^Delta = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix \ntextSingle-phase delta transformation matrix (triple nodes)   T^Delta = beginbmatrix1  -1 endbmatrix \ntextLine-neutral generation power   S_bus = diag(T^Delta X_g) \ntextLine-line generation power   S^Delta = diag(X_g T^Delta)\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_delta-Tuple{SOCUBFModels, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_delta","text":"constraint_mc_generator_power_delta(pm::SOCUBFModels, nw::Int, gen_id::Int, bus_id::Int, connections::Vector{Int}, pmin::Vector{<:Real}, pmax::Vector{<:Real}, qmin::Vector{<:Real}, qmax::Vector{<:Real}; report::Bool=true, bounded::Bool=true)\n\nAdds constraints for delta-connected generators similar to delta-connected loads (using auxilary variable X).\n\nbeginalign\ntextThree-phase delta transformation matrix   T^Delta = beginbmatrix1  -1  0 0  1  -1 -1  0  1endbmatrix \ntextSingle-phase delta transformation matrix (triple nodes)   T^Delta = beginbmatrix1  -1 endbmatrix \ntextLine-neutral generation power   S_bus = diag(T^Delta X_g) \ntextLine-line generation power   S^Delta = diag(X_g T^Delta)\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"function constraint_mc_generator_power_wye(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor ACR models with explicit neutrals, links the terminal power flows :pg_bus and :qg_bus to the power variables :pg and :qg for wye-connected generators\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{AbstractNLExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"function constraint_mc_generator_power_wye(\n\tpm::AbstractNLExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, creates non-linear expressions for the generator power :pd and :qd of wye-connected generators as a function of voltage and current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"function constraint_mc_generator_power_wye(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tpmin::Vector{<:Real},\n\tpmax::Vector{<:Real},\n\tqmin::Vector{<:Real},\n\tqmax::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, links the generator power variables :pd and :qd of wye-connected generators to the voltage and current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_generator_power_wye-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_generator_power_wye","text":"wye connected generator setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current-Tuple{AbstractExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current","text":"function constraint_mc_load_current(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, create non-linear expressions for the terminal current flows :crd_bus and :cid_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current","text":"function constraint_mc_load_current(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, create expressions for the terminal current flows :crd_bus and :cid_bus\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"function constraint_mc_load_current_delta(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\ta::Vector{<:Real},\n\talpha::Vector{<:Real},\n\tb::Vector{<:Real},\n\tbeta::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, create non-linear expressions for the terminal current flows :crd_bus and :cid_bus of delta-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"function constraint_mc_load_current_delta(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tconnections::Vector{Int};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, create expressions for the terminal current flows :crd_bus and :cid_bus for delta-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector, Vector}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"We want to express sab = cp.|vab|+im.cq.|vab| iab = conj(sab/vab) = |vab|.(cq-im.cq)/conj(vab) = (1/|vab|).(cp-im.cq)*vab idem for ibc and ica And then sa = va.conj(ia) = va.conj(iab-ica) idem for sb and sc\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_delta-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Vector, Vector}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_delta","text":"constraint_mc_load_current_delta(pm::FOTPUPowerModel, nw::Int, load_id::Int, load_bus_id::Int, cp::Vector, cq::Vector)\n\nNo loads require a current variable. Delta loads are zero-order approximations and wye loads are first-order approximations around the initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_wye-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_wye","text":"function constraint_mc_load_current_wye(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\ta::Vector{<:Real},\n\talpha::Vector{<:Real},\n\tb::Vector{<:Real},\n\tbeta::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, create non-linear expressions for the terminal current flows :crd_bus and :cid_bus of wye-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_current_wye-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_current_wye","text":"function constraint_mc_load_current_wye(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tconnections::Vector{Int};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, create expressions for the terminal current flows :crd_bus and :cid_bus for wye-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"function constraint_mc_load_power(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, the load power does not require any constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"function constraint_mc_load_power(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, link the load power variables :pd and :qd to the voltage, and link together the power, voltage and current variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractUBFModels, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractUnbalancedActivePowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Only support wye-connected, constant-power loads.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"constraint_mc_load_power(pm::AbstractUnbalancedPowerModel, id::Int; nw::Int=nw_id_default, report::Bool=true)::Nothing\n\nTemplate function for load constraints.\n\nCONSTANT POWER\n\nFixes the load power sd.\n\nsd = sd_1 sd_2 sd_3\n\nWhat is actually fixed, depends on whether the load is connected in delta or wye. When connected in wye, the load power equals the per-phase power sn drawn at the bus to which the load is connected.\n\nsd_1 = v_aconj(i_a) = sn_a\n\nCONSTANT CURRENT\n\nSets the active and reactive load power sd to be proportional to the the voltage magnitude.\n\npd = cpvm\nqd = cqvm\nsd = cpvm + jcqvm\n\nCONSTANT IMPEDANCE\n\nSets the active and reactive power drawn by the load to be proportional to the square of the voltage magnitude.\n\npd = cpvm^2\nqd = cqvm^2\nsd = cpvm^2 + jcqvm^2\n\nDELTA\n\nWhen connected in delta, the load power gives the reference in the delta reference frame. This means\n\nsd_1 = v_abconj(i_ab) = (v_a-v_b)conj(i_ab)\n\nWe can relate this to the per-phase power by\n\nsn_a = v_aconj(i_a)\n    = v_aconj(i_ab-i_ca)\n    = v_aconj(conj(s_abv_ab) - conj(s_cav_ca))\n    = v_a(s_ab(v_a-v_b) - s_ca(v_c-v_a))\n\nSo for delta, sn is constrained indirectly.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{FBSUBFPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"constraint_mc_load_power(pm::FBSUBFPowerModel, load_id::Int; nw::Int=nw_id_default, report::Bool=true)\n\nLoad model is linearized around initial operating point. Wye loads are first-order and delta loads are zero-order approximations.\n\nbeginalign\ntextInitial operating point   v_rd^0 + j  v_id^0textwhere(v_m^0)^2 = (v_rd^0)^2 + (v_id^0)^2\ntextConstant power   P^d = P^d0Q^d = Q^d0 \ntextConstant impedance   P^d = a  left(2cdot v_rd  v_rd^0+2  v_id*v_id^0-(v_m^0)^2right)\n  Q^d = b  left(2cdot v_rd  v_rd^0+2  v_id*v_id^0-(v_m^0)^2right)  \ntextConstant current   P^d = a  left(v_m^0 + fracv_rd  v_rd^0+ v_id*v_id^0-(v_m^0)^2v_m^0 right)\n Q^d = b  left(v_m^0 + fracv_rd  v_rd^0+ v_id*v_id^0-(v_m^0)^2v_m^0 right)\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{FOTPUPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"constraint_mc_load_power(pm::FOTPUPowerModel, load_id::Int; nw::Int=nw_id_default, report::Bool=true)\n\nLoad model is linearized around initial operating point. Wye loads are first-order and delta loads are zero-order approximations.\n\nbeginalign\ntextInitial operating point    v_m0 angle v_a0\ntextConstant power   P^d = P^d0Q^d = Q^d0 \ntextConstant impedance   P^d = a cdot left(v_m0^2+2 cdot v_m0 cdot (v_m-v_m0)right)\n  Q^d = b cdot left(v_m0^2+2 cdot v_m0 cdot (v_m-v_m0)right)  \ntextConstant current   P^d = a cdot v_m\n Q^d = b cdot v_m\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{FOTRUPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"constraint_mc_load_power(pm::FOTRUPowerModel, load_id::Int; nw::Int=nw_id_default, report::Bool=true)\n\nLoad model is linearized around initial operating point similar to FBSUBFPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{LPUBFDiagModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"constraint_mc_load_power(pm::LPUBFDiagModel, load_id::Int; nw::Int=nw_id_default, report::Bool=true)\n\nDelta/voltage-dependent load models for LPUBFDiagModel. Delta loads use the auxilary power variable (X). The constant current load model is derived by linearizing around the flat-start voltage solution.\n\nbeginalign\ntextConstant power Rightarrow P_i^d = P_i^d0Q_i^d = Q_i^d0 forall i in L \ntextConstant impedance (Wye) Rightarrow P_i^d = a_i cdot w_iQ_i^d = b_i cdot w_i forall i in L \ntextConstant impedance (Delta) Rightarrow P_i^d = 3cdot a_i cdot w_iQ_i^d = 3cdot b_i cdot w_i forall i in L \ntextConstant current (Wye) Rightarrow P_i^d = fraca_i2cdot left( 1+w_i right)Q_i^d = fracb_i2cdot left( 1+w_i right) forall i in L \ntextConstant current (Delta) Rightarrow P_i^d = fracsqrt3 cdot a_i2cdot left( 1+w_i right)Q_i^d = fracsqrt3 cdot b_i2cdot left( 1+w_i right) forall i in L\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{SDPUBFKCLMXModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"Creates the constraints modelling the (relaxed) voltage-dependent loads for the matrix KCL formulation.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power","text":"function constraint_mc_load_power(\n\tpm::ExplicitNeutralModels,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\treport::Bool=true\n)\n\nConstrains load power variables for models with explicit neutrals.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"function constraint_mc_load_power_delta(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\ta::Vector{<:Real},\n\talpha::Vector{<:Real},\n\tb::Vector{<:Real},\n\tbeta::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor ACR models with explicit neutrals, creates non-linear expressions for terminal power flows ':pdbus' and ':qdbus' of delta-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, LoadModel, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"function constraint_mc_load_power_delta(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tmodel::LoadModel,\n\ta::Vector{<:Real},\n\tb::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, link the load power variables :pd and :qd to the voltage, and link together the power, voltage and current variables for delta-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_delta-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_delta","text":"delta connected load setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"function constraint_mc_load_power_wye(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\ta::Vector{<:Real},\n\talpha::Vector{<:Real},\n\tb::Vector{<:Real},\n\tbeta::Vector{<:Real};\n\treport::Bool=true\n)\n\nFor ACR models with explicit neutrals, creates non-linear expressions for terminal power flows ':pdbus' and ':qdbus' of wye-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Int64, Vector{Int64}, LoadModel, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"function constraint_mc_load_power_wye(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tbus_id::Int,\n\tconnections::Vector{Int},\n\tmodel::LoadModel,\n\ta::Vector{<:Real},\n\tb::Vector{<:Real};\n\treport::Bool=true,\n\tbounded::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, link the load power variables :pd and :qd to the voltage, and link together the power, voltage and current variables for wye-connected loads\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_load_power_wye-Tuple{IVRUPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_load_power_wye","text":"wye connected load setpoint constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_current-Tuple{AbstractLPUBFModel, Int64, Vararg{Any, 5}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_current-Tuple{AbstractUBFModels}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_current","text":"constraint_mc_model_current(pm::AbstractUBFModels; nw::Int=nw_id_default)::Nothing\n\nTemplate function for constraints for model current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_current-Tuple{SDPUBFModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_current-Tuple{SOCConicUBFModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_current-Tuple{SOCUBFModels, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_current","text":"Defines relationship between branch (series) power flow, branch (series) current and node voltage magnitude\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedDCPModel, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"nothing to do, these models do not have complex voltage constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"do nothing by default\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage-Tuple{AbstractUnbalancedPowerModel}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage","text":"constraint_mc_model_voltage(pm::AbstractUnbalancedPowerModel; nw::Int=nw_id_default)::Nothing\n\nTemplate function for model voltage constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{AbstractUBFModels, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"constraint_mc_model_voltage_magnitude_difference(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for constraints for modeling voltage magnitude difference across branches\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"constraint_mc_model_voltage_magnitude_difference(pm::FBSUBFPowerModel, nw::Int, i::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, r::Matrix{<:Real}, x::Matrix{<:Real}, g_sh_fr::Matrix{<:Real}, b_sh_fr::Matrix{<:Real})\n\nVoltage drop over a branch linearized around initial operating point (forward sweep)\n\nbeginalign\ntextInitial operating points   (v_r0^fr + j  v_i0^fr) (v_r0^to + j  v_i0^to)\ntextSeries active power flow   p_s^fr =  p^fr -  g_sh^fr  (v_m0^fr)^2\ntextSeries reactive power flow   q_s^fr =  q^fr +  b_sh^fr  (v_m0^fr)^2\ntextSeries real current flow   cr_s^fr =  frac(p_s^fr  v_r0^fr + q_s^fr  v_i0^fr)(v_m0^fr)^2\ntextSeries imaginary current flow   ci_s^fr =  frac(-q_s^fr  v_r0^fr + p_s^fr  v_i0^fr)(v_m0^fr)^2\ntextSeries real voltage drop  v_r^to = v_r^fr - r  cr_s^fr + x  ci_s^fr \ntextSeries imaginary voltage drop  v_i^to = v_i^fr - x  cr_s^fr - r  ci_s^fr\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_model_voltage_magnitude_difference","text":"Defines voltage drop over a branch, linking from and to side voltage\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_network_power_balance-Tuple{AbstractUnbalancedAPLossLessModels, Int64, Vararg{Any, 8}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_network_power_balance","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_network_power_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_network_power_balance","text":"constraint_mc_network_power_balance(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for constraints that ensures that power generation and demand are balanced in OBF problem\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"function constraint_mc_ohms_yt_from(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tG::Matrix{<:Real},\n\tB::Matrix{<:Real},\n\tG_fr::Matrix{<:Real},\n\tB_fr::Matrix{<:Real}\n)\n\nFor ACR models with explicit neutrals, creates Ohms constraints for ACR models with explicit neutrals.\n\ns_fr = v_fr.*conj(Y*(v_fr-v_to))\ns_fr = (vr_fr+im*vi_fr).*(G-im*B)*([vr_fr-vr_to]-im*[vi_fr-vi_to])\ns_fr = (vr_fr+im*vi_fr).*([G*vr_fr-G*vr_to-B*vi_fr+B*vi_to]-im*[G*vi_fr-G*vi_to+B*vr_fr-B*vr_to])\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np_fr ==     g[c,c] * vm_fr[c]^2 +\n            sum( g[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c) +\n            sum(-g[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                -b[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in conductor_ids(pm))\n            + g_fr[c,c] * vm_fr[c]^2 +\n            sum( g_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) +\n                 b_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c)\n            )\nq_fr == -b[c,c] *vm_fr[c]^2 -\n            sum( b[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c) -\n            sum(-b[c,d]*vm_fr[c]*vm_to[d]*cos(va_fr[c]-va_to[d]) +\n                 g[c,d]*vm_fr[c]*vm_to[d]*sin(va_fr[c]-va_to[d]) for d in conductor_ids(pm))\n            -b_fr[c,c] *vm_fr[c]^2 -\n            sum( b_fr[c,d]*vm_fr[c]*vm_fr[d]*cos(va_fr[c]-va_fr[d]) -\n                 g_fr[c,d]*vm_fr[c]*vm_fr[d]*sin(va_fr[c]-va_fr[d]) for d in conductor_ids(pm) if d != c)\n            )\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints\n\nsfr = vfr.conj(Y(vfr-vto)) sfr = (vrfr+imvi_fr).(G-imB)([vrfr-vrto]-im[vifr-vito]) sfr = (vrfr+imvifr).([Gvrfr-Gvr_to-Bvifr+B*vito]-im[Gvifr-G*vito+Bvr_fr-Bvr_to])\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[f_idx] == -b*(t[f_bus] - t[t_bus])\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedNFAModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"constraint_mc_ohms_yt_from(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)\n\nTemplate function for ohms constraint for branches on the from-side\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"constraint_mc_ohms_yt_from(pm::FOTPUPowerModel, nw::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, G::Matrix{<:Real}, B::Matrix{<:Real}, G_fr::Matrix{<:Real}, B_fr::Matrix{<:Real})\n\nOhm constraints similar to ACPUPowerModel. The nonlinear functions are approximated around initial operating points.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_from-Tuple{FOTRUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_from","text":"constraint_mc_ohms_yt_from(pm::FOTRUPowerModel, nw::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, G::Matrix{<:Real}, B::Matrix{<:Real}, G_fr::Matrix{<:Real}, B_fr::Matrix{<:Real})\n\nCreates Ohms constraints by linearizing (similar to power balance constraints) around initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vararg{Matrix, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"function constraint_mc_ohms_yt_to(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tG::Matrix,\n\tB::Matrix,\n\tG_to::Matrix,\n\tB_to::Matrix\n)\n\nFor ACR models with explicit neutrals, creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form).\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vararg{Matrix, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\np[t_idx] ==  (g+g_to)*v[t_bus]^2 + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[t_bus]-t[f_bus])) + (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\nq[t_idx] == -(b+b_to)*v[t_bus]^2 - (-b*tr+g*ti)/tm*(v[t_bus]*v[f_bus]*cos(t[f_bus]-t[t_bus])) + (-g*tr-b*ti)/tm*(v[t_bus]*v[f_bus]*sin(t[t_bus]-t[f_bus]))\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedAPLossLessModels, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Do nothing, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"constraint_mc_ohms_yt_to(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)\n\nTemplate function for ohms constraint for branches on the to-side\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vararg{Any, 11}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"Creates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"constraint_mc_ohms_yt_to(pm::FOTPUPowerModel, nw::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, G::Matrix{<:Real}, B::Matrix{<:Real}, G_to::Matrix{<:Real}, B_to::Matrix{<:Real})\n\nOhm constraints similar to ACPUPowerModel. The nonlinear functions are approximated around initial operating points.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{FOTRUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vararg{Matrix, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"constraint_mc_ohms_yt_to(pm::FOTRUPowerModel, nw::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, G::Matrix, B::Matrix, G_to::Matrix, B_to::Matrix)\n\nCreates Ohms constraints (yt post fix indicates that Y and T values are in rectangular form)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_ohms_yt_to-Tuple{NFAUPowerModel, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_ohms_yt_to","text":"nothing to do, this model is symmetric\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_oltc_tap_fix-Tuple{AbstractUnbalancedPowerModel, Int64, Vector, Vector}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_oltc_tap_fix","text":"For a variable tap transformer, fix the tap variables which are fixed. For example, an OLTC where the third phase is fixed, will have tap variables for all phases, but the third tap variable should be fixed.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"constraint_mc_power_balance(pm::AbstractUnbalancedActivePowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\npower balanace constraint with line shunts and transformers, active power only\n\np_br + p_tr + p_sw == p_g - p_s - p_d - G\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"constraint_mc_power_balance(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{FBSUBFPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"constraint_mc_power_balance(pm::FBSUBFPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints similar to ACRUPowerModel with shunt current calculated using initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{FOTPUPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"constraint_mc_power_balance(pm::FOTPUPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance equations similar to ACPUPowerModel. The nonlinear functions are approximated around initial operating point.\n\nbeginalign\ntextInitial operating points   v_m0^t angle v_a0^tv_m0^u angle v_a0^u\n v_m^t^2 Rightarrow v_m0^t^2+2 cdot v_m0^t cdot (v_m^t-v_m0^t)\n v_m^t cdot v_m^u cdot cos(v_a^t-v_a^u) Rightarrow v_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u) +\nbeginbmatrix\nv_m0^u cdot cos(v_a0^t-v_a0^u) \nv_m0^t cdot cos(v_a0^t-v_a0^u) \n-v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u) \nv_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u)\nendbmatrix^top\nbeginbmatrix\nv_m^t-v_m0^t \nv_m^u-v_m0^u \nv_a^t-v_a0^t \nv_a^u-v_a0^u\nendbmatrix \n v_m^t cdot v_m^u cdot sin(v_a^t-v_a^u) Rightarrow v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u) +\nbeginbmatrix\nv_m0^u cdot sin(v_a0^t-v_a0^u) \nv_m0^t cdot sin(v_a0^t-v_a0^u) \nv_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u) \n-v_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u)\nendbmatrix^top\nbeginbmatrix\nv_m^t-v_m0^t \nv_m^u-v_m0^u \nv_a^t-v_a0^t \nv_a^u-v_a0^u\nendbmatrix\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{FOTRUPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"constraint_mc_power_balance(pm::FOTRUPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints similar to ACRUPowerModel with shunt current linearized around initial operating point.\n\nbeginalign\ntextInitial operating point   (v_r0 + j  v_i0)\n v_r  v_i = v_r0  v_i0 + v_r  v_i0 + v_r0  v_i - 2  v_r0  v_i0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{LPUBFDiagModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{SDPUBFKCLMXModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"Shunt handling in matrix form: I = Y.U S = U.I' = U.(Y.U)' = U.U'.Y' = W.Y'   = (Wr+j.Wi)(G+jB)' = (Wr+j.Wi)(G'-j.B') = (Wr.G'+Wi.B')+j(-Wr.B'+Wi.G') P =  Wr.G'+Wi.B' Q = -Wr.B'+Wi.G'\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance","text":"function constraint_mc_power_balance(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool},\n\tbus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}},\n\tbus_gens::Vector{Tuple{Int,Vector{Int}}},\n\tbus_storage::Vector{Tuple{Int,Vector{Int}}},\n\tbus_loads::Vector{Tuple{Int,Vector{Int}}},\n\tbus_shunts::Vector{Tuple{Int,Vector{Int}}}\n)\n\nImposes power balance constraints at each ungrounded terminal of bus i for rectangular voltage models with explicit neutrals. sum(p + im*q) = 0\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::AbstractUnbalancedACPModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control.\n\nbeginalign\n     Bs = z  bs \n    textcapacitor ON   z = 1 \n    textcapacitor OFF  z = 0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::AbstractUnbalancedACRModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control.\n\nbeginalign\n     Bt = z  bs \n    textcapacitor ON   z = 1 \n    textcapacitor OFF  z = 0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"nothing to do in capc, no complex voltage variables in these models\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)\n\nTemplate function for KCL constraints with capacitor control variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{FBSUBFPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::FBSUBFPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control similar to ACRUPowerModel with shunt current calculated using initial operating point.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{FOTPUPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::FOTPUPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control with shunt current calculated using initial operating point.\n\nbeginalign\n     B_s = b_s  z cq_sh = B_s  v \n     B_s cdot v_m^t cdot v_m^u cdot cos(v_a^t-v_a^u) Rightarrow B_s0 cdot v_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u) +\nbeginbmatrix\nB_s0 cdot v_m0^u cdot cos(v_a0^t-v_a0^u) \nB_s0 cdot v_m0^t cdot cos(v_a0^t-v_a0^u) \n-B_s0 cdot v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u) \nB_s0 cdot v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u) \nv_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u)\nendbmatrix^top\nbeginbmatrix\nv_m^t-v_m0^t \nv_m^u-v_m0^u \nv_a^t-v_a0^t \nv_a^u-v_a0^u \nB_s -B_s0\nendbmatrix \n B_s cdot v_m^t cdot v_m^u cdot sin(v_a^t-v_a^u) Rightarrow B_s0 cdot v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u) +\nbeginbmatrix\n B_s0 cdot v_m0^u cdot sin(v_a0^t-v_a0^u) \n B_s0 cdot v_m0^t cdot sin(v_a0^t-v_a0^u) \n B_s0 cdot v_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u) \n -B_s0 cdot v_m0^t cdot v_m0^u cdot cos(v_a0^t-v_a0^u) \n v_m0^t cdot v_m0^u cdot sin(v_a0^t-v_a0^u)\nendbmatrix^top\nbeginbmatrix\nv_m^t-v_m0^t \nv_m^u-v_m0^u \nv_a^t-v_a0^t \nv_a^u-v_a0^u \nB_s -B_s0\nendbmatrix\n\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{FOTRUPowerModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::FOTRUPowerModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control with shunt current calculated using initial operating point.\n\nbeginalign\n     B_t = b_s  z cq_sh = B_t  v \n    textFOT approximation   B_t  v_r  v_i = B_t0  v_r0  v_i0 + B_t  v_r0  v_i0 + B_t0  v_r  v_i0 + B_t0  v_r0  v_i - 3  B_t0  v_r0  v_i0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_capc-Tuple{LPUBFDiagModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_capc","text":"constraint_mc_power_balance_capc(pm::LPUBFDiagModel, nw::Int, i::Int, terminals::Vector{Int}, grounded::Vector{Bool}, bus_arcs::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_sw::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_arcs_trans::Vector{Tuple{Tuple{Int,Int,Int},Vector{Int}}}, bus_gens::Vector{Tuple{Int,Vector{Int}}}, bus_storage::Vector{Tuple{Int,Vector{Int}}}, bus_loads::Vector{Tuple{Int,Vector{Int}}}, bus_shunts::Vector{Tuple{Int,Vector{Int}}})\n\nPower balance constraints with capacitor control linearized using McCormick envelopes\n\nbeginalign\n     B_s = b_s  z cq_sh = B_s  w \n    textUnderestimator   cq_sh  B_s  w_textmin cq_sh  b_s  w  + B_s  w_textmax - b_s  w_textmax\n    textOverestimator    cq_sh  B_s  w_textmax cq_sh  b_s  w  + B_s  w_textmin - b_s  w_textmin\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"power balance constraint with line shunts and transformers for load shed problem, DCP formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"constraint_mc_power_balance_shed(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints for load shed problem\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed","text":"KCL for load shed problem with transformers (AbstractWForms)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_shed_simple-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_shed_simple","text":"power balance constraint with line shunts and transformers for load shed problem, DCP formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_simple-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_simple","text":"constraint_mc_power_balance_simple(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints for simple load shedding\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vector{Tuple{Tuple{Int64, Int64, Int64}, Vector{Int64}}}, Vararg{Vector{Tuple{Int64, Vector{Int64}}}, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"constraint_mc_power_balance_slack(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for KCL constraints which include a slack power at every bus\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_balance_slack-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Tuple{Int64, Int64, Int64}, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Int64, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Int64, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Int64, Vector{Union{Int64, String}}}}, Vector{<:Tuple{Int64, Vector{Union{Int64, String}}}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_balance_slack","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_losses-Tuple{AbstractUBFModels, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_losses-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"constraint_mc_power_losses(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for constraints for modeling power losses across branches\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_losses-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"constraint_mc_power_losses(pm::FBSUBFPowerModel, nw::Int, i::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, r::Matrix{<:Real}, x::Matrix{<:Real}, g_sh_fr::Matrix{<:Real}, g_sh_to::Matrix{<:Real}, b_sh_fr::Matrix{<:Real}, b_sh_to::Matrix{<:Real})\n\nBranch flow model power flow equation linearized around initial operating point (backward sweep)\n\nbeginalign\ntextInitial operating points   (v_r0^fr + j  v_i0^fr) (v_r0^to + j  v_i0^to)\ntextVoltage drop   v_drop = (v_r0^fr + j  v_i0^fr) - (v_r0^to + j  v_i0^to)\ntextLine series admittance  y = (r+j  x)^-1\ntextPower loss   s_loss = v_drop  (y  v_drop)^*\ntextActive power flow   p^fr + p^to = g_sh^fr  (v_m0^fr)^2 +  g_sh^to  (v_m0^to)^2 + Re(s_loss)\ntextReactive power flow   q^fr + q^to = -b_sh^fr  (v_m0^fr)^2 -  b_sh^to  (v_m0^to)^2 + Im(s_loss)\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_power_losses-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}, Matrix{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_power_losses","text":"Defines branch flow model power flow equations\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_regen_setpoint_active-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_regen_setpoint_active","text":"qq[i] == qq\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Int64, Vector{Int64}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_current_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_current_limit","text":"constraint_mc_storage_current_limit(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for storage current limit constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUBFAModel, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"Neglects the active and reactive loss terms associated with the squared current magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUBFModels, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"Neglects the active and reactive loss terms associated with the squared current magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedACRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedAPLossLessModels, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"active power only, lossless model\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedAPLossLessModels, Int64, Vararg{Any, 6}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"active power only\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"constraint_mc_storage_losses(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for storage loss constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_losses-Tuple{AbstractUnbalancedWConvexModels, Int64, Int64, Int64, Vector{Int64}, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_losses","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{Int64}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Vector{<:Real}, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_on_off","text":"constraint_mc_storage_on_off(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTempate function for storage on/off constraints for MLD problems\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_power_setpoint_real","text":"constraint_mc_storage_power_setpoint_real(pm::AbstractUnbalancedPowerModel, nw::Int, i::Int, ps::Real)::Nothing\n\nGeneric storage real power setpoint constraint\n\nP_s == P_s^setpoint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_power_setpoint_real-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_power_setpoint_real","text":"constraint_mc_storage_power_setpoint_real(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for storage active power setpoint constraint, for power flow problems\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{Int64}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vector{Int64}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"constraint_mc_storage_thermal_limit(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for storage thermal limit constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_storage_thermal_limit-Tuple{LPUBFDiagModel, Int64, Int64, Vector{Int64}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_storage_thermal_limit","text":"constraintmcstoragethermallimit(pm::AbstractUnbalancedPowerModel, nw::Int, i::Int, connections::Vector{Int}, rating::Real)\n\nLinear version of storage thermal limit constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{AbstractUnbalancedACPModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"constraint_mc_switch_ampacity(pm::AbstractUnbalancedACPModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on switches\n\nmathp_{fr}^2 + q_{fr}^2 \\leq vm_{fr}^2 i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"nothing to do, no voltage variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"constraint_mc_switch_ampacity(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for switch current limit constraint from-side\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{AbstractUnbalancedRectangularModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"constraint_mc_switch_ampacity(pm::AbstractUnbalancedRectangularModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on switches\n\nmathp_{fr}^2 + q_{fr}^2 \\leq (vr_{fr}^2 + vi_{fr}^2) i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{AbstractUnbalancedWModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"constraint_mc_switch_ampacity(pm::AbstractUnbalancedWModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})::Nothing\n\nACP current limit constraint on switches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq w_{fr} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_ampacity-Tuple{LPUBFDiagModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_ampacity","text":"constraint_mc_switch_ampacity(pm::AbstractUnbalancedWModels, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, c_rating::Vector{<:Real})\n\nACP current limit constraint on switches from-side\n\nmathp_{fr}^2 + q_{fr}^2 \\leq w_{fr} i_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current","text":"function constraint_mc_switch_current(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int};\n\treport::Bool=true\n)\n\nFor IVR models with explicit neutrals, create expressions for the terminal current flows :crsw_bus and cisw_bus, and link the from-side to the to-side switch current\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current","text":"function constraint_mc_switch_current(\n    pm::ExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    report::Bool=true\n)\n\nFor models with explicit neutrals, link the switch currents or create appropiate expressions for them.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current_limit-Tuple{AbstractExplicitNeutralACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current_limit","text":"function constraint_mc_switch_current_limit(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the switch current magnitude per conductor. Note that a bound on the from-side implies the same bound on the to-side current, so it suffices to apply this only explicitly at the from-side.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current_limit-Tuple{AbstractExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current_limit","text":"function constraint_mc_switch_current_limit(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tconnections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nFor IVR models with explicit neutrals, imposes a bound on the switch current magnitude per conductor. Note that a bound on the from-side implies the same bound on the to-side current, so it suffices to apply this only explicitly at the from-side.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current_limit-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current_limit","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_current_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_current_limit","text":"constraint_mc_switch_current_limit(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for switch current limit constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_power-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_power","text":"function constraint_mc_switch_power(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int};\n\treport::Bool=true\n)\n\nconstraintmcswitchpower(     pm::ReducedExplicitNeutralIVRModels,     nw::Int,     id::Int,     fidx::Tuple{Int,Int,Int},     tidx::Tuple{Int,Int,Int},     fconnections::Vector{Int},     t_connections::Vector{Int};     report::Bool=true )\n\nFor IVR models with explicit neutrals, create expressions for the terminal power flows :psw_bus and qsw_bus, and link the from-side to the to-side switch power\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_power-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_power","text":"function constraint_mc_switch_power(\n    pm::ExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    report::Bool=true\n)\n\nFor IVR models with explicit neutrals, link the switch power or create appropiate expressions for them\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_power_on_off-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_power_on_off-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_power_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state","text":"constraint_mc_switch_state(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for switch state constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedDCPModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedNFAModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"nothing to do\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{AbstractUnbalancedWModels, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_closed-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_closed","text":"constraint_mc_switch_state_closed(pm::FBSUBFPowerModel, nw::Int, f_bus::Int, t_bus::Int, f_connections::Vector{Int}, t_connections::Vector{Int})\n\nVoltage constraints for closed switches similar to ACRUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"constraint_mc_switch_state_on_off(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default, relax::Bool=false)::Nothing\n\nTemplate function for switch state on/off constraints (MLD problems)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_on_off-Tuple{AbstractUnbalancedWModels, Int64, Int64, Int64, Int64, Vector{Int64}, Vector{Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_on_off","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_open-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_open","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_open-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_open","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_state_open-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_state_open","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractExplicitNeutralACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"function constraint_mc_switch_thermal_limit(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the switch power magnitude per conductor. Note that a bound on the from-side implies the same bound on the to-side power when the switch is closed (equal voltages), and also when it is open since the power then equals zero on both ends.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractLPUBFModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"function constraint_mc_switch_thermal_limit(\n\tpm::AbstractNLExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nThis method is not yet implemented for AbstractLPUBFModel. If the limit is finite, a warning is thrown.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractNLExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"function constraint_mc_switch_thermal_limit(\n\tpm::AbstractNLExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nFor IVR models with explicit neutrals, imposes a bound on the switch power magnitude per conductor. Note that a bound on the from-side implies the same bound on the to-side power when the switch is closed (equal voltages), and also when it is open since the power then equals zero on both ends.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"function constraint_mc_switch_thermal_limit(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trating::Vector{<:Real}\n)\n\nFor quadratic IVR models with explicit neutrals, throw an error because this cannot be represented quadratically without introducing explicit power variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"constraint_mc_switch_thermal_limit(pm::AbstractUnbalancedActivePowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, rating::Vector{<:Real})::Nothing\n\nActive power only switch thermal limit constraint\n\nmath-S_{max} \\leq p_{fr} \\leq S_{max}\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_switch_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_switch_thermal_limit","text":"constraint_mc_switch_thermal_limit(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for switch thermal limit constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractExplicitNeutralACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"function constraint_mc_thermal_limit_from(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the from-side line power magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"function constraint_mc_thermal_limit_from(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor IVR models with explicit neutrals, imposes a bound on the from-side line power magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"function constraint_mc_thermal_limit_from(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor quadratic IVR models with explicit neutrals, throw an error because this cannot be represented quadratically without introducing explicit power variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"-rate_a <= p[f_idx] <= rate_a\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"p[f_idx]^2 + q[f_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"constraint_mc_thermal_limit_from(pm::AbstractUnbalancedPowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, rate_a::Vector{<:Real})::Nothing\n\nGeneric thermal limit constraint for branches (from-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_from-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_from","text":"constraint_mc_thermal_limit_from(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for branch thermal constraints (from-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractExplicitNeutralACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"function constraint_mc_thermal_limit_to(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tt_idx::Tuple{Int,Int,Int},\n\tt_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the from-side line power magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"function constraint_mc_thermal_limit_to(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\tt_idx::Tuple{Int,Int,Int},\n\tt_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor IVR models with explicit neutrals, imposes a bound on the to-side line power magnitude.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"function constraint_mc_thermal_limit_to(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tt_idx::Tuple{Int,Int,Int},\n\tt_connections::Vector{Int},\n\trate_a::Vector{<:Real}\n)\n\nFor quadratic IVR models with explicit neutrals, throw an error because this cannot be represented quadratically without introducing explicit power variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedActivePowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedIVRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"p[t_idx]^2 + q[t_idx]^2 <= rate_a^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"constraint_mc_thermal_limit_to(pm::AbstractUnbalancedPowerModel, nw::Int, t_idx::Tuple{Int,Int,Int}, t_connections::Vector{Int}, rate_a::Vector{<:Real})::Nothing\n\nGeneric thermal limit constraint for branches (to-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_thermal_limit_to-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_thermal_limit_to","text":"constraint_mc_thermal_limit_to(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for branch thermal constraints (to-side)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedNFAModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"nothing to do, no voltage angle variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedPolarModels, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"Creates phase angle constraints at reference buses\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"constraint_mc_theta_ref(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for reference angle constraints.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedWModels, Int64, Int64, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"do nothing, no way to represent this in these variables\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{FBSUBFPowerModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"constraint_mc_theta_ref(pm::FBSUBFPowerModel, nw::Int, i::Int, va_ref::Vector{<:Real})\n\nCreates phase angle constraints at reference buses similar to ACRUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{LPUBFDiagModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"balanced three-phase phasor\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_theta_ref-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{<:Real}, Vector{Int64}, Vector{Bool}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_theta_ref","text":"function constraint_mc_theta_ref(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tva::Vector{<:Real},\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool}\n)\n\nCreates phase angle constraints at bus i\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_current-Tuple{AbstractExplicitNeutralIVRModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_current","text":"function constraint_mc_transformer_current(\n\tpm::AbstractExplicitNeutralIVRModel,\n\ti::Int;\n\tnw::Int=nw_id_default,\n\tfix_taps::Bool=true\n)\n\nFor IVR models with explicit neutrals, links the current variables of the from-side and to-side transformer windings, and creates expressions for the terminal current flows\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_current_dy-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_current_dy","text":"function constraint_mc_transformer_current_dy(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor IVR models with explicit neutrals, links the current variables of the from-side and to-side transformer windings, and creates expressions for the terminal current flows for delta-wye connected transformers\n\nscale*cr_fr_P + cr_to_P == 0\nscale*ci_fr_P + ci_to_P == 0\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_current_yy-Tuple{AbstractExplicitNeutralIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_current_yy","text":"function constraint_mc_transformer_current_yy(\n\tpm::AbstractExplicitNeutralIVRModel,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor IVR models with explicit neutrals, links the current variables of the from-side and to-side transformer windings, and creates expressions for the terminal current flows for wye-wye connected transformers\n\nscale*cr_fr_P + cr_to_P == 0\nscale*ci_fr_P + ci_to_P == 0\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power","text":"constraint_mc_transformer_power(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default, fix_taps::Bool=true)::Nothing\n\nTemplate function for Transformer constraints in Power-voltage space, considering winding type, conductor order, polarity and tap settings.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power-Tuple{NFAUPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power","text":"constraint_mc_transformer_power(pm::NFAUPowerModel, i::Int; nw::Int=nw_id_default)\n\ntransformer active power only constraint pf=-pt\n\np_ffc == -pttc\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"function constraint_mc_transformer_power_dy(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor ACR models with explicit neutrals, links the from-side and to-side power variables of delta-wye connected transformers. Expressions for the terminal power flow variables are also added.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"This function adds all constraints required to model a two-winding, delta-wye connected transformer.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"delta-wye transformer power constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"constraint_mc_transformer_power_dy(pm::FBSUBFPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, delta-wye connected transformer similar to ACRUPowerModel with power constraints using initial operating point voltage instead of actual voltage variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"constraint_mc_transformer_power_dy(pm::FOTPUPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, delta-wye connected transformer similar to ACPUPowerModel with voltage constraints linearized using first-order Taylor approximation and power constraints simplified using initial operating point voltage instead of actual voltage variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{FOTRUPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"constraint_mc_transformer_power_dy(pm::FOTRUPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, delta-wye connected transformer similar to ACRUPowerModel with power constraints using initial operating point voltage instead of actual voltage variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_dy-Tuple{SOCUBFModels, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_dy","text":"constraint_mc_transformer_power_dy(pm::SOCUBFModels, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nConstraints to model a two-winding, delta-wye connected transformer.\n\nbeginalign\n    W_fr^ij-W_fr^ik-W_fr^lj+W_fr^lk = t_m^2W_to^ij forall ij in 123 textand kl in 231   \n    S_fr = X_tT_t \n    S_fr^Delta = T_tX_t \n     s_fr^Delta + s_to = 0\n     M_Delta =\n    beginbmatrix\n    W_fr  X_t \n     X_t^textH   L_Delta\n    endbmatrix succeq 0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"function constraint_mc_transformer_power_yy(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor ACR models with explicit neutrals, links the from-side and to-side power variables of wye-wye connected transformers. Expressions for the terminal power flow variables are also added.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"This function adds all constraints required to model a two-winding, wye-wye connected transformer.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{AbstractUnbalancedIVRModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"wye-wye transformer power constraint for IVR formulation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{FBSUBFPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"constraint_mc_transformer_power_yy(pm::FBSUBFPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, wye-wye connected transformer similar to ACRUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{FOTPUPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"constraint_mc_transformer_power_yy(pm::FOTPUPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, wye-wye connected transformer similar to ACPUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{FOTRUPowerModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"constraint_mc_transformer_power_yy(pm::FOTRUPowerModel, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nAdd all constraints required to model a two-winding, wye-wye connected transformer similar to ACRUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{LPUBFDiagModel, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"Links to and from power and voltages in a wye-wye transformer, assumes tm_fixed is true\n\nw_fr_i=(pol_i*tm_scale*tm_i)^2w_to_i\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_power_yy-Tuple{SOCUBFModels, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_power_yy","text":"constraint_mc_transformer_power_yy(pm::SOCUBFModels, nw::Int, trans_id::Int, f_bus::Int, t_bus::Int, f_idx::Tuple{Int,Int,Int}, t_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, pol::Int, tm_set::Vector{<:Real}, tm_fixed::Vector{Bool}, tm_scale::Real)\n\nConstraints to model a two-winding, wye-wye connected transformer.\n\nbeginalign\n     W_fr = T_mT_m^H W_to  \n     s_fr + s_to = 0\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_thermal_limit-Tuple{AbstractExplicitNeutralACRModel, Int64, Int64, Tuple, Tuple, Int64, Int64, Vector, Vector, ConnConfig, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_thermal_limit","text":"function constraint_mc_transformer_thermal_limit(\n\tpm::AbstractExplicitNeutralACRModel,\n\tnw::Int,\n\tid::Int,\n\tf_idx::Tuple,\n\tt_idx::Tuple,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_connections::Vector,\n\tt_connections::Vector,\n\tconfig::ConnConfig,\n\tsm_ub::Real;\n\treport::Bool=true\n)\n\nFor ACR models with explicit neutrals, imposes a bound on the magnitude of the total apparent power at each winding of the transformer.\n\nsum(pt_fr)^2 + sum(qt_fr)^2 <= sm_ub^2\nsum(pt_to)^2 + sum(qt_to)^2 <= sm_ub^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_thermal_limit-Tuple{AbstractNLExplicitNeutralIVRModel, Int64, Int64, Tuple, Tuple, Int64, Int64, Vector, Vector, ConnConfig, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_thermal_limit","text":"function constraint_mc_transformer_thermal_limit(\n\tpm::AbstractNLExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tf_idx::Tuple,\n\tt_idx::Tuple,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_connections::Vector,\n\tt_connections::Vector,\n\tconfig::ConnConfig,\n\tsm_ub::Real;\n\treport::Bool=true\n)\n\nFor non-linear IVR models with explicit neutrals, imposes a bound on the magnitude of the total apparent power at both windings. Expressions are created for the transformer power variables.\n\nsum(pt_fr)^2 + sum(qt_fr)^2 <= sm_ub^2\nsum(pt_to)^2 + sum(qt_to)^2 <= sm_ub^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_thermal_limit-Tuple{AbstractQuadraticExplicitNeutralIVRModel, Int64, Int64, Tuple, Tuple, Int64, Int64, Vector, Vector, ConnConfig, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_thermal_limit","text":"function constraint_mc_transformer_thermal_limit(\n\tpm::AbstractQuadraticExplicitNeutralIVRModel,\n\tnw::Int,\n\tid::Int,\n\tf_idx::Tuple,\n\tt_idx::Tuple,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_connections::Vector,\n\tt_connections::Vector,\n\tconfig::ConnConfig,\n\tsm_ub::Real;\n\treport::Bool=true\n)\n\nFor quadratic IVR models with explicit neutrals, imposes a bound on the magnitude of the total apparent power at both windings.\n\nsum(pt_fr)^2 + sum(qt_fr)^2 <= sm_ub^2\nsum(pt_to)^2 + sum(qt_to)^2 <= sm_ub^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_thermal_limit-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_thermal_limit","text":"function constraint_mc_transformer_thermal_limit(\n\tpm::ExplicitNeutralModels,\n\tid::Int;\n\tnw::Int=nw_id_default,\n\tbounded::Bool=true,\n\treport::Bool=true,\n)\n\nImposes a bound on the total apparent at each transformer winding\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_voltage-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_voltage","text":"function constraint_mc_transformer_voltage(\n    pm::ExplicitNeutralModels,\n    i::Int;\n    nw::Int=nw_id_default,\n    fix_taps::Bool=true\n)\n\nFor models with explicit neutrals, links the voltage of the from-side and to-side transformer windings\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_voltage_dy-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_voltage_dy","text":"function constraint_mc_transformer_voltage_dy(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor rectangular voltage models with explicit neutrals, links the voltage of the from-side and to-side transformer windings for delta-wye connected transformers\n\nMd*vr_fr_P == scale * (vr_to_P - vr_to_n)\nMd*vi_fr_P == scale * (vi_to_P - vi_to_n)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_transformer_voltage_yy-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Int64, Vector{<:Real}, Vector{Bool}, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_transformer_voltage_yy","text":"function constraint_mc_transformer_voltage_yy(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ttrans_id::Int,\n\tf_bus::Int,\n\tt_bus::Int,\n\tf_idx::Tuple{Int,Int,Int},\n\tt_idx::Tuple{Int,Int,Int},\n\tf_connections::Vector{Int},\n\tt_connections::Vector{Int},\n\tpol::Int,\n\ttm_set::Vector{<:Real},\n\ttm_fixed::Vector{Bool},\n\ttm_scale::Real\n)\n\nFor rectangular voltage models with explicit neutrals, links the voltage of the from-side and to-side transformer windings for wye-wye connected transformers\n\n(vr_fr_P-vr_fr_n) == scale * (vr_to_P.-vr_to_n)\n(vi_fr_P-vi_fr_n) == scale * (vi_to_P.-vi_to_n)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_absolute-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_absolute","text":"function constraint_mc_voltage_absolute(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool},\n\tvmin::Vector{<:Real},\n\tvmax::Vector{<:Real};\n\treport::Bool=true\n)\n\nImposes absolute voltage magnitude bounds for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_absolute-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_absolute","text":"function constraint_mc_voltage_absolute(\n    pm::RectangularVoltageExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    bounded::Bool=true,\n    report::Bool=true,\n)\n\nImposes absolute voltage magnitude bounds for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUBFModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"This is duplicated at PowerModelsDistribution level to correctly handle the indexing of the shunts.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedACRModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedIVRModel, Int64, Any, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"Bounds the voltage angle difference between bus pairs\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedNFAModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"nothing to do, these models do not have angle difference constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedPolarModels, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"constraint_mc_voltage_angle_difference(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for constraints of the voltage angle difference across branches\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{FBSUBFPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"constraint_mc_voltage_angle_difference(pm::FBSUBFPowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, angmin::Vector{<:Real}, angmax::Vector{<:Real})\n\nNothing to do, this model ignores angle difference constraints\"\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_angle_difference-Tuple{FOTRUPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{Int64}, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_angle_difference","text":"constraint_mc_voltage_angle_difference(pm::FOTRUPowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, t_connections::Vector{Int}, angmin::Vector{<:Real}, angmax::Vector{<:Real})\n\nNothing to do, this model ignores angle difference constraints\"\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_fixed-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{<:Real}, Vector{<:Real}, Vector{Int64}, Vector{Bool}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_fixed","text":"function constraint_mc_voltage_fixed(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tvm::Vector{<:Real},\n\tva::Vector{<:Real},\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool}\n)\n\nFixes the voltage variables at bus i to vm.*exp.(im*va)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"vmin <= vm[i] <= vmax\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"constraint_mc_voltage_magnitude_bounds(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for voltage magnitude bounds constraints.\n\nThis constraint captures problem agnostic constraints that define limits for voltage magnitudes (where variable bounds cannot be used). Notable examples include IVRUPowerModel and ACRUPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{FBSUBFPowerModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"constraint_mc_voltage_magnitude_bounds(pm::FBSUBFPowerModel, nw::Int, i::Int, vmin::Vector{<:Real}, vmax::Vector{<:Real})\n\nUpper voltage magnitude limits are linearized using outer approximation. Lower voltage magnitude limits are linearized around initial operating point.\n\nbeginalign\ntextInitial operating point   v_r^0 + j  v_i^0textwhere(v_m^0)^2 = (v_r^0)^2 + (v_i^0)^2\ntextLower limits   2  v_r  v_r^0 + 2  v_i  v_i^0 - (v_m^0)^2  v_min^2\ntextUpper limits  -v_max   v_r  v_max\n -v_max   v_i  v_max\n-sqrt2  v_max   v_r + v_i  sqrt2  v_max\n -sqrt2  v_max   v_r - v_i  sqrt2  v_max\nendalign\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds-Tuple{FOTRUPowerModel, Int64, Int64, Vector{<:Real}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_bounds","text":"constraint_mc_voltage_magnitude_bounds(pm::FOTRUPowerModel, nw::Int, i::Int, vmin::Vector{<:Real}, vmax::Vector{<:Real})\n\nLinearized voltage magnitude limits similar to FBSUBFPowerModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_fixed-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{<:Real}, Vector{Int64}, Vector{Bool}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_fixed","text":"function constraint_mc_voltage_magnitude_fixed(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tvm::Vector{<:Real},\n\tva::Vector{<:Real},\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool}\n)\n\nFixes the voltage variables at bus i to vm.*exp.(im*va)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedACPModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedACRModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedActivePowerModel, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"nothing to do\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"constraint_mc_voltage_magnitude_only(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for voltage magnitude setpoint constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_magnitude_only-Tuple{AbstractUnbalancedWModels, Int64, Int64, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_magnitude_only","text":"vm[i] == vmref\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_pairwise-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64, Int64, Vector{Int64}, Vector{Bool}, Vector{<:Tuple{Any, Any, Real}}, Vector{<:Tuple{Any, Any, Real}}}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_pairwise","text":"function constraint_mc_voltage_pairwise(\n\tpm::RectangularVoltageExplicitNeutralModels,\n\tnw::Int,\n\ti::Int,\n\tterminals::Vector{Int},\n\tgrounded::Vector{Bool},\n\tvm_pair_lb::Vector,\n\tvm_pair_ub::Vector;\n\treport::Bool=true\n)\n\nImposes pairwise voltage magnitude bounds, i.e. magnitude bounds on the voltage between to terminals, for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_pairwise-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_pairwise","text":"function constraint_mc_voltage_pairwise(\n    pm::RectangularVoltageExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    bounded::Bool=true,\n    report::Bool=true,\n)\n\nImposes pairwise voltage magnitude bounds, i.e. magnitude bounds on the voltage between to terminals, for models with explicit neutrals\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{SDPUBFModel, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{SOCConicUBFModel, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_psd-Tuple{SOCUBFModels, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_psd","text":"Add explicit PSD-ness of W for nodes where it is not implied\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_mc_voltage_reference-Tuple{Union{ExplicitNeutralModels, RectangularVoltageExplicitNeutralModels}, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_mc_voltage_reference","text":"function constraint_mc_voltage_reference(\n    pm::ExplicitNeutralModels,\n    id::Int;\n    nw::Int=nw_id_default,\n    bounded::Bool=true,\n    report::Bool=true,\n)\n\nImposes suitable constraints for the voltage at the reference bus\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_pqw-Tuple{JuMP.Model, JuMP.VariableRef, JuMP.VariableRef, Vararg{Real, 6}}","page":"Constraints","title":"PowerModelsDistribution.constraint_pqw","text":"Creates the constraints modelling the (relaxed) voltage-dependency of the power consumed in each phase, s=p+jq. This is completely symmetrical for p and q, with appropriate substitutions of the variables and parameters: p->q, a->b, alpha->beta, pmin->qmin, pmax->qmax\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_complementarity_mi-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Real, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_complementarity_mi","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_complementarity_mi-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_complementarity_mi","text":"constraint_storage_complementarity_mi(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)\n\nTemplate function for mixed-integer storage complementarity constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_complementarity_nl-Tuple{AbstractUnbalancedPowerModel, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_complementarity_nl","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_complementarity_nl-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_complementarity_nl","text":"constraint_storage_complementarity_nl(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)\n\nTemplate function for nonlinear storage complementarity constraints\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_complementarity_nl-Tuple{LPUBFDiagModel, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_complementarity_nl","text":"constraint_storage_complementarity_nl(pm::LPUBFDiagModel, n::Int, i::Int)\n\nLinear version of storage complementarity constraint\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64, Real, Real, Real}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_state","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_state","text":"constraint_storage_state(pm::AbstractUnbalancedPowerModel, i::Int, nw_1::Int, nw_2::Int)::Nothing\n\nTemplate function for storage state constraints for multinetwork problems\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_state-Tuple{AbstractUnbalancedPowerModel, Int64}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_state","text":"constraint_storage_state(pm::AbstractUnbalancedPowerModel, i::Int; nw::Int=nw_id_default)::Nothing\n\nTemplate function for storage state constraints (non multinetwork)\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_storage_state_initial-Tuple{AbstractUnbalancedPowerModel, Int64, Int64, Vararg{Real, 4}}","page":"Constraints","title":"PowerModelsDistribution.constraint_storage_state_initial","text":"\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.constraint_switch_thermal_limit-Tuple{AbstractUnbalancedPowerModel, Int64, Tuple{Int64, Int64, Int64}, Vector{Int64}, Vector{<:Real}}","page":"Constraints","title":"PowerModelsDistribution.constraint_switch_thermal_limit","text":"constraint_switch_thermal_limit(pm::AbstractUnbalancedPowerModel, nw::Int, f_idx::Tuple{Int,Int,Int}, f_connections::Vector{Int}, rating::Vector{<:Real})::Nothing\n\nGeneric thermal limit constraint for switches (from-side)\n\nmathp_{fr}^2 + q_{fr}^2 \\leq S_{max}^2\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#Relaxation-Helpers","page":"Constraints","title":"Relaxation Helpers","text":"","category":"section"},{"location":"reference/constraints.html","page":"Constraints","title":"Constraints","text":"Modules = [PowerModelsDistribution]\nPrivate = false\nOrder = [:function]\nPages = [\"relaxation_scheme.jl\"]","category":"page"},{"location":"reference/constraints.html#PowerModelsDistribution.cut_complex_product_and_angle_difference-NTuple{7, Any}","page":"Constraints","title":"PowerModelsDistribution.cut_complex_product_and_angle_difference","text":"cut_complex_product_and_angle_difference(m, wf, wt, wr, wi, angmin, angmax)\n\nA valid inequality for the product of two complex variables with magnitude and angle difference bounds. In the literature this constraints are called the Lifted Nonlinear Cuts (LNCs). @misc{1512.04644,     Author = {Carleton Coffrin and Hassan Hijazi and Pascal Van Hentenryck},     Title = {Strengthening the SDP Relaxation of AC Power Flows with Convex         Envelopes, Bound Tightening, and Lifted Nonlinear Cuts},     Year = {2015},     Eprint = {arXiv:1512.04644}, }\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_psd_real-Tuple{Any, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_psd_real","text":"relaxation_psd_to_psd_real(m, mxreal, mximag; ndim=3)\n\nFor debugging / exploration: real-valued SDP to SDP relaxation based on PSDness of principal minors, default is 3x3 SDP relaxation\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc-Tuple{JuMP.Model, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc","text":"relaxation_psd_to_soc(m::JuMP.Model, mxreal, mximag; complex::Bool=true)\n\nSee section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc_complex-Tuple{Any, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex","text":"relaxation_psd_to_soc_complex(m, mxreal, mximag)\n\nSDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc_complex_conic-Tuple{Any, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc_complex_conic","text":"relaxation_psd_to_soc_complex_conic(m, mxreal, mximag)\n\nSDP to SOC relaxation of type 2, applied to complex-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc_conic-Tuple{Any, Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc_conic","text":"relaxation_psd_to_soc_conic(m, mxreal, mximag; complex=true)\n\nSee section 4.3 for complex to real PSD constraint transformation: @article{Fazel2001, author = {Fazel, M. and Hindi, H. and Boyd, S.P.}, title = {{A rank minimization heuristic with application to minimum order system approximation}}, doi = {10.1109/ACC.2001.945730}, journal = {Proc. American Control Conf.}, number = {2}, pages = {4734–4739}, url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=945730}, volume = {6}, year = {2001} }\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc_real-Tuple{Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc_real","text":"relaxation_psd_to_soc_real(m, mx)\n\nSDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#PowerModelsDistribution.relaxation_psd_to_soc_real_conic-Tuple{Any, Any}","page":"Constraints","title":"PowerModelsDistribution.relaxation_psd_to_soc_real_conic","text":"relaxation_psd_to_soc_real_conic(m, mx)\n\nSDP to SOC relaxation of type 2, applied to real-value matrix,  as described in:\n\n@article{Kim2003,\nauthor = {Kim, S and Kojima, M and Yamashita, M},\ntitle = {{Second order cone programming relaxation of a positive semidefinite constraint}},\ndoi = {10.1080/1055678031000148696},\njournal = {Optimization Methods and Software},\nnumber = {5},\npages = {535--541},\nvolume = {18},\nyear = {2003}\n}\n\n\n\n\n\n","category":"method"},{"location":"reference/constraints.html#Miscellaneous-Helpers","page":"Constraints","title":"Miscellaneous Helpers","text":"","category":"section"},{"location":"reference/constraints.html","page":"Constraints","title":"Constraints","text":"calculate_tm_scale\ncalc_branch_y\ncalc_buspair_parameters","category":"page"},{"location":"reference/constraints.html#PowerModelsDistribution.calculate_tm_scale","page":"Constraints","title":"PowerModelsDistribution.calculate_tm_scale","text":"Calculates the tap scale factor for the non-dimensionalized equations.\n\n\n\n\n\n","category":"function"},{"location":"reference/constraints.html#PowerModelsDistribution.calc_branch_y","page":"Constraints","title":"PowerModelsDistribution.calc_branch_y","text":"calc_branch_y(branch::Dict{String,<:Any})\n\ncomputes branch admittance matrices\n\n\n\n\n\n","category":"function"},{"location":"reference/constraints.html#PowerModelsDistribution.calc_buspair_parameters","page":"Constraints","title":"PowerModelsDistribution.calc_buspair_parameters","text":"calc_buspair_parameters(buses, branches)\n\nComputes the buspair parameters for the network\n\n\n\n\n\n","category":"function"}]
}
